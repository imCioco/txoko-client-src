; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35217.0 

	TITLE	d:\_m2work\txoko-m2-work\txoko-client-src\vs_files\userinterface\distribute\instancebasemotion.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	?ELTimer_GetServerMSec@@YAKXZ:PROC		; ELTimer_GetServerMSec
EXTRN	?SetFishingPosition@CActorInstance@@QAEXAAUD3DXVECTOR3@@@Z:PROC ; CActorInstance::SetFishingPosition
EXTRN	?PixelPositionToD3DXVECTOR3@@YAXABUD3DXVECTOR3@@PAU1@@Z:PROC ; PixelPositionToD3DXVECTOR3
EXTRN	?isLock@CActorInstance@@QAEHXZ:PROC		; CActorInstance::isLock
EXTRN	?SetEndStopMotion@CGraphicThingInstance@@QAEXXZ:PROC ; CGraphicThingInstance::SetEndStopMotion
EXTRN	?ResetLocalTime@CGraphicThingInstance@@QAEXXZ:PROC ; CGraphicThingInstance::ResetLocalTime
EXTRN	?PushLoopMotion@CActorInstance@@QAE_NKMM@Z:PROC	; CActorInstance::PushLoopMotion
EXTRN	?PushOnceMotion@CActorInstance@@QAE_NKMM@Z:PROC	; CActorInstance::PushOnceMotion
EXTRN	?SetLoopMotion@CActorInstance@@QAEXKMM@Z:PROC	; CActorInstance::SetLoopMotion
PUBLIC	??$EL_DegreeToRadian@M@@YAMM@Z			; EL_DegreeToRadian<float>
PUBLIC	??$ELPlainCoord_GetRotatedPixelPosition@M@@YAXMMMMPAM0@Z ; ELPlainCoord_GetRotatedPixelPosition<float>
PUBLIC	?ActEmotion@CInstanceBase@@QAEXK@Z		; CInstanceBase::ActEmotion
PUBLIC	?ActDualEmotion@CInstanceBase@@QAEXAAV1@GG@Z	; CInstanceBase::ActDualEmotion
PUBLIC	?__DisableChangingTCPState@CInstanceBase@@IAEXXZ ; CInstanceBase::__DisableChangingTCPState
PUBLIC	?GetFishingRot@CInstanceBase@@QAEHPAH@Z		; CInstanceBase::GetFishingRot
PUBLIC	?CatchFail@CInstanceBase@@QAEXXZ		; CInstanceBase::CatchFail
PUBLIC	?CatchSuccess@CInstanceBase@@QAEXXZ		; CInstanceBase::CatchSuccess
PUBLIC	?ReactFishing@CInstanceBase@@QAEXXZ		; CInstanceBase::ReactFishing
PUBLIC	?StopFishing@CInstanceBase@@QAEXXZ		; CInstanceBase::StopFishing
PUBLIC	?StartFishing@CInstanceBase@@QAEXM@Z		; CInstanceBase::StartFishing
PUBLIC	?isLock@CInstanceBase@@QAEHXZ			; CInstanceBase::isLock
PUBLIC	?PushLoopMotion@CInstanceBase@@QAEXGMM@Z	; CInstanceBase::PushLoopMotion
PUBLIC	?PushOnceMotion@CInstanceBase@@QAEXGMM@Z	; CInstanceBase::PushOnceMotion
PUBLIC	?SetLoopMotion@CInstanceBase@@QAEXGMM@Z		; CInstanceBase::SetLoopMotion
PUBLIC	?SetMotionMode@CInstanceBase@@QAEXH@Z		; CInstanceBase::SetMotionMode
PUBLIC	?__EnableChangingTCPState@CInstanceBase@@IAEXXZ	; CInstanceBase::__EnableChangingTCPState
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?__EnableChangingTCPState@CInstanceBase@@IAEXXZ
_TEXT	SEGMENT
?__EnableChangingTCPState@CInstanceBase@@IAEXXZ PROC	; CInstanceBase::__EnableChangingTCPState, COMDAT
; _this$ = ecx

; 121  : 	m_bEnableTCPState = TRUE;

  00000	c7 81 d0 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+464], 1

; 122  : }

  0000a	c3		 ret	 0
?__EnableChangingTCPState@CInstanceBase@@IAEXXZ ENDP	; CInstanceBase::__EnableChangingTCPState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?SetMotionMode@CInstanceBase@@QAEXH@Z
_TEXT	SEGMENT
_iMotionMode$ = 8					; size = 4
?SetMotionMode@CInstanceBase@@QAEXH@Z PROC		; CInstanceBase::SetMotionMode, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 11   : 	m_GraphicThingInstance.SetMotionMode(iMotionMode);

  00003	81 c1 d4 01 00
	00		 add	 ecx, 468		; 000001d4H

; 12   : }

  00009	5d		 pop	 ebp

; 11   : 	m_GraphicThingInstance.SetMotionMode(iMotionMode);

  0000a	e9 00 00 00 00	 jmp	 ?SetMotionMode@CActorInstance@@QAEXH@Z ; CActorInstance::SetMotionMode
?SetMotionMode@CInstanceBase@@QAEXH@Z ENDP		; CInstanceBase::SetMotionMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?SetLoopMotion@CInstanceBase@@QAEXGMM@Z
_TEXT	SEGMENT
_wMotion$ = 8						; size = 2
?SetLoopMotion@CInstanceBase@@QAEXGMM@Z PROC		; CInstanceBase::SetLoopMotion, COMDAT
; _this$ = ecx
; _fBlendTime$ = xmm2s
; _fSpeedRatio$ = xmm3s

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 21   : 	m_GraphicThingInstance.SetLoopMotion(wMotion, fBlendTime, fSpeedRatio);

  00003	0f b7 45 08	 movzx	 eax, WORD PTR _wMotion$[ebp]
  00007	83 ec 08	 sub	 esp, 8
  0000a	81 c1 d4 01 00
	00		 add	 ecx, 468		; 000001d4H
  00010	f3 0f 11 5c 24
	04		 movss	 DWORD PTR [esp+4], xmm3
  00016	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?SetLoopMotion@CActorInstance@@QAEXKMM@Z ; CActorInstance::SetLoopMotion

; 22   : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetLoopMotion@CInstanceBase@@QAEXGMM@Z ENDP		; CInstanceBase::SetLoopMotion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?PushOnceMotion@CInstanceBase@@QAEXGMM@Z
_TEXT	SEGMENT
_wMotion$ = 8						; size = 2
?PushOnceMotion@CInstanceBase@@QAEXGMM@Z PROC		; CInstanceBase::PushOnceMotion, COMDAT
; _this$ = ecx
; _fBlendTime$ = xmm2s
; _fSpeedRatio$ = xmm3s

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 26   : 	m_GraphicThingInstance.PushOnceMotion(wMotion, fBlendTime, fSpeedRatio);

  00003	0f b7 45 08	 movzx	 eax, WORD PTR _wMotion$[ebp]
  00007	83 ec 08	 sub	 esp, 8
  0000a	81 c1 d4 01 00
	00		 add	 ecx, 468		; 000001d4H
  00010	f3 0f 11 5c 24
	04		 movss	 DWORD PTR [esp+4], xmm3
  00016	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?PushOnceMotion@CActorInstance@@QAE_NKMM@Z ; CActorInstance::PushOnceMotion

; 27   : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?PushOnceMotion@CInstanceBase@@QAEXGMM@Z ENDP		; CInstanceBase::PushOnceMotion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?PushLoopMotion@CInstanceBase@@QAEXGMM@Z
_TEXT	SEGMENT
_wMotion$ = 8						; size = 2
?PushLoopMotion@CInstanceBase@@QAEXGMM@Z PROC		; CInstanceBase::PushLoopMotion, COMDAT
; _this$ = ecx
; _fBlendTime$ = xmm2s
; _fSpeedRatio$ = xmm3s

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	m_GraphicThingInstance.PushLoopMotion(wMotion, fBlendTime, fSpeedRatio);

  00003	0f b7 45 08	 movzx	 eax, WORD PTR _wMotion$[ebp]
  00007	83 ec 08	 sub	 esp, 8
  0000a	81 c1 d4 01 00
	00		 add	 ecx, 468		; 000001d4H
  00010	f3 0f 11 5c 24
	04		 movss	 DWORD PTR [esp+4], xmm3
  00016	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?PushLoopMotion@CActorInstance@@QAE_NKMM@Z ; CActorInstance::PushLoopMotion

; 32   : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?PushLoopMotion@CInstanceBase@@QAEXGMM@Z ENDP		; CInstanceBase::PushLoopMotion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?isLock@CInstanceBase@@QAEHXZ
_TEXT	SEGMENT
?isLock@CInstanceBase@@QAEHXZ PROC			; CInstanceBase::isLock, COMDAT
; _this$ = ecx

; 46   : 	return m_GraphicThingInstance.isLock();

  00000	81 c1 d4 01 00
	00		 add	 ecx, 468		; 000001d4H
  00006	e9 00 00 00 00	 jmp	 ?isLock@CActorInstance@@QAEHXZ ; CActorInstance::isLock
?isLock@CInstanceBase@@QAEHXZ ENDP			; CInstanceBase::isLock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?StartFishing@CInstanceBase@@QAEXM@Z
_TEXT	SEGMENT
_fRot$ = -32						; size = 4
_v3Fishing$ = -28					; size = 12
_kPPosFishing$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
?StartFishing@CInstanceBase@@QAEXM@Z PROC		; CInstanceBase::StartFishing, COMDAT
; _this$ = ecx
; _frot$ = xmm1s

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 51   : 	BlendRotation(frot);

  00010	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8b f1		 mov	 esi, ecx
  0001d	e8 00 00 00 00	 call	 ?BlendRotation@CInstanceBase@@QAEXMM@Z ; CInstanceBase::BlendRotation

; 52   : 
; 53   : 	const TPixelPosition& c_rkPPosCur=m_GraphicThingInstance.NEW_GetCurPixelPositionRef();

  00022	8d 8e d4 01 00
	00		 lea	 ecx, DWORD PTR [esi+468]
  00028	e8 00 00 00 00	 call	 ?NEW_GetCurPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ ; CActorInstance::NEW_GetCurPixelPositionRef

; 54   : 	float fRot = m_GraphicThingInstance.GetTargetRotation();

  0002d	8d 8e d4 01 00
	00		 lea	 ecx, DWORD PTR [esi+468]
  00033	8b f8		 mov	 edi, eax
  00035	e8 00 00 00 00	 call	 ?GetTargetRotation@CActorInstance@@QAEMXZ ; CActorInstance::GetTargetRotation

; 55   : 	//float fPlainCoordRot=ELRightCoord_ConvertToPlainCoordDegree(fRightCoordRot);
; 56   : 
; 57   : 	TPixelPosition kPPosFishing;
; 58   : 	ELPlainCoord_GetRotatedPixelPosition(c_rkPPosCur.x, c_rkPPosCur.y, c_fFishingDistance, fRot, &kPPosFishing.x, &kPPosFishing.y);	

  0003a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@44160000
  00042	8d 55 f4	 lea	 edx, DWORD PTR _kPPosFishing$[ebp+4]
  00045	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR _kPPosFishing$[ebp]
  0004d	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00051	d9 5d e0	 fstp	 DWORD PTR _fRot$[ebp]
  00054	f3 0f 10 5d e0	 movss	 xmm3, DWORD PTR _fRot$[ebp]
  00059	e8 00 00 00 00	 call	 ??$ELPlainCoord_GetRotatedPixelPosition@M@@YAXMMMMPAM0@Z ; ELPlainCoord_GetRotatedPixelPosition<float>

; 59   : 	if (!__Background_GetWaterHeight(kPPosFishing, &kPPosFishing.z))

  0005e	8d 45 f8	 lea	 eax, DWORD PTR _kPPosFishing$[ebp+8]
  00061	50		 push	 eax
  00062	8d 45 f0	 lea	 eax, DWORD PTR _kPPosFishing$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?__Background_GetWaterHeight@CInstanceBase@@QAE_NABUD3DXVECTOR3@@PAM@Z ; CInstanceBase::__Background_GetWaterHeight
  0006b	84 c0		 test	 al, al
  0006d	75 0a		 jne	 SHORT $LN2@StartFishi

; 60   : 		kPPosFishing.z=c_rkPPosCur.z;

  0006f	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00074	f3 0f 11 45 f8	 movss	 DWORD PTR _kPPosFishing$[ebp+8], xmm0
$LN2@StartFishi:

; 61   : 	
; 62   : 	D3DXVECTOR3 v3Fishing;
; 63   : 	PixelPositionToD3DXVECTOR3(kPPosFishing, &v3Fishing);

  00079	8d 45 e4	 lea	 eax, DWORD PTR _v3Fishing$[ebp]
  0007c	50		 push	 eax
  0007d	8d 45 f0	 lea	 eax, DWORD PTR _kPPosFishing$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?PixelPositionToD3DXVECTOR3@@YAXABUD3DXVECTOR3@@PAU1@@Z ; PixelPositionToD3DXVECTOR3
  00086	83 c4 08	 add	 esp, 8

; 64   : 	m_GraphicThingInstance.SetFishingPosition(v3Fishing);

  00089	8d 45 e4	 lea	 eax, DWORD PTR _v3Fishing$[ebp]
  0008c	8d 8e d4 01 00
	00		 lea	 ecx, DWORD PTR [esi+468]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?SetFishingPosition@CActorInstance@@QAEXAAUD3DXVECTOR3@@@Z ; CActorInstance::SetFishingPosition

; 65   : 
; 66   : 	PushOnceMotion(CRaceMotionData::NAME_FISHING_THROW);

  00098	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  000a0	8b ce		 mov	 ecx, esi
  000a2	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  000aa	6a 1a		 push	 26			; 0000001aH
  000ac	e8 00 00 00 00	 call	 ?PushOnceMotion@CInstanceBase@@QAEXGMM@Z ; CInstanceBase::PushOnceMotion

; 67   : 	PushLoopMotion(CRaceMotionData::NAME_FISHING_WAIT);

  000b1	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  000b9	8b ce		 mov	 ecx, esi
  000bb	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  000c3	6a 1b		 push	 27			; 0000001bH
  000c5	e8 00 00 00 00	 call	 ?PushLoopMotion@CInstanceBase@@QAEXGMM@Z ; CInstanceBase::PushLoopMotion

; 68   : }

  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	33 cd		 xor	 ecx, ebp
  000d1	5b		 pop	 ebx
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?StartFishing@CInstanceBase@@QAEXM@Z ENDP		; CInstanceBase::StartFishing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?StopFishing@CInstanceBase@@QAEXXZ
_TEXT	SEGMENT
?StopFishing@CInstanceBase@@QAEXXZ PROC			; CInstanceBase::StopFishing, COMDAT
; _this$ = ecx

; 70   : {

  00000	56		 push	 esi

; 71   : 	m_GraphicThingInstance.InterceptOnceMotion(CRaceMotionData::NAME_FISHING_STOP);

  00001	51		 push	 ecx
  00002	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00009	8b f1		 mov	 esi, ecx
  0000b	6a 00		 push	 0
  0000d	51		 push	 ecx
  0000e	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00015	6a 1c		 push	 28			; 0000001cH
  00017	8d 8e d4 01 00
	00		 lea	 ecx, DWORD PTR [esi+468]
  0001d	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion

; 72   : 	PushLoopMotion(CRaceMotionData::NAME_WAIT);

  00022	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0002a	8b ce		 mov	 ecx, esi
  0002c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  00034	6a 01		 push	 1
  00036	e8 00 00 00 00	 call	 ?PushLoopMotion@CInstanceBase@@QAEXGMM@Z ; CInstanceBase::PushLoopMotion
  0003b	5e		 pop	 esi

; 73   : }

  0003c	c3		 ret	 0
?StopFishing@CInstanceBase@@QAEXXZ ENDP			; CInstanceBase::StopFishing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?ReactFishing@CInstanceBase@@QAEXXZ
_TEXT	SEGMENT
?ReactFishing@CInstanceBase@@QAEXXZ PROC		; CInstanceBase::ReactFishing, COMDAT
; _this$ = ecx

; 76   : 	PushOnceMotion(CRaceMotionData::NAME_FISHING_REACT);

  00000	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00008	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  00010	56		 push	 esi
  00011	6a 1d		 push	 29			; 0000001dH
  00013	8b f1		 mov	 esi, ecx
  00015	e8 00 00 00 00	 call	 ?PushOnceMotion@CInstanceBase@@QAEXGMM@Z ; CInstanceBase::PushOnceMotion

; 77   : 	PushLoopMotion(CRaceMotionData::NAME_FISHING_WAIT);

  0001a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00022	8b ce		 mov	 ecx, esi
  00024	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  0002c	6a 1b		 push	 27			; 0000001bH
  0002e	e8 00 00 00 00	 call	 ?PushLoopMotion@CInstanceBase@@QAEXGMM@Z ; CInstanceBase::PushLoopMotion
  00033	5e		 pop	 esi

; 78   : }

  00034	c3		 ret	 0
?ReactFishing@CInstanceBase@@QAEXXZ ENDP		; CInstanceBase::ReactFishing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?CatchSuccess@CInstanceBase@@QAEXXZ
_TEXT	SEGMENT
?CatchSuccess@CInstanceBase@@QAEXXZ PROC		; CInstanceBase::CatchSuccess, COMDAT
; _this$ = ecx

; 80   : {

  00000	56		 push	 esi

; 81   : 	m_GraphicThingInstance.InterceptOnceMotion(CRaceMotionData::NAME_FISHING_CATCH);

  00001	51		 push	 ecx
  00002	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00009	8b f1		 mov	 esi, ecx
  0000b	6a 00		 push	 0
  0000d	51		 push	 ecx
  0000e	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00015	6a 1e		 push	 30			; 0000001eH
  00017	8d 8e d4 01 00
	00		 lea	 ecx, DWORD PTR [esi+468]
  0001d	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion

; 82   : 	PushLoopMotion(CRaceMotionData::NAME_WAIT);

  00022	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0002a	8b ce		 mov	 ecx, esi
  0002c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  00034	6a 01		 push	 1
  00036	e8 00 00 00 00	 call	 ?PushLoopMotion@CInstanceBase@@QAEXGMM@Z ; CInstanceBase::PushLoopMotion
  0003b	5e		 pop	 esi

; 83   : }

  0003c	c3		 ret	 0
?CatchSuccess@CInstanceBase@@QAEXXZ ENDP		; CInstanceBase::CatchSuccess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?CatchFail@CInstanceBase@@QAEXXZ
_TEXT	SEGMENT
?CatchFail@CInstanceBase@@QAEXXZ PROC			; CInstanceBase::CatchFail, COMDAT
; _this$ = ecx

; 85   : {

  00000	56		 push	 esi

; 86   : 	m_GraphicThingInstance.InterceptOnceMotion(CRaceMotionData::NAME_FISHING_FAIL);

  00001	51		 push	 ecx
  00002	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00009	8b f1		 mov	 esi, ecx
  0000b	6a 00		 push	 0
  0000d	51		 push	 ecx
  0000e	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00015	6a 1f		 push	 31			; 0000001fH
  00017	8d 8e d4 01 00
	00		 lea	 ecx, DWORD PTR [esi+468]
  0001d	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion

; 87   : 	PushLoopMotion(CRaceMotionData::NAME_WAIT);

  00022	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0002a	8b ce		 mov	 ecx, esi
  0002c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  00034	6a 01		 push	 1
  00036	e8 00 00 00 00	 call	 ?PushLoopMotion@CInstanceBase@@QAEXGMM@Z ; CInstanceBase::PushLoopMotion
  0003b	5e		 pop	 esi

; 88   : }

  0003c	c3		 ret	 0
?CatchFail@CInstanceBase@@QAEXXZ ENDP			; CInstanceBase::CatchFail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?GetFishingRot@CInstanceBase@@QAEHPAH@Z
_TEXT	SEGMENT
_fRot$1$ = -36						; size = 4
_fCharacterRot$ = -32					; size = 4
tv193 = -28						; size = 4
tv196 = -28						; size = 4
_kPPosFishingRight$1 = -24				; size = 12
_kPPosFishingLeft$2 = -12				; size = 12
_pirot$ = 8						; size = 4
?GetFishingRot@CInstanceBase@@QAEHPAH@Z PROC		; CInstanceBase::GetFishingRot, COMDAT
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 28	 sub	 esp, 40			; 00000028H
  00009	56		 push	 esi

; 92   : 	const TPixelPosition& c_rkPPosCur=m_GraphicThingInstance.NEW_GetCurPixelPositionRef();

  0000a	8d b1 d4 01 00
	00		 lea	 esi, DWORD PTR [ecx+468]
  00010	57		 push	 edi
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?NEW_GetCurPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ ; CActorInstance::NEW_GetCurPixelPositionRef

; 93   : 	float fCharacterRot = m_GraphicThingInstance.GetRotation();

  00018	8b ce		 mov	 ecx, esi
  0001a	8b f8		 mov	 edi, eax
  0001c	e8 00 00 00 00	 call	 ?GetRotation@CActorInstance@@QAEMXZ ; CActorInstance::GetRotation
  00021	0f 57 c0	 xorps	 xmm0, xmm0
  00024	d9 5c 24 10	 fstp	 DWORD PTR _fCharacterRot$[esp+48]

; 94   : 
; 95   : 	//float frot = fCharacterRot;
; 96   : 
; 97   : 	for (float fRot=0.0f; fRot<=180.0f; fRot+=10.0f)

  00028	f3 0f 11 44 24
	0c		 movss	 DWORD PTR _fRot$1$[esp+48], xmm0
  0002e	66 90		 npad	 2
$LL4@GetFishing:

; 98   : 	{
; 99   : 		TPixelPosition kPPosFishingRight;
; 100  : 		ELPlainCoord_GetRotatedPixelPosition(c_rkPPosCur.x, c_rkPPosCur.y, c_fFishingDistance, fCharacterRot+fRot, &kPPosFishingRight.x, &kPPosFishingRight.y);

  00030	f3 0f 58 44 24
	10		 addss	 xmm0, DWORD PTR _fCharacterRot$[esp+48]
  00036	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@44160000
  0003e	8d 54 24 1c	 lea	 edx, DWORD PTR _kPPosFishingRight$1[esp+52]
  00042	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
  00047	8d 4c 24 18	 lea	 ecx, DWORD PTR _kPPosFishingRight$1[esp+48]
  0004b	f3 0f 11 44 24
	14		 movss	 DWORD PTR tv193[esp+48], xmm0
  00051	0f 28 d8	 movaps	 xmm3, xmm0
  00054	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00058	e8 00 00 00 00	 call	 ??$ELPlainCoord_GetRotatedPixelPosition@M@@YAXMMMMPAM0@Z ; ELPlainCoord_GetRotatedPixelPosition<float>

; 101  : 		if (__Background_IsWaterPixelPosition(kPPosFishingRight))

  0005d	8d 44 24 18	 lea	 eax, DWORD PTR _kPPosFishingRight$1[esp+48]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?__Background_IsWaterPixelPosition@CInstanceBase@@QAE_NABUD3DXVECTOR3@@@Z ; CInstanceBase::__Background_IsWaterPixelPosition
  00067	84 c0		 test	 al, al
  00069	0f 85 88 00 00
	00		 jne	 $LN9@GetFishing

; 104  : 			return TRUE;
; 105  : 		}
; 106  : 
; 107  : 		TPixelPosition kPPosFishingLeft;
; 108  : 		ELPlainCoord_GetRotatedPixelPosition(c_rkPPosCur.x, c_rkPPosCur.y, c_fFishingDistance, fCharacterRot-fRot, &kPPosFishingLeft.x, &kPPosFishingLeft.y);	

  0006f	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR _fCharacterRot$[esp+48]
  00075	8d 54 24 28	 lea	 edx, DWORD PTR _kPPosFishingLeft$2[esp+52]
  00079	f3 0f 5c 44 24
	0c		 subss	 xmm0, DWORD PTR _fRot$1$[esp+48]
  0007f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@44160000
  00087	8d 4c 24 24	 lea	 ecx, DWORD PTR _kPPosFishingLeft$2[esp+48]
  0008b	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
  00090	f3 0f 11 44 24
	14		 movss	 DWORD PTR tv196[esp+48], xmm0
  00096	0f 28 d8	 movaps	 xmm3, xmm0
  00099	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  0009d	e8 00 00 00 00	 call	 ??$ELPlainCoord_GetRotatedPixelPosition@M@@YAXMMMMPAM0@Z ; ELPlainCoord_GetRotatedPixelPosition<float>

; 109  : 		if (__Background_IsWaterPixelPosition(kPPosFishingLeft))

  000a2	8d 44 24 24	 lea	 eax, DWORD PTR _kPPosFishingLeft$2[esp+48]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?__Background_IsWaterPixelPosition@CInstanceBase@@QAE_NABUD3DXVECTOR3@@@Z ; CInstanceBase::__Background_IsWaterPixelPosition
  000ac	84 c0		 test	 al, al
  000ae	75 2f		 jne	 SHORT $LN10@GetFishing

; 94   : 
; 95   : 	//float frot = fCharacterRot;
; 96   : 
; 97   : 	for (float fRot=0.0f; fRot<=180.0f; fRot+=10.0f)

  000b0	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR _fRot$1$[esp+48]
  000b6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  000be	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43340000
  000c6	0f 2f c8	 comiss	 xmm1, xmm0
  000c9	f3 0f 11 44 24
	0c		 movss	 DWORD PTR _fRot$1$[esp+48], xmm0
  000cf	0f 83 5b ff ff
	ff		 jae	 $LL4@GetFishing

; 112  : 			return TRUE;
; 113  : 		}
; 114  : 	}
; 115  : 
; 116  : 	return FALSE;

  000d5	33 c0		 xor	 eax, eax

; 117  : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN10@GetFishing:

; 110  : 		{
; 111  : 			*pirot = fCharacterRot-fRot;

  000df	f3 0f 2c 4c 24
	14		 cvttss2si ecx, DWORD PTR tv196[esp+48]

; 117  : }

  000e5	8b 45 08	 mov	 eax, DWORD PTR _pirot$[ebp]
  000e8	89 08		 mov	 DWORD PTR [eax], ecx
  000ea	b8 01 00 00 00	 mov	 eax, 1
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 04 00	 ret	 4
$LN9@GetFishing:

; 102  : 		{
; 103  : 			*pirot = fCharacterRot+fRot;

  000f7	f3 0f 2c 4c 24
	14		 cvttss2si ecx, DWORD PTR tv193[esp+48]

; 117  : }

  000fd	8b 45 08	 mov	 eax, DWORD PTR _pirot$[ebp]
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	89 08		 mov	 DWORD PTR [eax], ecx
  00104	b8 01 00 00 00	 mov	 eax, 1
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c2 04 00	 ret	 4
?GetFishingRot@CInstanceBase@@QAEHPAH@Z ENDP		; CInstanceBase::GetFishingRot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?__DisableChangingTCPState@CInstanceBase@@IAEXXZ
_TEXT	SEGMENT
?__DisableChangingTCPState@CInstanceBase@@IAEXXZ PROC	; CInstanceBase::__DisableChangingTCPState, COMDAT
; _this$ = ecx

; 126  : 	m_bEnableTCPState = FALSE;

  00000	c7 81 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+464], 0

; 127  : }

  0000a	c3		 ret	 0
?__DisableChangingTCPState@CInstanceBase@@IAEXXZ ENDP	; CInstanceBase::__DisableChangingTCPState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
; File D:\_m2work\txoko-m2-work\txoko-client-src\extern\include\d3dx8math.inl
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
; File D:\_m2work\txoko-m2-work\txoko-client-src\extern\include\d3dx8math.inl
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
; File D:\_m2work\txoko-m2-work\txoko-client-src\extern\include\d3dx8math.inl
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
; File D:\_m2work\txoko-m2-work\txoko-client-src\extern\include\d3dx8math.inl
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?ActDualEmotion@CInstanceBase@@QAEXAAV1@GG@Z
_TEXT	SEGMENT
_kDstPosition$ = -24					; size = 12
_this$1$ = -12						; size = 4
tv336 = -8						; size = 4
tv335 = -4						; size = 4
_rkDstInst$ = 8						; size = 4
tv370 = 8						; size = 4
_wMotionNumber1$ = 12					; size = 2
_wMotionNumber2$ = 16					; size = 2
?ActDualEmotion@CInstanceBase@@QAEXAAV1@GG@Z PROC	; CInstanceBase::ActDualEmotion, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 75 f4	 mov	 DWORD PTR _this$1$[ebp], esi

; 131  : 	if (!IsWaiting())

  0000e	e8 00 00 00 00	 call	 ?IsWaiting@CInstanceBase@@QAEHXZ ; CInstanceBase::IsWaiting
  00013	85 c0		 test	 eax, eax
  00015	75 1f		 jne	 SHORT $LN2@ActDualEmo

; 132  : 	{
; 133  : 		m_GraphicThingInstance.SetLoopMotion(CRaceMotionData::NAME_WAIT, 0.05f);

  00017	83 ec 08	 sub	 esp, 8
  0001a	8d 8e d4 01 00
	00		 lea	 ecx, DWORD PTR [esi+468]
  00020	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00028	c7 04 24 cd cc
	4c 3d		 mov	 DWORD PTR [esp], 1028443341 ; 3d4ccccdH
  0002f	6a 01		 push	 1
  00031	e8 00 00 00 00	 call	 ?SetLoopMotion@CActorInstance@@QAEXKMM@Z ; CActorInstance::SetLoopMotion
$LN2@ActDualEmo:

; 134  : 	}
; 135  : 	if (!rkDstInst.IsWaiting())

  00036	8b 5d 08	 mov	 ebx, DWORD PTR _rkDstInst$[ebp]
  00039	8b cb		 mov	 ecx, ebx
  0003b	e8 00 00 00 00	 call	 ?IsWaiting@CInstanceBase@@QAEHXZ ; CInstanceBase::IsWaiting
  00040	85 c0		 test	 eax, eax
  00042	75 1f		 jne	 SHORT $LN3@ActDualEmo

; 136  : 	{
; 137  : 		rkDstInst.m_GraphicThingInstance.SetLoopMotion(CRaceMotionData::NAME_WAIT, 0.05f);

  00044	83 ec 08	 sub	 esp, 8
  00047	8d 8b d4 01 00
	00		 lea	 ecx, DWORD PTR [ebx+468]
  0004d	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00055	c7 04 24 cd cc
	4c 3d		 mov	 DWORD PTR [esp], 1028443341 ; 3d4ccccdH
  0005c	6a 01		 push	 1
  0005e	e8 00 00 00 00	 call	 ?SetLoopMotion@CActorInstance@@QAEXKMM@Z ; CActorInstance::SetLoopMotion
$LN3@ActDualEmo:

; 138  : 	}
; 139  : 
; 140  : 	const float c_fEmotionDistance = 100.0f;
; 141  : 	const TPixelPosition & c_rMainPosition = NEW_GetCurPixelPositionRef();

  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?NEW_GetCurPixelPositionRef@CInstanceBase@@IAEABUD3DXVECTOR3@@XZ ; CInstanceBase::NEW_GetCurPixelPositionRef

; 142  : 	const TPixelPosition & c_rTargetPosition = rkDstInst.NEW_GetCurPixelPositionRef();

  0006a	8b cb		 mov	 ecx, ebx
  0006c	8b f8		 mov	 edi, eax
  0006e	e8 00 00 00 00	 call	 ?NEW_GetCurPixelPositionRef@CInstanceBase@@IAEABUD3DXVECTOR3@@XZ ; CInstanceBase::NEW_GetCurPixelPositionRef
; File D:\_m2work\txoko-m2-work\txoko-client-src\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00073	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp

; 142  : 	const TPixelPosition & c_rTargetPosition = rkDstInst.NEW_GetCurPixelPositionRef();

  00078	8b f0		 mov	 esi, eax
; File D:\_m2work\txoko-m2-work\txoko-client-src\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0007a	f3 0f 10 17	 movss	 xmm2, DWORD PTR [edi]
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp

; 144  : 	float fDistance = sqrtf((kDirection.x*kDirection.x) + (kDirection.y*kDirection.y));

  0007e	51		 push	 ecx
; File D:\_m2work\txoko-m2-work\txoko-client-src\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0007f	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
  00084	f3 0f 5c 16	 subss	 xmm2, DWORD PTR [esi]

; 181  :     y = fy;

  00088	0f 28 c8	 movaps	 xmm1, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0008b	f3 0f 11 45 f8	 movss	 DWORD PTR tv336[ebp], xmm0

; 181  :     y = fy;

  00090	f3 0f 59 c8	 mulss	 xmm1, xmm0
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp

; 144  : 	float fDistance = sqrtf((kDirection.x*kDirection.x) + (kDirection.y*kDirection.y));

  00094	0f 28 c2	 movaps	 xmm0, xmm2
  00097	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File D:\_m2work\txoko-m2-work\txoko-client-src\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0009b	f3 0f 11 55 fc	 movss	 DWORD PTR tv335[ebp], xmm2
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp

; 144  : 	float fDistance = sqrtf((kDirection.x*kDirection.x) + (kDirection.y*kDirection.y));

  000a0	f3 0f 58 c8	 addss	 xmm1, xmm0
  000a4	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  000a9	e8 00 00 00 00	 call	 _sqrtf
  000ae	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR tv335[ebp]
  000b3	83 c4 04	 add	 esp, 4
  000b6	d9 5d 08	 fstp	 DWORD PTR tv370[ebp]
  000b9	f3 0f 5e 55 08	 divss	 xmm2, DWORD PTR tv370[ebp]

; 145  : 	TPixelPosition kDstPosition;
; 146  : 	kDstPosition.x = c_rTargetPosition.x + (kDirection.x/fDistance)*c_fEmotionDistance;

  000be	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@42c80000
  000c6	f3 0f 58 16	 addss	 xmm2, DWORD PTR [esi]
  000ca	f3 0f 11 55 e8	 movss	 DWORD PTR _kDstPosition$[ebp], xmm2
  000cf	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR tv336[ebp]
  000d4	f3 0f 5e 55 08	 divss	 xmm2, DWORD PTR tv370[ebp]

; 147  : 	kDstPosition.y = c_rTargetPosition.y + (kDirection.y/fDistance)*c_fEmotionDistance;

  000d9	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@42c80000
  000e1	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000e6	f3 0f 11 55 ec	 movss	 DWORD PTR _kDstPosition$[ebp+4], xmm2

; 148  : 
; 149  : 	DWORD dwCurTime = ELTimer_GetServerMSec() + 500;

  000eb	e8 00 00 00 00	 call	 ?ELTimer_GetServerMSec@@YAKXZ ; ELTimer_GetServerMSec

; 150  : 	PushTCPStateExpanded(dwCurTime, kDstPosition, 0.0f, FUNC_EMOTION, MAKELONG(wMotionNumber1, wMotionNumber2), rkDstInst.GetVirtualID());

  000f0	8b cb		 mov	 ecx, ebx
  000f2	8d b0 f4 01 00
	00		 lea	 esi, DWORD PTR [eax+500]
  000f8	e8 00 00 00 00	 call	 ?GetVirtualID@CInstanceBase@@QAEKXZ ; CInstanceBase::GetVirtualID
  000fd	0f b7 55 10	 movzx	 edx, WORD PTR _wMotionNumber2$[ebp]
  00101	0f 57 db	 xorps	 xmm3, xmm3
  00104	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wMotionNumber1$[ebp]
  00108	50		 push	 eax
  00109	c1 e2 10	 shl	 edx, 16			; 00000010H
  0010c	8d 45 e8	 lea	 eax, DWORD PTR _kDstPosition$[ebp]
  0010f	0b d1		 or	 edx, ecx
  00111	52		 push	 edx
  00112	51		 push	 ecx
  00113	50		 push	 eax
  00114	56		 push	 esi
  00115	8b 75 f4	 mov	 esi, DWORD PTR _this$1$[ebp]
  00118	8b ce		 mov	 ecx, esi
  0011a	e8 00 00 00 00	 call	 ?PushTCPStateExpanded@CInstanceBase@@QAEXKABUD3DXVECTOR3@@MIII@Z ; CInstanceBase::PushTCPStateExpanded

; 151  : 
; 152  : 	__DisableChangingTCPState();

  0011f	8b ce		 mov	 ecx, esi
  00121	e8 00 00 00 00	 call	 ?__DisableChangingTCPState@CInstanceBase@@IAEXXZ ; CInstanceBase::__DisableChangingTCPState

; 153  : 	rkDstInst.__DisableChangingTCPState();

  00126	8b cb		 mov	 ecx, ebx
  00128	e8 00 00 00 00	 call	 ?__DisableChangingTCPState@CInstanceBase@@IAEXXZ ; CInstanceBase::__DisableChangingTCPState

; 154  : 
; 155  : 	if (__IsMainInstance() || rkDstInst.__IsMainInstance())

  0012d	8b ce		 mov	 ecx, esi
  0012f	e8 00 00 00 00	 call	 ?__IsMainInstance@CInstanceBase@@IAE_NXZ ; CInstanceBase::__IsMainInstance
  00134	84 c0		 test	 al, al
  00136	75 0b		 jne	 SHORT $LN5@ActDualEmo
  00138	8b cb		 mov	 ecx, ebx
  0013a	e8 00 00 00 00	 call	 ?__IsMainInstance@CInstanceBase@@IAE_NXZ ; CInstanceBase::__IsMainInstance
  0013f	84 c0		 test	 al, al
  00141	74 0e		 je	 SHORT $LN4@ActDualEmo
$LN5@ActDualEmo:

; 156  : 	{
; 157  : 		IAbstractPlayer & rPlayer=IAbstractPlayer::GetSingleton();

  00143	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$TAbstractSingleton@VIAbstractPlayer@@@@0PAVIAbstractPlayer@@A ; TAbstractSingleton<IAbstractPlayer>::ms_singleton

; 158  : 		rPlayer.StartEmotionProcess();

  00149	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014b	ff 90 80 00 00
	00		 call	 DWORD PTR [eax+128]
$LN4@ActDualEmo:

; 159  : 	}
; 160  : }

  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 0c 00	 ret	 12			; 0000000cH
?ActDualEmotion@CInstanceBase@@QAEXAAV1@GG@Z ENDP	; CInstanceBase::ActDualEmotion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\InstanceBaseMotion.cpp
;	COMDAT ?ActEmotion@CInstanceBase@@QAEXK@Z
_TEXT	SEGMENT
_dwMotionNumber$ = 8					; size = 4
?ActEmotion@CInstanceBase@@QAEXK@Z PROC			; CInstanceBase::ActEmotion, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 164  : 	PushOnceMotion(dwMotionNumber);

  00003	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0000b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd

; 165  : }

  00013	5d		 pop	 ebp

; 164  : 	PushOnceMotion(dwMotionNumber);

  00014	e9 00 00 00 00	 jmp	 ?PushOnceMotion@CInstanceBase@@QAEXGMM@Z ; CInstanceBase::PushOnceMotion
?ActEmotion@CInstanceBase@@QAEXK@Z ENDP			; CInstanceBase::ActEmotion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\eterBase\Utils.h
;	COMDAT ??$ELPlainCoord_GetRotatedPixelPosition@M@@YAXMMMMPAM0@Z
_TEXT	SEGMENT
_distance$1$ = -20					; size = 4
_centerX$1$ = -16					; size = 4
_centerY$1$ = -12					; size = 4
tv148 = -8						; size = 8
??$ELPlainCoord_GetRotatedPixelPosition@M@@YAXMMMMPAM0@Z PROC ; ELPlainCoord_GetRotatedPixelPosition<float>, COMDAT
; _centerX$ = xmm0s
; _centerY$ = xmm1s
; _distance$ = xmm2s
; _rotDegree$ = xmm3s
; _pdstX$ = ecx
; _pdstY$ = edx

; 94   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	56		 push	 esi
  0000a	f3 0f 11 44 24
	0c		 movss	 DWORD PTR _centerX$1$[esp+28], xmm0
  00010	8b f1		 mov	 esi, ecx
  00012	57		 push	 edi

; 95   : 	T rotRadian=EL_DegreeToRadian(rotDegree);

  00013	0f 28 c3	 movaps	 xmm0, xmm3
  00016	f3 0f 11 54 24
	0c		 movss	 DWORD PTR _distance$1$[esp+32], xmm2
  0001c	8b fa		 mov	 edi, edx
  0001e	f3 0f 11 4c 24
	14		 movss	 DWORD PTR _centerY$1$[esp+32], xmm1
  00024	e8 00 00 00 00	 call	 ??$EL_DegreeToRadian@M@@YAMM@Z ; EL_DegreeToRadian<float>

; 96   : 	*pdstX=centerX+distance*T(sin((double)rotRadian));

  00029	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0002d	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv148[esp+32], xmm0
  00033	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00038	0f 57 c9	 xorps	 xmm1, xmm1
  0003b	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0

; 97   : 	*pdstY=centerY+distance*T(cos((double)rotRadian));

  0003f	f2 0f 10 44 24
	18		 movsd	 xmm0, QWORD PTR tv148[esp+32]
  00045	f3 0f 59 4c 24
	0c		 mulss	 xmm1, DWORD PTR _distance$1$[esp+32]
  0004b	f3 0f 58 4c 24
	10		 addss	 xmm1, DWORD PTR _centerX$1$[esp+32]
  00051	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1
  00055	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0005a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0005e	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _distance$1$[esp+32]
  00064	f3 0f 58 44 24
	14		 addss	 xmm0, DWORD PTR _centerY$1$[esp+32]
  0006a	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 98   : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
??$ELPlainCoord_GetRotatedPixelPosition@M@@YAXMMMMPAM0@Z ENDP ; ELPlainCoord_GetRotatedPixelPosition<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\eterBase\Utils.h
;	COMDAT ??$EL_DegreeToRadian@M@@YAMM@Z
_TEXT	SEGMENT
??$EL_DegreeToRadian@M@@YAMM@Z PROC			; EL_DegreeToRadian<float>, COMDAT
; _degree$ = xmm0s

; 88   : 	const T PI = T(3.141592);
; 89   : 	return T(PI*degree/180.0f);

  00000	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fd8
  00008	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43340000

; 90   : }

  00010	c3		 ret	 0
??$EL_DegreeToRadian@M@@YAMM@Z ENDP			; EL_DegreeToRadian<float>
_TEXT	ENDS
END
