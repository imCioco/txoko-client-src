; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35217.0 

	TITLE	d:\_m2work\txoko-m2-work\txoko-client-src\vs_files\userinterface\distribute\pythonplayerinputkeyboard.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0DI@KDGNBLAF@CPythonPlayer?3?3NEW_SetMultiKeyS@ ; `string'
;	COMDAT ??_C@_0DI@KDGNBLAF@CPythonPlayer?3?3NEW_SetMultiKeyS@
CONST	SEGMENT
??_C@_0DI@KDGNBLAF@CPythonPlayer?3?3NEW_SetMultiKeyS@ DB 'CPythonPlayer::'
	DB	'NEW_SetMultiKeyState - NEW_Move -> ERROR', 00H ; `string'
PUBLIC	?NEW_SetMultiDirKeyState@CPythonPlayer@@QAEX_N000@Z ; CPythonPlayer::NEW_SetMultiDirKeyState
PUBLIC	?NEW_SetSingleDirKeyState@CPythonPlayer@@QAEXH_N@Z ; CPythonPlayer::NEW_SetSingleDirKeyState
PUBLIC	?NEW_SetSingleDIKKeyState@CPythonPlayer@@QAEXH_N@Z ; CPythonPlayer::NEW_SetSingleDIKKeyState
PUBLIC	?SetAttackKeyState@CPythonPlayer@@QAEX_N@Z	; CPythonPlayer::SetAttackKeyState
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\PythonPlayerInputKeyboard.cpp
;	COMDAT ?SetAttackKeyState@CPythonPlayer@@QAEX_N@Z
_TEXT	SEGMENT
_isPress$ = 8						; size = 1
?SetAttackKeyState@CPythonPlayer@@QAEX_N@Z PROC		; CPythonPlayer::SetAttackKeyState, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 8    : 	if (isPress)

  00004	8a 5d 08	 mov	 bl, BYTE PTR _isPress$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	84 db		 test	 bl, bl
  0000c	74 28		 je	 SHORT $LN4@SetAttackK

; 9    : 	{
; 10   : 		CInstanceBase* pkInstMain = NEW_GetMainActorPtr();

  0000e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]

; 11   : 		if (pkInstMain)

  0001a	85 c0		 test	 eax, eax
  0001c	74 18		 je	 SHORT $LN4@SetAttackK

; 12   : 		if (pkInstMain->IsFishingMode())

  0001e	8b c8		 mov	 ecx, eax
  00020	e8 00 00 00 00	 call	 ?IsFishingMode@CInstanceBase@@QAEHXZ ; CInstanceBase::IsFishingMode
  00025	85 c0		 test	 eax, eax
  00027	74 0d		 je	 SHORT $LN4@SetAttackK

; 13   : 		{
; 14   : 			NEW_Fishing();

  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?NEW_Fishing@CPythonPlayer@@QAEXXZ ; CPythonPlayer::NEW_Fishing
  00030	5e		 pop	 esi

; 20   : }

  00031	5b		 pop	 ebx
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN4@SetAttackK:

; 15   : 			return;
; 16   : 		}
; 17   : 	}
; 18   : 
; 19   : 	m_isAtkKey=isPress;

  00036	88 5e 64	 mov	 BYTE PTR [esi+100], bl
  00039	5e		 pop	 esi

; 20   : }

  0003a	5b		 pop	 ebx
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?SetAttackKeyState@CPythonPlayer@@QAEX_N@Z ENDP		; CPythonPlayer::SetAttackKeyState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\PythonPlayerInputKeyboard.cpp
;	COMDAT ?NEW_SetSingleDIKKeyState@CPythonPlayer@@QAEXH_N@Z
_TEXT	SEGMENT
_eDIKKey$ = 8						; size = 4
_isPress$ = 12						; size = 1
?NEW_SetSingleDIKKeyState@CPythonPlayer@@QAEXH_N@Z PROC	; CPythonPlayer::NEW_SetSingleDIKKeyState, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 24   : 	if (NEW_CancelFishing())

  00006	e8 00 00 00 00	 call	 ?NEW_CancelFishing@CPythonPlayer@@QAE_NXZ ; CPythonPlayer::NEW_CancelFishing
  0000b	84 c0		 test	 al, al
  0000d	75 53		 jne	 SHORT $LN2@NEW_SetSin

; 25   : 		return;
; 26   : 
; 27   : 	switch (eDIKKey)

  0000f	8b 45 08	 mov	 eax, DWORD PTR _eDIKKey$[ebp]
  00012	05 38 ff ff ff	 add	 eax, -200		; ffffff38H
  00017	83 f8 08	 cmp	 eax, 8
  0001a	77 46		 ja	 SHORT $LN2@NEW_SetSin
  0001c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@NEW_SetSin[eax*4]
$LN5@NEW_SetSin:

; 28   : 	{
; 29   : 		case DIK_UP:
; 30   : 			NEW_SetSingleDirKeyState(DIR_UP, isPress);

  00023	ff 75 0c	 push	 DWORD PTR _isPress$[ebp]

; 40   : 			break;
; 41   : 	}
; 42   : }

  00026	8b ce		 mov	 ecx, esi
  00028	6a 00		 push	 0
  0002a	e8 00 00 00 00	 call	 ?NEW_SetSingleDirKeyState@CPythonPlayer@@QAEXH_N@Z ; CPythonPlayer::NEW_SetSingleDirKeyState
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN6@NEW_SetSin:

; 31   : 			break;
; 32   : 		case DIK_DOWN:
; 33   : 			NEW_SetSingleDirKeyState(DIR_DOWN, isPress);

  00034	ff 75 0c	 push	 DWORD PTR _isPress$[ebp]

; 40   : 			break;
; 41   : 	}
; 42   : }

  00037	8b ce		 mov	 ecx, esi
  00039	6a 01		 push	 1
  0003b	e8 00 00 00 00	 call	 ?NEW_SetSingleDirKeyState@CPythonPlayer@@QAEXH_N@Z ; CPythonPlayer::NEW_SetSingleDirKeyState
  00040	5e		 pop	 esi
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
$LN7@NEW_SetSin:

; 34   : 			break;
; 35   : 		case DIK_LEFT:
; 36   : 			NEW_SetSingleDirKeyState(DIR_LEFT, isPress);

  00045	ff 75 0c	 push	 DWORD PTR _isPress$[ebp]

; 40   : 			break;
; 41   : 	}
; 42   : }

  00048	8b ce		 mov	 ecx, esi
  0004a	6a 02		 push	 2
  0004c	e8 00 00 00 00	 call	 ?NEW_SetSingleDirKeyState@CPythonPlayer@@QAEXH_N@Z ; CPythonPlayer::NEW_SetSingleDirKeyState
  00051	5e		 pop	 esi
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN8@NEW_SetSin:

; 37   : 			break;
; 38   : 		case DIK_RIGHT:
; 39   : 			NEW_SetSingleDirKeyState(DIR_RIGHT, isPress);

  00056	ff 75 0c	 push	 DWORD PTR _isPress$[ebp]

; 40   : 			break;
; 41   : 	}
; 42   : }

  00059	8b ce		 mov	 ecx, esi
  0005b	6a 03		 push	 3
  0005d	e8 00 00 00 00	 call	 ?NEW_SetSingleDirKeyState@CPythonPlayer@@QAEXH_N@Z ; CPythonPlayer::NEW_SetSingleDirKeyState
$LN2@NEW_SetSin:
  00062	5e		 pop	 esi
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
  00067	90		 npad	 1
$LN10@NEW_SetSin:
  00068	00 00 00 00	 DD	 $LN5@NEW_SetSin
  0006c	00 00 00 00	 DD	 $LN2@NEW_SetSin
  00070	00 00 00 00	 DD	 $LN2@NEW_SetSin
  00074	00 00 00 00	 DD	 $LN7@NEW_SetSin
  00078	00 00 00 00	 DD	 $LN2@NEW_SetSin
  0007c	00 00 00 00	 DD	 $LN8@NEW_SetSin
  00080	00 00 00 00	 DD	 $LN2@NEW_SetSin
  00084	00 00 00 00	 DD	 $LN2@NEW_SetSin
  00088	00 00 00 00	 DD	 $LN6@NEW_SetSin
?NEW_SetSingleDIKKeyState@CPythonPlayer@@QAEXH_N@Z ENDP	; CPythonPlayer::NEW_SetSingleDIKKeyState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\PythonPlayerInputKeyboard.cpp
;	COMDAT ?NEW_SetSingleDirKeyState@CPythonPlayer@@QAEXH_N@Z
_TEXT	SEGMENT
_eDirKey$ = 8						; size = 4
_isPress$ = 12						; size = 1
?NEW_SetSingleDirKeyState@CPythonPlayer@@QAEXH_N@Z PROC	; CPythonPlayer::NEW_SetSingleDirKeyState, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 	switch (eDirKey)

  00003	8b 45 08	 mov	 eax, DWORD PTR _eDirKey$[ebp]
  00006	83 f8 03	 cmp	 eax, 3
  00009	77 25		 ja	 SHORT $LN2@NEW_SetSin
  0000b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@NEW_SetSin[eax*4]
$LN4@NEW_SetSin:

; 47   : 	{
; 48   : 		case DIR_UP:
; 49   : 			m_isUp=isPress;

  00012	8a 45 0c	 mov	 al, BYTE PTR _isPress$[ebp]
  00015	88 41 60	 mov	 BYTE PTR [ecx+96], al

; 50   : 			break;

  00018	eb 16		 jmp	 SHORT $LN2@NEW_SetSin
$LN5@NEW_SetSin:

; 51   : 		case DIR_DOWN:
; 52   : 			m_isDown=isPress;

  0001a	8a 45 0c	 mov	 al, BYTE PTR _isPress$[ebp]
  0001d	88 41 61	 mov	 BYTE PTR [ecx+97], al

; 53   : 			break;

  00020	eb 0e		 jmp	 SHORT $LN2@NEW_SetSin
$LN6@NEW_SetSin:

; 54   : 		case DIR_LEFT:
; 55   : 			m_isLeft=isPress;

  00022	8a 45 0c	 mov	 al, BYTE PTR _isPress$[ebp]
  00025	88 41 62	 mov	 BYTE PTR [ecx+98], al

; 56   : 			break;

  00028	eb 06		 jmp	 SHORT $LN2@NEW_SetSin
$LN7@NEW_SetSin:

; 57   : 		case DIR_RIGHT:
; 58   : 			m_isRight=isPress;

  0002a	8a 45 0c	 mov	 al, BYTE PTR _isPress$[ebp]
  0002d	88 41 63	 mov	 BYTE PTR [ecx+99], al
$LN2@NEW_SetSin:

; 59   : 			break;
; 60   : 	}
; 61   : 
; 62   : 	m_isDirKey=(m_isUp || m_isDown || m_isLeft || m_isRight);

  00030	8a 41 60	 mov	 al, BYTE PTR [ecx+96]
  00033	8a d0		 mov	 dl, al
  00035	84 c0		 test	 al, al
  00037	75 0f		 jne	 SHORT $LN9@NEW_SetSin
  00039	38 41 61	 cmp	 BYTE PTR [ecx+97], al
  0003c	75 0a		 jne	 SHORT $LN9@NEW_SetSin
  0003e	38 41 62	 cmp	 BYTE PTR [ecx+98], al
  00041	75 05		 jne	 SHORT $LN9@NEW_SetSin
  00043	38 41 63	 cmp	 BYTE PTR [ecx+99], al
  00046	74 02		 je	 SHORT $LN10@NEW_SetSin
$LN9@NEW_SetSin:
  00048	b0 01		 mov	 al, 1
$LN10@NEW_SetSin:
  0004a	88 41 65	 mov	 BYTE PTR [ecx+101], al

; 63   : 
; 64   : 	NEW_SetMultiDirKeyState(m_isLeft, m_isRight, m_isUp, m_isDown);

  0004d	0f b6 41 61	 movzx	 eax, BYTE PTR [ecx+97]
  00051	50		 push	 eax
  00052	0f b6 41 63	 movzx	 eax, BYTE PTR [ecx+99]
  00056	52		 push	 edx
  00057	50		 push	 eax
  00058	0f b6 41 62	 movzx	 eax, BYTE PTR [ecx+98]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?NEW_SetMultiDirKeyState@CPythonPlayer@@QAEX_N000@Z ; CPythonPlayer::NEW_SetMultiDirKeyState

; 65   : }

  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
  00066	66 90		 npad	 2
$LN11@NEW_SetSin:
  00068	00 00 00 00	 DD	 $LN4@NEW_SetSin
  0006c	00 00 00 00	 DD	 $LN5@NEW_SetSin
  00070	00 00 00 00	 DD	 $LN6@NEW_SetSin
  00074	00 00 00 00	 DD	 $LN7@NEW_SetSin
?NEW_SetSingleDirKeyState@CPythonPlayer@@QAEXH_N@Z ENDP	; CPythonPlayer::NEW_SetSingleDirKeyState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\txoko-m2-work\txoko-client-src\source\UserInterface\PythonPlayerInputKeyboard.cpp
;	COMDAT ?NEW_SetMultiDirKeyState@CPythonPlayer@@QAEX_N000@Z
_TEXT	SEGMENT
_isLeft$ = 8						; size = 1
_fDirRot$1 = 12						; size = 4
_isRight$ = 12						; size = 1
_isUp$ = 16						; size = 1
_isDown$ = 20						; size = 1
?NEW_SetMultiDirKeyState@CPythonPlayer@@QAEX_N000@Z PROC ; CPythonPlayer::NEW_SetMultiDirKeyState, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 69   : 	if (!__CanMove())

  00006	e8 00 00 00 00	 call	 ?__CanMove@CPythonPlayer@@IAE_NXZ ; CPythonPlayer::__CanMove
  0000b	84 c0		 test	 al, al
  0000d	74 5c		 je	 SHORT $LN4@NEW_SetMul

; 70   : 		return;	
; 71   : 
; 72   : 	bool isAny=(isLeft || isRight || isUp || isDown);

  0000f	80 7d 08 00	 cmp	 BYTE PTR _isLeft$[ebp], 0
  00013	8b 45 0c	 mov	 eax, DWORD PTR _isRight$[ebp]
  00016	8b 4d 10	 mov	 ecx, DWORD PTR _isUp$[ebp]
  00019	8b 55 14	 mov	 edx, DWORD PTR _isDown$[ebp]
  0001c	75 18		 jne	 SHORT $LN7@NEW_SetMul
  0001e	84 c0		 test	 al, al
  00020	75 14		 jne	 SHORT $LN7@NEW_SetMul
  00022	84 c9		 test	 cl, cl
  00024	75 10		 jne	 SHORT $LN7@NEW_SetMul
  00026	84 d2		 test	 dl, dl
  00028	75 0c		 jne	 SHORT $LN7@NEW_SetMul

; 82   : 			return;
; 83   : 		}
; 84   : 	}
; 85   : 	else
; 86   : 	{
; 87   : 		NEW_Stop();

  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?NEW_Stop@CPythonPlayer@@QAEXXZ ; CPythonPlayer::NEW_Stop
  00031	5e		 pop	 esi

; 88   : 	}
; 89   : }

  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
$LN7@NEW_SetMul:
  00036	57		 push	 edi

; 73   : 
; 74   : 	if (isAny)
; 75   : 	{
; 76   : 		float fDirRot=0.0f;
; 77   : 		NEW_GetMultiKeyDirRotation(isLeft, isRight, isUp, isDown, &fDirRot);

  00037	8d 7d 0c	 lea	 edi, DWORD PTR _fDirRot$1[ebp]
  0003a	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _fDirRot$1[ebp], 0
  00041	57		 push	 edi
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	ff 75 08	 push	 DWORD PTR _isLeft$[ebp]
  00048	e8 00 00 00 00	 call	 ?NEW_GetMultiKeyDirRotation@CPythonPlayer@@IAEX_N000PAM@Z ; CPythonPlayer::NEW_GetMultiKeyDirRotation

; 78   : 
; 79   : 		if (!NEW_MoveToDirection(fDirRot))

  0004d	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fDirRot$1[ebp]
  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 ?NEW_MoveToDirection@CPythonPlayer@@QAE_NM@Z ; CPythonPlayer::NEW_MoveToDirection
  00059	5f		 pop	 edi
  0005a	84 c0		 test	 al, al
  0005c	75 0d		 jne	 SHORT $LN4@NEW_SetMul

; 80   : 		{
; 81   : 			Tracen("CPythonPlayer::NEW_SetMultiKeyState - NEW_Move -> ERROR");

  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KDGNBLAF@CPythonPlayer?3?3NEW_SetMultiKeyS@
  00063	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00068	83 c4 04	 add	 esp, 4
$LN4@NEW_SetMul:
  0006b	5e		 pop	 esi

; 88   : 	}
; 89   : }

  0006c	5d		 pop	 ebp
  0006d	c2 10 00	 ret	 16			; 00000010H
?NEW_SetMultiDirKeyState@CPythonPlayer@@QAEX_N000@Z ENDP ; CPythonPlayer::NEW_SetMultiDirKeyState
_TEXT	ENDS
END
