; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35217.0 

	TITLE	d:\_m2work\server client tmp4\clientvs22\vs_files\userinterface\distribute\pythonsafebox.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EB@ILLOPJOM@CPythonSafeBox?3?3DelItemData?$CIdwS@ ; `string'
PUBLIC	??_C@_0EB@NFGEBKNF@CPythonSafeBox?3?3SetItemData?$CIdwS@ ; `string'
PUBLIC	??_C@_0EB@BNCIHACH@CPythonSafeBox?3?3GetItemData?$CIdwS@ ; `string'
PUBLIC	??_C@_0ED@OIOPNNLC@CPythonSafeBox?3?3GetSlotItemID?$CId@ ; `string'
PUBLIC	??_C@_0EF@MEFPDFOJ@CPythonSafeBox?3?3DelMallItemData@ ; `string'
PUBLIC	??_C@_0EF@BFNMLNFN@CPythonSafeBox?3?3SetMallItemData@ ; `string'
PUBLIC	??_C@_0BG@JANGHGIO@GetCurrentSafeboxSize@	; `string'
PUBLIC	??_C@_0EH@BNEMANLE@CPythonSafeBox?3?3GetMallSlotItem@ ; `string'
PUBLIC	??_C@_0O@BCKKGAPN@GetMallItemID@		; `string'
PUBLIC	??_C@_09GMBNEEAB@GetItemID@			; `string'
PUBLIC	??_C@_0BH@EIOFOGDJ@GetMallItemMetinSocket@	; `string'
PUBLIC	??_C@_0BB@KMJDPGMF@GetMallItemCount@		; `string'
PUBLIC	??_C@_0M@GGDNKKEE@GetMallSize@			; `string'
PUBLIC	??_C@_0BF@HIELOHFB@GetMallItemAttribute@	; `string'
PUBLIC	??_C@_0BF@DMABFMEE@SAFEBOX_SLOT_X_COUNT@	; `string'
PUBLIC	??_C@_07CPPOKFKF@safebox@			; `string'
PUBLIC	??_C@_0BC@JOOAEPKL@SAFEBOX_PAGE_SIZE@		; `string'
PUBLIC	??_C@_0BF@PAKLFMNK@SAFEBOX_SLOT_Y_COUNT@	; `string'
PUBLIC	??_R2CPythonSafeBox@@8				; CPythonSafeBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPythonSafeBox@@8			; CPythonSafeBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2?$CSingleton@VCPythonSafeBox@@@@8		; CSingleton<CPythonSafeBox>::`RTTI Base Class Array'
PUBLIC	??_R3?$CSingleton@VCPythonSafeBox@@@@8		; CSingleton<CPythonSafeBox>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonSafeBox@@@@8	; CSingleton<CPythonSafeBox>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3CPythonSafeBox@@8				; CPythonSafeBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$CSingleton@VCPythonSafeBox@@@@@8	; CSingleton<CPythonSafeBox> `RTTI Type Descriptor'
PUBLIC	??_R4?$CSingleton@VCPythonSafeBox@@@@6B@	; CSingleton<CPythonSafeBox>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPythonSafeBox@@@8			; CPythonSafeBox `RTTI Type Descriptor'
PUBLIC	??_R4CPythonSafeBox@@6B@			; CPythonSafeBox::`RTTI Complete Object Locator'
PUBLIC	??_7?$CSingleton@VCPythonSafeBox@@@@6B@		; CSingleton<CPythonSafeBox>::`vftable'
PUBLIC	??_7CPythonSafeBox@@6B@				; CPythonSafeBox::`vftable'
;	COMDAT ??_7CPythonSafeBox@@6B@
CONST	SEGMENT
??_7CPythonSafeBox@@6B@ DD FLAT:??_R4CPythonSafeBox@@6B@ ; CPythonSafeBox::`vftable'
	DD	FLAT:??_ECPythonSafeBox@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?s_methods@?1??initsafebox@@YAXXZ@4PAUPyMethodDef@@A
_DATA	SEGMENT
?s_methods@?1??initsafebox@@YAXXZ@4PAUPyMethodDef@@A DD FLAT:??_C@_0BG@JANGHGIO@GetCurrentSafeboxSize@ ; `initsafebox'::`2'::s_methods
	DD	FLAT:?safeboxGetCurrentSafeboxSize@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_09GMBNEEAB@GetItemID@
	DD	FLAT:?safeboxGetItemID@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0N@LEKALLIG@GetItemCount@
	DD	FLAT:?safeboxGetItemCount@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0N@DMCGDNGF@GetItemFlags@
	DD	FLAT:?safeboxGetItemFlags@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BD@JBOBKHIE@GetItemMetinSocket@
	DD	FLAT:?safeboxGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@GOKPPDHH@GetItemAttribute@
	DD	FLAT:?safeboxGetItemAttribute@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_08OAJFGNBC@GetMoney@
	DD	FLAT:?safeboxGetMoney@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0O@BCKKGAPN@GetMallItemID@
	DD	FLAT:?safeboxGetMallItemID@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@KMJDPGMF@GetMallItemCount@
	DD	FLAT:?safeboxGetMallItemCount@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BH@EIOFOGDJ@GetMallItemMetinSocket@
	DD	FLAT:?safeboxGetMallItemMetinSocket@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BF@HIELOHFB@GetMallItemAttribute@
	DD	FLAT:?safeboxGetMallItemAttribute@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0M@GGDNKKEE@GetMallSize@
	DD	FLAT:?safeboxGetMallSize@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
_DATA	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonSafeBox@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonSafeBox@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonSafeBox@@@@6B@ ; CSingleton<CPythonSafeBox>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4CPythonSafeBox@@6B@
rdata$r	SEGMENT
??_R4CPythonSafeBox@@6B@ DD 00H				; CPythonSafeBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonSafeBox@@@8
	DD	FLAT:??_R3CPythonSafeBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonSafeBox@@@8
data$rs	SEGMENT
??_R0?AVCPythonSafeBox@@@8 DD FLAT:??_7type_info@@6B@	; CPythonSafeBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonSafeBox@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonSafeBox@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonSafeBox@@@@6B@ DD 00H		; CSingleton<CPythonSafeBox>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonSafeBox@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonSafeBox@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCPythonSafeBox@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonSafeBox> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonSafeBox@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CPythonSafeBox@@8
rdata$r	SEGMENT
??_R3CPythonSafeBox@@8 DD 00H				; CPythonSafeBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPythonSafeBox@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonSafeBox@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonSafeBox@@@@@8 ; CSingleton<CPythonSafeBox>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonSafeBox@@@@8 DD 00H		; CSingleton<CPythonSafeBox>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonSafeBox@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonSafeBox@@@@8 ; CSingleton<CPythonSafeBox>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonSafeBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonSafeBox@@8 DD FLAT:??_R0?AVCPythonSafeBox@@@8 ; CPythonSafeBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonSafeBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CPythonSafeBox@@8
rdata$r	SEGMENT
??_R2CPythonSafeBox@@8 DD FLAT:??_R1A@?0A@EA@CPythonSafeBox@@8 ; CPythonSafeBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BF@PAKLFMNK@SAFEBOX_SLOT_Y_COUNT@
CONST	SEGMENT
??_C@_0BF@PAKLFMNK@SAFEBOX_SLOT_Y_COUNT@ DB 'SAFEBOX_SLOT_Y_COUNT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JOOAEPKL@SAFEBOX_PAGE_SIZE@
CONST	SEGMENT
??_C@_0BC@JOOAEPKL@SAFEBOX_PAGE_SIZE@ DB 'SAFEBOX_PAGE_SIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPPOKFKF@safebox@
CONST	SEGMENT
??_C@_07CPPOKFKF@safebox@ DB 'safebox', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DMABFMEE@SAFEBOX_SLOT_X_COUNT@
CONST	SEGMENT
??_C@_0BF@DMABFMEE@SAFEBOX_SLOT_X_COUNT@ DB 'SAFEBOX_SLOT_X_COUNT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HIELOHFB@GetMallItemAttribute@
CONST	SEGMENT
??_C@_0BF@HIELOHFB@GetMallItemAttribute@ DB 'GetMallItemAttribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GGDNKKEE@GetMallSize@
CONST	SEGMENT
??_C@_0M@GGDNKKEE@GetMallSize@ DB 'GetMallSize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KMJDPGMF@GetMallItemCount@
CONST	SEGMENT
??_C@_0BB@KMJDPGMF@GetMallItemCount@ DB 'GetMallItemCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EIOFOGDJ@GetMallItemMetinSocket@
CONST	SEGMENT
??_C@_0BH@EIOFOGDJ@GetMallItemMetinSocket@ DB 'GetMallItemMetinSocket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GMBNEEAB@GetItemID@
CONST	SEGMENT
??_C@_09GMBNEEAB@GetItemID@ DB 'GetItemID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BCKKGAPN@GetMallItemID@
CONST	SEGMENT
??_C@_0O@BCKKGAPN@GetMallItemID@ DB 'GetMallItemID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@BNEMANLE@CPythonSafeBox?3?3GetMallSlotItem@
CONST	SEGMENT
??_C@_0EH@BNEMANLE@CPythonSafeBox?3?3GetMallSlotItem@ DB 'CPythonSafeBox:'
	DB	':GetMallSlotItemID(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JANGHGIO@GetCurrentSafeboxSize@
CONST	SEGMENT
??_C@_0BG@JANGHGIO@GetCurrentSafeboxSize@ DB 'GetCurrentSafeboxSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@BFNMLNFN@CPythonSafeBox?3?3SetMallItemData@
CONST	SEGMENT
??_C@_0EF@BFNMLNFN@CPythonSafeBox?3?3SetMallItemData@ DB 'CPythonSafeBox:'
	DB	':SetMallItemData(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@MEFPDFOJ@CPythonSafeBox?3?3DelMallItemData@
CONST	SEGMENT
??_C@_0EF@MEFPDFOJ@CPythonSafeBox?3?3DelMallItemData@ DB 'CPythonSafeBox:'
	DB	':DelMallItemData(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@OIOPNNLC@CPythonSafeBox?3?3GetSlotItemID?$CId@
CONST	SEGMENT
??_C@_0ED@OIOPNNLC@CPythonSafeBox?3?3GetSlotItemID?$CId@ DB 'CPythonSafeB'
	DB	'ox::GetSlotItemID(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@BNCIHACH@CPythonSafeBox?3?3GetItemData?$CIdwS@
CONST	SEGMENT
??_C@_0EB@BNCIHACH@CPythonSafeBox?3?3GetItemData?$CIdwS@ DB 'CPythonSafeB'
	DB	'ox::GetItemData(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@NFGEBKNF@CPythonSafeBox?3?3SetItemData?$CIdwS@
CONST	SEGMENT
??_C@_0EB@NFGEBKNF@CPythonSafeBox?3?3SetItemData?$CIdwS@ DB 'CPythonSafeB'
	DB	'ox::SetItemData(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@ILLOPJOM@CPythonSafeBox?3?3DelItemData?$CIdwS@
CONST	SEGMENT
??_C@_0EB@ILLOPJOM@CPythonSafeBox?3?3DelItemData?$CIdwS@ DB 'CPythonSafeB'
	DB	'ox::DelItemData(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
PUBLIC	??$construct_at@Upacket_item@@U1@@std@@YAPAUpacket_item@@QAU1@$$QAU1@@Z ; std::construct_at<packet_item,packet_item>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QBEABV?$allocator@Upacket_item@@@2@XZ ; std::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1>::_Get_first
PUBLIC	??$_Get_size_of_n@$0CO@@std@@YAII@Z		; std::_Get_size_of_n<46>
PUBLIC	??$construct_at@Upacket_item@@$$V@std@@YAPAUpacket_item@@QAU1@@Z ; std::construct_at<packet_item>
PUBLIC	??$construct@Upacket_item@@U1@@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@QAUpacket_item@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<packet_item> >::construct<packet_item,packet_item>
PUBLIC	??$forward@Upacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z ; std::forward<packet_item>
PUBLIC	??$_Copy_memmove_tail@PAUpacket_item@@@std@@YAPAUpacket_item@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<packet_item *>
PUBLIC	??$move@AAPAUpacket_item@@@std@@YA$$QAPAUpacket_item@@AAPAU1@@Z ; std::move<packet_item * &>
PUBLIC	??$to_address@Upacket_item@@@std@@YAPAUpacket_item@@QAU1@@Z ; std::to_address<packet_item>
PUBLIC	?allocate@?$allocator@Upacket_item@@@std@@QAEPAUpacket_item@@I@Z ; std::allocator<packet_item>::allocate
PUBLIC	?capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ; std::vector<packet_item,std::allocator<packet_item> >::capacity
PUBLIC	?_Getal@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEABV?$allocator@Upacket_item@@@2@XZ ; std::vector<packet_item,std::allocator<packet_item> >::_Getal
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAIABV?$allocator@Upacket_item@@@2@@Z ; std::_Default_allocator_traits<std::allocator<packet_item> >::max_size
PUBLIC	??$construct@Upacket_item@@$$V@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@QAUpacket_item@@@Z ; std::_Default_allocator_traits<std::allocator<packet_item> >::construct<packet_item>
PUBLIC	??$_Emplace_back@Upacket_item@@@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEX$$QAUpacket_item@@@Z ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Emplace_back<packet_item>
PUBLIC	??$_To_address@PAUpacket_item@@@std@@YA?A_PABQAUpacket_item@@@Z ; std::_To_address<packet_item *>
PUBLIC	??$_Copy_memmove@PAUpacket_item@@PAU1@@std@@YAPAUpacket_item@@PAU1@00@Z ; std::_Copy_memmove<packet_item *,packet_item *>
PUBLIC	??$_Unfancy@Upacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z ; std::_Unfancy<packet_item>
PUBLIC	??$move@AAUpacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z ; std::move<packet_item &>
PUBLIC	?max_size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ; std::vector<packet_item,std::allocator<packet_item> >::max_size
PUBLIC	?_Calculate_growth@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEII@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXQAUpacket_item@@II@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Change_array
PUBLIC	?_Xlength@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@CAXXZ ; std::vector<packet_item,std::allocator<packet_item> >::_Xlength
PUBLIC	??1_Reallocation_guard@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ; std::vector<packet_item,std::allocator<packet_item> >::_Reallocation_guard::~_Reallocation_guard
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAE@PAUpacket_item@@AAV?$allocator@Upacket_item@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Uninitialized_backout_al<std::allocator<packet_item> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::~_Uninitialized_backout_al<std::allocator<packet_item> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEPAUpacket_item@@XZ ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Emplace_back<>
PUBLIC	??$_Uninitialized_move@PAUpacket_item@@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@QAU1@0PAU1@AAV?$allocator@Upacket_item@@@0@@Z ; std::_Uninitialized_move<packet_item *,std::allocator<packet_item> >
PUBLIC	??$_Get_unwrapped@ABQAUpacket_item@@@std@@YA?A_TABQAUpacket_item@@@Z ; std::_Get_unwrapped<packet_item * const &>
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@AAV?$allocator@Upacket_item@@@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<packet_item> >
PUBLIC	??0?$allocator@Upacket_item@@@std@@QAE@XZ	; std::allocator<packet_item>::allocator<packet_item>
PUBLIC	?deallocate@?$allocator@Upacket_item@@@std@@QAEXQAUpacket_item@@I@Z ; std::allocator<packet_item>::deallocate
PUBLIC	?_Orphan_range@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEXPAUpacket_item@@0@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Orphan_range
PUBLIC	??0?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<packet_item> >::_Vector_val<std::_Simple_types<packet_item> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QAEAAV?$allocator@Upacket_item@@@2@XZ ; std::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1>::_Get_first
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@PAU1@IAAV?$allocator@Upacket_item@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<packet_item> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	?_Tidy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXXZ ; std::vector<packet_item,std::allocator<packet_item> >::_Tidy
PUBLIC	?_Getal@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEAAV?$allocator@Upacket_item@@@2@XZ ; std::vector<packet_item,std::allocator<packet_item> >::_Getal
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1>::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1><>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Destroy_range@V?$allocator@Upacket_item@@@std@@@std@@YAXPAUpacket_item@@QAU1@AAV?$allocator@Upacket_item@@@0@@Z ; std::_Destroy_range<std::allocator<packet_item> >
PUBLIC	??_G?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z	; CSingleton<CPythonSafeBox>::`scalar deleting destructor'
PUBLIC	??0?$CSingleton@VCPythonSafeBox@@@@QAE@XZ	; CSingleton<CPythonSafeBox>::CSingleton<CPythonSafeBox>
PUBLIC	??1?$CSingleton@VCPythonSafeBox@@@@UAE@XZ	; CSingleton<CPythonSafeBox>::~CSingleton<CPythonSafeBox>
PUBLIC	??0?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ; std::vector<packet_item,std::allocator<packet_item> >::vector<packet_item,std::allocator<packet_item> >
PUBLIC	??1?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ; std::vector<packet_item,std::allocator<packet_item> >::~vector<packet_item,std::allocator<packet_item> >
PUBLIC	?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::resize
PUBLIC	?clear@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ ; std::vector<packet_item,std::allocator<packet_item> >::clear
PUBLIC	?size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ; std::vector<packet_item,std::allocator<packet_item> >::size
PUBLIC	??A?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEAAUpacket_item@@I@Z ; std::vector<packet_item,std::allocator<packet_item> >::operator[]
PUBLIC	?initsafebox@@YAXXZ				; initsafebox
PUBLIC	?safeboxGetMallSize@@YAPAU_object@@PAU1@0@Z	; safeboxGetMallSize
PUBLIC	?safeboxGetMallItemAttribute@@YAPAU_object@@PAU1@0@Z ; safeboxGetMallItemAttribute
PUBLIC	?safeboxGetMallItemMetinSocket@@YAPAU_object@@PAU1@0@Z ; safeboxGetMallItemMetinSocket
PUBLIC	?safeboxGetMallItemCount@@YAPAU_object@@PAU1@0@Z ; safeboxGetMallItemCount
PUBLIC	?safeboxGetMallItemID@@YAPAU_object@@PAU1@0@Z	; safeboxGetMallItemID
PUBLIC	?safeboxGetMoney@@YAPAU_object@@PAU1@0@Z	; safeboxGetMoney
PUBLIC	?safeboxGetItemAttribute@@YAPAU_object@@PAU1@0@Z ; safeboxGetItemAttribute
PUBLIC	?safeboxGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z ; safeboxGetItemMetinSocket
PUBLIC	?safeboxGetItemFlags@@YAPAU_object@@PAU1@0@Z	; safeboxGetItemFlags
PUBLIC	?safeboxGetItemCount@@YAPAU_object@@PAU1@0@Z	; safeboxGetItemCount
PUBLIC	?safeboxGetItemID@@YAPAU_object@@PAU1@0@Z	; safeboxGetItemID
PUBLIC	?safeboxGetCurrentSafeboxSize@@YAPAU_object@@PAU1@0@Z ; safeboxGetCurrentSafeboxSize
PUBLIC	??_GCPythonSafeBox@@UAEPAXI@Z			; CPythonSafeBox::`scalar deleting destructor'
PUBLIC	?GetMallSize@CPythonSafeBox@@QAEKXZ		; CPythonSafeBox::GetMallSize
PUBLIC	?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetMallItemDataPtr
PUBLIC	?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
PUBLIC	?GetCurrentSafeBoxSize@CPythonSafeBox@@QAEHXZ	; CPythonSafeBox::GetCurrentSafeBoxSize
PUBLIC	?GetMoney@CPythonSafeBox@@QAEKXZ		; CPythonSafeBox::GetMoney
PUBLIC	?SetItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z ; CPythonSafeBox::SetItemData
PUBLIC	?DelItemData@CPythonSafeBox@@QAEXK@Z		; CPythonSafeBox::DelItemData
PUBLIC	?OpenSafeBox@CPythonSafeBox@@QAEXH@Z		; CPythonSafeBox::OpenSafeBox
PUBLIC	?SetMoney@CPythonSafeBox@@QAEXK@Z		; CPythonSafeBox::SetMoney
PUBLIC	?OpenMall@CPythonSafeBox@@QAEXH@Z		; CPythonSafeBox::OpenMall
PUBLIC	?SetMallItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z ; CPythonSafeBox::SetMallItemData
PUBLIC	?DelMallItemData@CPythonSafeBox@@QAEXK@Z	; CPythonSafeBox::DelMallItemData
PUBLIC	?GetSlotItemID@CPythonSafeBox@@QAEHKPAK@Z	; CPythonSafeBox::GetSlotItemID
PUBLIC	?GetSlotMallItemID@CPythonSafeBox@@QAEHKPAK@Z	; CPythonSafeBox::GetSlotMallItemID
PUBLIC	??0CPythonSafeBox@@QAE@XZ			; CPythonSafeBox::CPythonSafeBox
PUBLIC	??1CPythonSafeBox@@UAE@XZ			; CPythonSafeBox::~CPythonSafeBox
EXTRN	??_ECPythonSafeBox@@UAEPAXI@Z:PROC		; CPythonSafeBox::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z:PROC ; CSingleton<CPythonSafeBox>::`vector deleting destructor'
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ??1CPythonSafeBox@@UAE@XZ
_TEXT	SEGMENT
??1CPythonSafeBox@@UAE@XZ PROC				; CPythonSafeBox::~CPythonSafeBox, COMDAT
; _this$ = ecx

; 153  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 154  : }

  00003	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPythonSafeBox@@6B@
  0000c	e8 00 00 00 00	 call	 ??1?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ; std::vector<packet_item,std::allocator<packet_item> >::~vector<packet_item,std::allocator<packet_item> >
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	e8 00 00 00 00	 call	 ??1?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ; std::vector<packet_item,std::allocator<packet_item> >::~vector<packet_item,std::allocator<packet_item> >
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h

; 19   : 	{ 

  00019	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonSafeBox@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  0001f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A, 0 ; CSingleton<CPythonSafeBox>::ms_singleton
  00029	5e		 pop	 esi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 154  : }

  0002a	c3		 ret	 0
??1CPythonSafeBox@@UAE@XZ ENDP				; CPythonSafeBox::~CPythonSafeBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ??0CPythonSafeBox@@QAE@XZ
_TEXT	SEGMENT
??0CPythonSafeBox@@QAE@XZ PROC				; CPythonSafeBox::CPythonSafeBox, COMDAT
; _this$ = ecx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00000	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A, ecx ; CSingleton<CPythonSafeBox>::ms_singleton
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 150  : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CPythonSafeBox@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000e	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00015	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001c	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00023	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0002a	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00031	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 149  : 	m_dwMoney = 0;

  00038	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 150  : }

  0003f	c3		 ret	 0
??0CPythonSafeBox@@QAE@XZ ENDP				; CPythonSafeBox::CPythonSafeBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?GetSlotMallItemID@CPythonSafeBox@@QAEHKPAK@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_pdwItemID$ = 12					; size = 4
?GetSlotMallItemID@CPythonSafeBox@@QAEHKPAK@Z PROC	; CPythonSafeBox::GetSlotMallItemID, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00006	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00009	2b c2		 sub	 eax, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 131  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000e	d1 f8		 sar	 eax, 1
  00010	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 131  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  00016	3b c8		 cmp	 ecx, eax
  00018	72 14		 jb	 SHORT $LN2@GetSlotMal

; 132  : 	{
; 133  : 		TraceError("CPythonSafeBox::GetMallSlotItemID(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  0001a	51		 push	 ecx
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@BNEMANLE@CPythonSafeBox?3?3GetMallSlotItem@
  00020	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00025	83 c4 08	 add	 esp, 8

; 134  : 		return FALSE;

  00028	33 c0		 xor	 eax, eax

; 140  : }

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN2@GetSlotMal:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  0002e	6b c1 2e	 imul	 eax, ecx, 46
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 137  : 	*pdwItemID = m_MallItemInstanceVector[dwSlotIndex].vnum;

  00031	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00034	8b 45 0c	 mov	 eax, DWORD PTR _pdwItemID$[ebp]
  00037	89 08		 mov	 DWORD PTR [eax], ecx

; 138  : 
; 139  : 	return TRUE;

  00039	b8 01 00 00 00	 mov	 eax, 1

; 140  : }

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?GetSlotMallItemID@CPythonSafeBox@@QAEHKPAK@Z ENDP	; CPythonSafeBox::GetSlotMallItemID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?GetSlotItemID@CPythonSafeBox@@QAEHKPAK@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_pdwItemID$ = 12					; size = 4
?GetSlotItemID@CPythonSafeBox@@QAEHKPAK@Z PROC		; CPythonSafeBox::GetSlotItemID, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	2b c2		 sub	 eax, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 57   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000e	d1 f8		 sar	 eax, 1
  00010	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 57   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  00016	3b c8		 cmp	 ecx, eax
  00018	72 14		 jb	 SHORT $LN2@GetSlotIte

; 58   : 	{
; 59   : 		TraceError("CPythonSafeBox::GetSlotItemID(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  0001a	51		 push	 ecx
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OIOPNNLC@CPythonSafeBox?3?3GetSlotItemID?$CId@
  00020	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00025	83 c4 08	 add	 esp, 8

; 60   : 		return FALSE;

  00028	33 c0		 xor	 eax, eax

; 66   : }

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN2@GetSlotIte:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  0002e	6b c1 2e	 imul	 eax, ecx, 46
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 63   : 	*pdwItemID=m_ItemInstanceVector[dwSlotIndex].vnum;

  00031	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00034	8b 45 0c	 mov	 eax, DWORD PTR _pdwItemID$[ebp]
  00037	89 08		 mov	 DWORD PTR [eax], ecx

; 64   : 
; 65   : 	return TRUE;

  00039	b8 01 00 00 00	 mov	 eax, 1

; 66   : }

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?GetSlotItemID@CPythonSafeBox@@QAEHKPAK@Z ENDP		; CPythonSafeBox::GetSlotItemID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?DelMallItemData@CPythonSafeBox@@QAEXK@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
?DelMallItemData@CPythonSafeBox@@QAEXK@Z PROC		; CPythonSafeBox::DelMallItemData, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00006	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00009	2b c2		 sub	 eax, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 106  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000e	d1 f8		 sar	 eax, 1
  00010	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 106  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  00016	3b c8		 cmp	 ecx, eax
  00018	72 12		 jb	 SHORT $LN2@DelMallIte

; 107  : 	{
; 108  : 		TraceError("CPythonSafeBox::DelMallItemData(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  0001a	51		 push	 ecx
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@MEFPDFOJ@CPythonSafeBox?3?3DelMallItemData@
  00020	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00025	83 c4 08	 add	 esp, 8

; 114  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN2@DelMallIte:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  0002c	6b c1 2e	 imul	 eax, ecx, 46
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 113  : 	ZeroMemory(&rInstance, sizeof(rInstance));

  0002f	6a 2e		 push	 46			; 0000002eH
  00031	6a 00		 push	 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  00033	03 c2		 add	 eax, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 113  : 	ZeroMemory(&rInstance, sizeof(rInstance));

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 114  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?DelMallItemData@CPythonSafeBox@@QAEXK@Z ENDP		; CPythonSafeBox::DelMallItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?SetMallItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_rItemData$ = 12					; size = 4
?SetMallItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z PROC ; CPythonSafeBox::SetMallItemData, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 94   : {

  00006	56		 push	 esi

; 95   : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  00007	8b 75 08	 mov	 esi, DWORD PTR _dwSlotIndex$[ebp]
  0000a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]
  0000e	2b c7		 sub	 eax, edi
  00010	d1 f8		 sar	 eax, 1
  00012	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 95   : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  00018	3b f0		 cmp	 esi, eax
  0001a	72 14		 jb	 SHORT $LN2@SetMallIte

; 96   : 	{
; 97   : 		TraceError("CPythonSafeBox::SetMallItemData(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  0001c	56		 push	 esi
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@BFNMLNFN@CPythonSafeBox?3?3SetMallItemData@
  00022	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00027	83 c4 08	 add	 esp, 8
  0002a	5f		 pop	 edi

; 102  : }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN2@SetMallIte:

; 98   : 		return;
; 99   : 	}
; 100  : 
; 101  : 	m_MallItemInstanceVector[dwSlotIndex] = rItemData;

  00030	8b 45 0c	 mov	 eax, DWORD PTR _rItemData$[ebp]
  00033	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00036	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00039	0f 10 48 10	 movups	 xmm1, XMMWORD PTR [eax+16]
  0003d	66 8b 50 2c	 mov	 dx, WORD PTR [eax+44]
  00041	f3 0f 7e 50 20	 movq	 xmm2, QWORD PTR [eax+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  00046	6b c6 2e	 imul	 eax, esi, 46
  00049	03 c7		 add	 eax, edi
  0004b	5f		 pop	 edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 102  : }

  0004c	5e		 pop	 esi
  0004d	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00050	0f 11 48 10	 movups	 XMMWORD PTR [eax+16], xmm1
  00054	66 0f d6 50 20	 movq	 QWORD PTR [eax+32], xmm2
  00059	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  0005c	66 89 50 2c	 mov	 WORD PTR [eax+44], dx
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
?SetMallItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z ENDP ; CPythonSafeBox::SetMallItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?OpenMall@CPythonSafeBox@@QAEXH@Z
_TEXT	SEGMENT
_iSize$ = 8						; size = 4
?OpenMall@CPythonSafeBox@@QAEXH@Z PROC			; CPythonSafeBox::OpenMall, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 82   : {

  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 83   : 	m_MallItemInstanceVector.clear();

  0000b	8d 71 10	 lea	 esi, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0000e	74 03		 je	 SHORT $LN6@OpenMall

; 1813 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1814 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1815 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1816 :             return;
; 1817 :         }
; 1818 : 
; 1819 :         _My_data._Orphan_all();
; 1820 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1821 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1822 :         _Mylast = _Myfirst;

  00010	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN6@OpenMall:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 84   : 	m_MallItemInstanceVector.resize(SAFEBOX_SLOT_X_COUNT * iSize);

  00013	8b 45 08	 mov	 eax, DWORD PTR _iSize$[ebp]
  00016	8b ce		 mov	 ecx, esi
  00018	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::resize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 86   : 	for (DWORD i = 0; i < m_MallItemInstanceVector.size(); ++i)

  00024	33 db		 xor	 ebx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00026	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00028	2b c1		 sub	 eax, ecx
  0002a	d1 f8		 sar	 eax, 1
  0002c	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 86   : 	for (DWORD i = 0; i < m_MallItemInstanceVector.size(); ++i)

  00032	85 c0		 test	 eax, eax
  00034	74 32		 je	 SHORT $LN3@OpenMall
  00036	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1914 :         auto& _My_data = _Mypair._Myval2;

  00037	33 ff		 xor	 edi, edi
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@OpenMall:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 89   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  00040	6a 2e		 push	 46			; 0000002eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  00042	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 89   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  00045	6a 00		 push	 0
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 86   : 	for (DWORD i = 0; i < m_MallItemInstanceVector.size(); ++i)

  00050	8d 7f 2e	 lea	 edi, DWORD PTR [edi+46]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00053	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 86   : 	for (DWORD i = 0; i < m_MallItemInstanceVector.size(); ++i)

  00055	43		 inc	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00056	2b c1		 sub	 eax, ecx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 89   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0005b	d1 f8		 sar	 eax, 1
  0005d	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 86   : 	for (DWORD i = 0; i < m_MallItemInstanceVector.size(); ++i)

  00063	3b d8		 cmp	 ebx, eax
  00065	72 d9		 jb	 SHORT $LL4@OpenMall
  00067	5f		 pop	 edi
$LN3@OpenMall:
  00068	5e		 pop	 esi

; 90   : 	}
; 91   : }

  00069	5b		 pop	 ebx
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?OpenMall@CPythonSafeBox@@QAEXH@Z ENDP			; CPythonSafeBox::OpenMall
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?SetMoney@CPythonSafeBox@@QAEXK@Z
_TEXT	SEGMENT
_dwMoney$ = 8						; size = 4
?SetMoney@CPythonSafeBox@@QAEXK@Z PROC			; CPythonSafeBox::SetMoney, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 	m_dwMoney = dwMoney;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwMoney$[ebp]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 43   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetMoney@CPythonSafeBox@@QAEXK@Z ENDP			; CPythonSafeBox::SetMoney
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?OpenSafeBox@CPythonSafeBox@@QAEXH@Z
_TEXT	SEGMENT
_iSize$ = 8						; size = 4
?OpenSafeBox@CPythonSafeBox@@QAEXH@Z PROC		; CPythonSafeBox::OpenSafeBox, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 6    : 	m_dwMoney = 0;
; 7    : 	m_ItemInstanceVector.clear();

  00005	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00008	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00014	74 03		 je	 SHORT $LN6@OpenSafeBo

; 1813 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1814 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1815 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1816 :             return;
; 1817 :         }
; 1818 : 
; 1819 :         _My_data._Orphan_all();
; 1820 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1821 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1822 :         _Mylast = _Myfirst;

  00016	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN6@OpenSafeBo:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 8    : 	m_ItemInstanceVector.resize(SAFEBOX_SLOT_X_COUNT * iSize);

  00019	8b 45 08	 mov	 eax, DWORD PTR _iSize$[ebp]
  0001c	8b ce		 mov	 ecx, esi
  0001e	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::resize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 10   : 	for (DWORD i = 0; i < m_ItemInstanceVector.size(); ++i)

  0002a	33 db		 xor	 ebx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0002c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002e	2b c1		 sub	 eax, ecx
  00030	d1 f8		 sar	 eax, 1
  00032	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 10   : 	for (DWORD i = 0; i < m_ItemInstanceVector.size(); ++i)

  00038	85 c0		 test	 eax, eax
  0003a	74 2c		 je	 SHORT $LN3@OpenSafeBo
  0003c	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1914 :         auto& _My_data = _Mypair._Myval2;

  0003d	33 ff		 xor	 edi, edi
  0003f	90		 npad	 1
$LL4@OpenSafeBo:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 13   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  00040	6a 2e		 push	 46			; 0000002eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  00042	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 13   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  00045	6a 00		 push	 0
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 10   : 	for (DWORD i = 0; i < m_ItemInstanceVector.size(); ++i)

  00050	8d 7f 2e	 lea	 edi, DWORD PTR [edi+46]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00053	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 10   : 	for (DWORD i = 0; i < m_ItemInstanceVector.size(); ++i)

  00055	43		 inc	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00056	2b c1		 sub	 eax, ecx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 13   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0005b	d1 f8		 sar	 eax, 1
  0005d	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 10   : 	for (DWORD i = 0; i < m_ItemInstanceVector.size(); ++i)

  00063	3b d8		 cmp	 ebx, eax
  00065	72 d9		 jb	 SHORT $LL4@OpenSafeBo
  00067	5f		 pop	 edi
$LN3@OpenSafeBo:
  00068	5e		 pop	 esi

; 14   : 	}
; 15   : }

  00069	5b		 pop	 ebx
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?OpenSafeBox@CPythonSafeBox@@QAEXH@Z ENDP		; CPythonSafeBox::OpenSafeBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?DelItemData@CPythonSafeBox@@QAEXK@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
?DelItemData@CPythonSafeBox@@QAEXK@Z PROC		; CPythonSafeBox::DelItemData, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	2b c2		 sub	 eax, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 30   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000e	d1 f8		 sar	 eax, 1
  00010	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 30   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  00016	3b c8		 cmp	 ecx, eax
  00018	72 12		 jb	 SHORT $LN2@DelItemDat

; 31   : 	{
; 32   : 		TraceError("CPythonSafeBox::DelItemData(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  0001a	51		 push	 ecx
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@ILLOPJOM@CPythonSafeBox?3?3DelItemData?$CIdwS@
  00020	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00025	83 c4 08	 add	 esp, 8

; 38   : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN2@DelItemDat:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  0002c	6b c1 2e	 imul	 eax, ecx, 46
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 37   : 	ZeroMemory(&rInstance, sizeof(rInstance));

  0002f	6a 2e		 push	 46			; 0000002eH
  00031	6a 00		 push	 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  00033	03 c2		 add	 eax, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 37   : 	ZeroMemory(&rInstance, sizeof(rInstance));

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 38   : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?DelItemData@CPythonSafeBox@@QAEXK@Z ENDP		; CPythonSafeBox::DelItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?SetItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_rItemInstance$ = 12					; size = 4
?SetItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z PROC ; CPythonSafeBox::SetItemData, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 18   : {

  00006	56		 push	 esi

; 19   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  00007	8b 75 08	 mov	 esi, DWORD PTR _dwSlotIndex$[ebp]
  0000a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  0000e	2b c7		 sub	 eax, edi
  00010	d1 f8		 sar	 eax, 1
  00012	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 19   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  00018	3b f0		 cmp	 esi, eax
  0001a	72 14		 jb	 SHORT $LN2@SetItemDat

; 20   : 	{
; 21   : 		TraceError("CPythonSafeBox::SetItemData(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  0001c	56		 push	 esi
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@NFGEBKNF@CPythonSafeBox?3?3SetItemData?$CIdwS@
  00022	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00027	83 c4 08	 add	 esp, 8
  0002a	5f		 pop	 edi

; 26   : }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN2@SetItemDat:

; 22   : 		return;
; 23   : 	}
; 24   : 
; 25   : 	m_ItemInstanceVector[dwSlotIndex] = rItemInstance;

  00030	8b 45 0c	 mov	 eax, DWORD PTR _rItemInstance$[ebp]
  00033	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00036	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00039	0f 10 48 10	 movups	 xmm1, XMMWORD PTR [eax+16]
  0003d	66 8b 50 2c	 mov	 dx, WORD PTR [eax+44]
  00041	f3 0f 7e 50 20	 movq	 xmm2, QWORD PTR [eax+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  00046	6b c6 2e	 imul	 eax, esi, 46
  00049	03 c7		 add	 eax, edi
  0004b	5f		 pop	 edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 26   : }

  0004c	5e		 pop	 esi
  0004d	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00050	0f 11 48 10	 movups	 XMMWORD PTR [eax+16], xmm1
  00054	66 0f d6 50 20	 movq	 QWORD PTR [eax+32], xmm2
  00059	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  0005c	66 89 50 2c	 mov	 WORD PTR [eax+44], dx
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
?SetItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z ENDP ; CPythonSafeBox::SetItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?GetMoney@CPythonSafeBox@@QAEKXZ
_TEXT	SEGMENT
?GetMoney@CPythonSafeBox@@QAEKXZ PROC			; CPythonSafeBox::GetMoney, COMDAT
; _this$ = ecx

; 47   : 	return m_dwMoney;

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 48   : }

  00003	c3		 ret	 0
?GetMoney@CPythonSafeBox@@QAEKXZ ENDP			; CPythonSafeBox::GetMoney
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?GetCurrentSafeBoxSize@CPythonSafeBox@@QAEHXZ
_TEXT	SEGMENT
?GetCurrentSafeBoxSize@CPythonSafeBox@@QAEHXZ PROC	; CPythonSafeBox::GetCurrentSafeBoxSize, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	d1 f8		 sar	 eax, 1
  00008	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 53   : }

  0000e	c3		 ret	 0
?GetCurrentSafeBoxSize@CPythonSafeBox@@QAEHXZ ENDP	; CPythonSafeBox::GetCurrentSafeBoxSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_ppInstance$ = 12					; size = 4
?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z PROC ; CPythonSafeBox::GetItemDataPtr, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	2b c2		 sub	 eax, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 70   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000e	d1 f8		 sar	 eax, 1
  00010	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 70   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  00016	3b c8		 cmp	 ecx, eax
  00018	72 14		 jb	 SHORT $LN2@GetItemDat

; 71   : 	{
; 72   : 		TraceError("CPythonSafeBox::GetItemData(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  0001a	51		 push	 ecx
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@BNCIHACH@CPythonSafeBox?3?3GetItemData?$CIdwS@
  00020	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00025	83 c4 08	 add	 esp, 8

; 73   : 		return FALSE;

  00028	33 c0		 xor	 eax, eax

; 79   : }

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN2@GetItemDat:

; 76   : 	*ppInstance = &m_ItemInstanceVector[dwSlotIndex];

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _ppInstance$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  00031	6b c9 2e	 imul	 ecx, ecx, 46
  00034	03 ca		 add	 ecx, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 76   : 	*ppInstance = &m_ItemInstanceVector[dwSlotIndex];

  00036	89 08		 mov	 DWORD PTR [eax], ecx

; 77   : 
; 78   : 	return TRUE;

  00038	b8 01 00 00 00	 mov	 eax, 1

; 79   : }

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ENDP ; CPythonSafeBox::GetItemDataPtr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_ppInstance$ = 12					; size = 4
?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z PROC ; CPythonSafeBox::GetMallItemDataPtr, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00006	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00009	2b c2		 sub	 eax, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 118  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000e	d1 f8		 sar	 eax, 1
  00010	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 118  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  00016	3b c8		 cmp	 ecx, eax
  00018	72 14		 jb	 SHORT $LN2@GetMallIte

; 119  : 	{
; 120  : 		TraceError("CPythonSafeBox::GetMallSlotItemID(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  0001a	51		 push	 ecx
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@BNEMANLE@CPythonSafeBox?3?3GetMallSlotItem@
  00020	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00025	83 c4 08	 add	 esp, 8

; 121  : 		return FALSE;

  00028	33 c0		 xor	 eax, eax

; 127  : }

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN2@GetMallIte:

; 124  : 	*ppInstance = &m_MallItemInstanceVector[dwSlotIndex];

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _ppInstance$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1934 :         return _My_data._Myfirst[_Pos];

  00031	6b c9 2e	 imul	 ecx, ecx, 46
  00034	03 ca		 add	 ecx, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 124  : 	*ppInstance = &m_MallItemInstanceVector[dwSlotIndex];

  00036	89 08		 mov	 DWORD PTR [eax], ecx

; 125  : 
; 126  : 	return TRUE;

  00038	b8 01 00 00 00	 mov	 eax, 1

; 127  : }

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ENDP ; CPythonSafeBox::GetMallItemDataPtr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?GetMallSize@CPythonSafeBox@@QAEKXZ
_TEXT	SEGMENT
?GetMallSize@CPythonSafeBox@@QAEKXZ PROC		; CPythonSafeBox::GetMallSize, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00006	d1 f8		 sar	 eax, 1
  00008	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp

; 145  : }

  0000e	c3		 ret	 0
?GetMallSize@CPythonSafeBox@@QAEKXZ ENDP		; CPythonSafeBox::GetMallSize
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPythonSafeBox@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPythonSafeBox@@UAEPAXI@Z PROC			; CPythonSafeBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPythonSafeBox@@UAE@XZ ; CPythonSafeBox::~CPythonSafeBox
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 20		 push	 32			; 00000020H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCPythonSafeBox@@UAEPAXI@Z ENDP			; CPythonSafeBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetCurrentSafeboxSize@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetCurrentSafeboxSize@@YAPAU_object@@PAU1@0@Z PROC ; safeboxGetCurrentSafeboxSize, COMDAT

; 158  : 	return Py_BuildValue("i", CPythonSafeBox::Instance().GetCurrentSafeBoxSize());

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetCurrentSafeBoxSize@CPythonSafeBox@@QAEHXZ ; CPythonSafeBox::GetCurrentSafeBoxSize
  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00017	83 c4 08	 add	 esp, 8

; 159  : }

  0001a	c3		 ret	 0
?safeboxGetCurrentSafeboxSize@@YAPAU_object@@PAU1@0@Z ENDP ; safeboxGetCurrentSafeboxSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetItemID@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pInstance$ = -8					; size = 4
_ipos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetItemID@@YAPAU_object@@PAU1@0@Z PROC		; safeboxGetItemID, COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 163  : 	int ipos;
; 164  : 	if (!PyTuple_GetInteger(poArgs, 0, &ipos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _ipos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet

; 165  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 172  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 166  : 
; 167  : 	TItemData * pInstance;
; 168  : 	if (!CPythonSafeBox::Instance().GetItemDataPtr(ipos, &pInstance))

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0002a	8d 45 f8	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0002d	50		 push	 eax
  0002e	ff 75 fc	 push	 DWORD PTR _ipos$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN3@safeboxGet

; 169  : 		return Py_BuildException();

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00040	83 c4 04	 add	 esp, 4

; 172  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN3@safeboxGet:

; 170  : 
; 171  : 	return Py_BuildValue("i", pInstance->vnum);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pInstance$[ebp]
  0004a	ff 30		 push	 DWORD PTR [eax]
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00057	83 c4 08	 add	 esp, 8

; 172  : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?safeboxGetItemID@@YAPAU_object@@PAU1@0@Z ENDP		; safeboxGetItemID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetItemCount@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pInstance$ = -8					; size = 4
_ipos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetItemCount@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetItemCount, COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 176  : 	int ipos;
; 177  : 	if (!PyTuple_GetInteger(poArgs, 0, &ipos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _ipos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet

; 178  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 185  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 179  : 
; 180  : 	TItemData * pInstance;
; 181  : 	if (!CPythonSafeBox::Instance().GetItemDataPtr(ipos, &pInstance))

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0002a	8d 45 f8	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0002d	50		 push	 eax
  0002e	ff 75 fc	 push	 DWORD PTR _ipos$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN3@safeboxGet

; 182  : 		return Py_BuildException();

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00040	83 c4 04	 add	 esp, 4

; 185  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN3@safeboxGet:

; 183  : 
; 184  : 	return Py_BuildValue("i", pInstance->count);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pInstance$[ebp]
  0004a	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0005a	83 c4 08	 add	 esp, 8

; 185  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?safeboxGetItemCount@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetItemCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetItemFlags@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pInstance$ = -8					; size = 4
_ipos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetItemFlags@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetItemFlags, COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 189  : 	int ipos;
; 190  : 	if (!PyTuple_GetInteger(poArgs, 0, &ipos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _ipos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet

; 191  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 198  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 192  : 
; 193  : 	TItemData * pInstance;
; 194  : 	if (!CPythonSafeBox::Instance().GetItemDataPtr(ipos, &pInstance))

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0002a	8d 45 f8	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0002d	50		 push	 eax
  0002e	ff 75 fc	 push	 DWORD PTR _ipos$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN3@safeboxGet

; 195  : 		return Py_BuildException();

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00040	83 c4 04	 add	 esp, 4

; 198  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN3@safeboxGet:

; 196  : 
; 197  : 	return Py_BuildValue("i", pInstance->flags);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pInstance$[ebp]
  0004a	ff 70 05	 push	 DWORD PTR [eax+5]
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00058	83 c4 08	 add	 esp, 8

; 198  : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?safeboxGetItemFlags@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetItemFlags
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pItemData$ = -12					; size = 4
_iSlotIndex$ = -8					; size = 4
_iSocketIndex$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetItemMetinSocket, COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 202  : 	int iSlotIndex;
; 203  : 	if (!PyTuple_GetInteger(poArgs, 0, &iSlotIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iSlotIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet
$LN7@safeboxGet:

; 217  : }

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 204  : 		return Py_BadArgument();
; 205  : 	int iSocketIndex;
; 206  : 	if (!PyTuple_GetInteger(poArgs, 1, &iSocketIndex))

  00024	8d 45 fc	 lea	 eax, DWORD PTR _iSocketIndex$[ebp]
  00027	50		 push	 eax
  00028	6a 01		 push	 1
  0002a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0002d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	84 c0		 test	 al, al
  00037	74 e2		 je	 SHORT $LN7@safeboxGet

; 207  : 		return Py_BadArgument();
; 208  : 
; 209  : 	if (iSocketIndex >= ITEM_SOCKET_SLOT_MAX_NUM)

  00039	83 7d fc 03	 cmp	 DWORD PTR _iSocketIndex$[ebp], 3
  0003d	7c 0e		 jl	 SHORT $LN4@safeboxGet
$LN8@safeboxGet:

; 217  : }

  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00046	83 c4 04	 add	 esp, 4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN4@safeboxGet:

; 210  : 		return Py_BuildException();
; 211  : 
; 212  : 	TItemData * pItemData;
; 213  : 	if (!CPythonSafeBox::Instance().GetItemDataPtr(iSlotIndex, &pItemData))

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  00053	8d 45 f4	 lea	 eax, DWORD PTR _pItemData$[ebp]
  00056	50		 push	 eax
  00057	ff 75 f8	 push	 DWORD PTR _iSlotIndex$[ebp]
  0005a	e8 00 00 00 00	 call	 ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
  0005f	85 c0		 test	 eax, eax
  00061	74 dc		 je	 SHORT $LN8@safeboxGet

; 214  : 		return Py_BuildException();
; 215  : 
; 216  : 	return Py_BuildValue("i", pItemData->alSockets[iSocketIndex]);

  00063	8b 4d fc	 mov	 ecx, DWORD PTR _iSocketIndex$[ebp]
  00066	8b 45 f4	 mov	 eax, DWORD PTR _pItemData$[ebp]
  00069	ff 74 88 0d	 push	 DWORD PTR [eax+ecx*4+13]
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00078	83 c4 08	 add	 esp, 8

; 217  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?safeboxGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetItemMetinSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetItemAttribute@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pItemData$1 = -12					; size = 4
_iSlotIndex$ = -8					; size = 4
_iAttrSlotIndex$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetItemAttribute@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetItemAttribute, COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 221  : 	int iSlotIndex;
; 222  : 	if (!PyTuple_GetInteger(poArgs, 0, &iSlotIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iSlotIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@safeboxGet
$LN8@safeboxGet:

; 236  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@safeboxGet:

; 223  : 		return Py_BuildException();
; 224  : 	int iAttrSlotIndex;
; 225  : 	if (!PyTuple_GetInteger(poArgs, 1, &iAttrSlotIndex))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iAttrSlotIndex$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN8@safeboxGet

; 226  : 		return Py_BuildException();
; 227  : 
; 228  : 	if (iAttrSlotIndex >= 0 && iAttrSlotIndex < ITEM_ATTRIBUTE_SLOT_MAX_NUM)

  0003e	83 7d fc 06	 cmp	 DWORD PTR _iAttrSlotIndex$[ebp], 6
  00042	77 3d		 ja	 SHORT $LN5@safeboxGet

; 229  : 	{
; 230  : 		TItemData * pItemData;
; 231  : 		if (CPythonSafeBox::Instance().GetItemDataPtr(iSlotIndex, &pItemData))

  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0004a	8d 45 f4	 lea	 eax, DWORD PTR _pItemData$1[ebp]
  0004d	50		 push	 eax
  0004e	ff 75 f8	 push	 DWORD PTR _iSlotIndex$[ebp]
  00051	e8 00 00 00 00	 call	 ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
  00056	85 c0		 test	 eax, eax
  00058	74 27		 je	 SHORT $LN5@safeboxGet

; 232  : 			return Py_BuildValue("ii", pItemData->aAttr[iAttrSlotIndex].bType, pItemData->aAttr[iAttrSlotIndex].sValue);

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _iAttrSlotIndex$[ebp]
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _pItemData$1[ebp]
  00060	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00063	03 c8		 add	 ecx, eax
  00065	0f bf 41 1a	 movsx	 eax, WORD PTR [ecx+26]
  00069	50		 push	 eax
  0006a	0f b6 41 19	 movzx	 eax, BYTE PTR [ecx+25]
  0006e	50		 push	 eax

; 236  : }

  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii@
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN5@safeboxGet:

; 233  : 	}
; 234  : 
; 235  : 	return Py_BuildValue("ii", 0, 0);

  00081	6a 00		 push	 0
  00083	6a 00		 push	 0

; 236  : }

  00085	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii@
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?safeboxGetItemAttribute@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetItemAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetMoney@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMoney@@YAPAU_object@@PAU1@0@Z PROC		; safeboxGetMoney, COMDAT

; 240  : 	return Py_BuildValue("i", CPythonSafeBox::Instance().GetMoney());

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetMoney@CPythonSafeBox@@QAEKXZ ; CPythonSafeBox::GetMoney
  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00017	83 c4 08	 add	 esp, 8

; 241  : }

  0001a	c3		 ret	 0
?safeboxGetMoney@@YAPAU_object@@PAU1@0@Z ENDP		; safeboxGetMoney
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetMallItemID@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pInstance$ = -8					; size = 4
_ipos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMallItemID@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetMallItemID, COMDAT

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 245  : 	int ipos;
; 246  : 	if (!PyTuple_GetInteger(poArgs, 0, &ipos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _ipos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet

; 247  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 254  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 248  : 
; 249  : 	TItemData * pInstance;
; 250  : 	if (!CPythonSafeBox::Instance().GetMallItemDataPtr(ipos, &pInstance))

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0002a	8d 45 f8	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0002d	50		 push	 eax
  0002e	ff 75 fc	 push	 DWORD PTR _ipos$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetMallItemDataPtr
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN3@safeboxGet

; 251  : 		return Py_BuildException();

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00040	83 c4 04	 add	 esp, 4

; 254  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN3@safeboxGet:

; 252  : 
; 253  : 	return Py_BuildValue("i", pInstance->vnum);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pInstance$[ebp]
  0004a	ff 30		 push	 DWORD PTR [eax]
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00057	83 c4 08	 add	 esp, 8

; 254  : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?safeboxGetMallItemID@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetMallItemID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetMallItemCount@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pInstance$ = -8					; size = 4
_ipos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMallItemCount@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetMallItemCount, COMDAT

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 258  : 	int ipos;
; 259  : 	if (!PyTuple_GetInteger(poArgs, 0, &ipos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _ipos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet

; 260  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 267  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 261  : 
; 262  : 	TItemData * pInstance;
; 263  : 	if (!CPythonSafeBox::Instance().GetMallItemDataPtr(ipos, &pInstance))

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0002a	8d 45 f8	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0002d	50		 push	 eax
  0002e	ff 75 fc	 push	 DWORD PTR _ipos$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetMallItemDataPtr
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN3@safeboxGet

; 264  : 		return Py_BuildException();

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00040	83 c4 04	 add	 esp, 4

; 267  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN3@safeboxGet:

; 265  : 
; 266  : 	return Py_BuildValue("i", pInstance->count);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pInstance$[ebp]
  0004a	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0005a	83 c4 08	 add	 esp, 8

; 267  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?safeboxGetMallItemCount@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetMallItemCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetMallItemMetinSocket@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pItemData$ = -12					; size = 4
_iSlotIndex$ = -8					; size = 4
_iSocketIndex$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMallItemMetinSocket@@YAPAU_object@@PAU1@0@Z PROC ; safeboxGetMallItemMetinSocket, COMDAT

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 271  : 	int iSlotIndex;
; 272  : 	if (!PyTuple_GetInteger(poArgs, 0, &iSlotIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iSlotIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet
$LN7@safeboxGet:

; 286  : }

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 273  : 		return Py_BadArgument();
; 274  : 	int iSocketIndex;
; 275  : 	if (!PyTuple_GetInteger(poArgs, 1, &iSocketIndex))

  00024	8d 45 fc	 lea	 eax, DWORD PTR _iSocketIndex$[ebp]
  00027	50		 push	 eax
  00028	6a 01		 push	 1
  0002a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0002d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	84 c0		 test	 al, al
  00037	74 e2		 je	 SHORT $LN7@safeboxGet

; 276  : 		return Py_BadArgument();
; 277  : 
; 278  : 	if (iSocketIndex >= ITEM_SOCKET_SLOT_MAX_NUM)

  00039	83 7d fc 03	 cmp	 DWORD PTR _iSocketIndex$[ebp], 3
  0003d	7c 0e		 jl	 SHORT $LN4@safeboxGet
$LN8@safeboxGet:

; 286  : }

  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00046	83 c4 04	 add	 esp, 4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN4@safeboxGet:

; 279  : 		return Py_BuildException();
; 280  : 
; 281  : 	TItemData * pItemData;
; 282  : 	if (!CPythonSafeBox::Instance().GetMallItemDataPtr(iSlotIndex, &pItemData))

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  00053	8d 45 f4	 lea	 eax, DWORD PTR _pItemData$[ebp]
  00056	50		 push	 eax
  00057	ff 75 f8	 push	 DWORD PTR _iSlotIndex$[ebp]
  0005a	e8 00 00 00 00	 call	 ?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetMallItemDataPtr
  0005f	85 c0		 test	 eax, eax
  00061	74 dc		 je	 SHORT $LN8@safeboxGet

; 283  : 		return Py_BuildException();
; 284  : 
; 285  : 	return Py_BuildValue("i", pItemData->alSockets[iSocketIndex]);

  00063	8b 4d fc	 mov	 ecx, DWORD PTR _iSocketIndex$[ebp]
  00066	8b 45 f4	 mov	 eax, DWORD PTR _pItemData$[ebp]
  00069	ff 74 88 0d	 push	 DWORD PTR [eax+ecx*4+13]
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00078	83 c4 08	 add	 esp, 8

; 286  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?safeboxGetMallItemMetinSocket@@YAPAU_object@@PAU1@0@Z ENDP ; safeboxGetMallItemMetinSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetMallItemAttribute@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pItemData$1 = -12					; size = 4
_iSlotIndex$ = -8					; size = 4
_iAttrSlotIndex$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMallItemAttribute@@YAPAU_object@@PAU1@0@Z PROC ; safeboxGetMallItemAttribute, COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 290  : 	int iSlotIndex;
; 291  : 	if (!PyTuple_GetInteger(poArgs, 0, &iSlotIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iSlotIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@safeboxGet
$LN8@safeboxGet:

; 305  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@safeboxGet:

; 292  : 		return Py_BuildException();
; 293  : 	int iAttrSlotIndex;
; 294  : 	if (!PyTuple_GetInteger(poArgs, 1, &iAttrSlotIndex))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iAttrSlotIndex$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN8@safeboxGet

; 295  : 		return Py_BuildException();
; 296  : 
; 297  : 	if (iAttrSlotIndex >= 0 && iAttrSlotIndex < ITEM_ATTRIBUTE_SLOT_MAX_NUM)

  0003e	83 7d fc 06	 cmp	 DWORD PTR _iAttrSlotIndex$[ebp], 6
  00042	77 3d		 ja	 SHORT $LN5@safeboxGet

; 298  : 	{
; 299  : 		TItemData * pItemData;
; 300  : 		if (CPythonSafeBox::Instance().GetMallItemDataPtr(iSlotIndex, &pItemData))

  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0004a	8d 45 f4	 lea	 eax, DWORD PTR _pItemData$1[ebp]
  0004d	50		 push	 eax
  0004e	ff 75 f8	 push	 DWORD PTR _iSlotIndex$[ebp]
  00051	e8 00 00 00 00	 call	 ?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetMallItemDataPtr
  00056	85 c0		 test	 eax, eax
  00058	74 27		 je	 SHORT $LN5@safeboxGet

; 301  : 			return Py_BuildValue("ii", pItemData->aAttr[iAttrSlotIndex].bType, pItemData->aAttr[iAttrSlotIndex].sValue);

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _iAttrSlotIndex$[ebp]
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _pItemData$1[ebp]
  00060	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00063	03 c8		 add	 ecx, eax
  00065	0f bf 41 1a	 movsx	 eax, WORD PTR [ecx+26]
  00069	50		 push	 eax
  0006a	0f b6 41 19	 movzx	 eax, BYTE PTR [ecx+25]
  0006e	50		 push	 eax

; 305  : }

  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii@
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN5@safeboxGet:

; 302  : 	}
; 303  : 
; 304  : 	return Py_BuildValue("ii", 0, 0);

  00081	6a 00		 push	 0
  00083	6a 00		 push	 0

; 305  : }

  00085	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii@
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?safeboxGetMallItemAttribute@@YAPAU_object@@PAU1@0@Z ENDP ; safeboxGetMallItemAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?safeboxGetMallSize@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMallSize@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetMallSize, COMDAT

; 309  : 	return Py_BuildValue("i", CPythonSafeBox::Instance().GetMallSize());

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetMallSize@CPythonSafeBox@@QAEKXZ ; CPythonSafeBox::GetMallSize
  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00017	83 c4 08	 add	 esp, 8

; 310  : }

  0001a	c3		 ret	 0
?safeboxGetMallSize@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetMallSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonSafeBox.cpp
;	COMDAT ?initsafebox@@YAXXZ
_TEXT	SEGMENT
?initsafebox@@YAXXZ PROC				; initsafebox, COMDAT

; 313  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 314  : 	static PyMethodDef s_methods[] =
; 315  : 	{
; 316  : 		// SafeBox
; 317  : 		{ "GetCurrentSafeboxSize",		safeboxGetCurrentSafeboxSize,			METH_VARARGS },
; 318  : 		{ "GetItemID",					safeboxGetItemID,						METH_VARARGS },
; 319  : 		{ "GetItemCount",				safeboxGetItemCount,					METH_VARARGS },
; 320  : 		{ "GetItemFlags",				safeboxGetItemFlags,					METH_VARARGS },
; 321  : 		{ "GetItemMetinSocket",			safeboxGetItemMetinSocket,				METH_VARARGS },
; 322  : 		{ "GetItemAttribute",			safeboxGetItemAttribute,				METH_VARARGS },
; 323  : 		{ "GetMoney",					safeboxGetMoney,						METH_VARARGS },
; 324  : 
; 325  : 		// Mall
; 326  : 		{ "GetMallItemID",				safeboxGetMallItemID,					METH_VARARGS },
; 327  : 		{ "GetMallItemCount",			safeboxGetMallItemCount,				METH_VARARGS },
; 328  : 		{ "GetMallItemMetinSocket",		safeboxGetMallItemMetinSocket,			METH_VARARGS },
; 329  : 		{ "GetMallItemAttribute",		safeboxGetMallItemAttribute,			METH_VARARGS },
; 330  : 		{ "GetMallSize",				safeboxGetMallSize,						METH_VARARGS },
; 331  : 		{ NULL,							NULL,									NULL },
; 332  : 	};
; 333  : 
; 334  : 	PyObject * poModule = Py_InitModule("safebox", s_methods);

  00002	68 f5 03 00 00	 push	 1013			; 000003f5H
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 00 00 00 00	 push	 OFFSET ?s_methods@?1??initsafebox@@YAXXZ@4PAUPyMethodDef@@A
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_07CPPOKFKF@safebox@
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_InitModule4

; 335  : 	PyModule_AddIntConstant(poModule, "SAFEBOX_SLOT_X_COUNT", CPythonSafeBox::SAFEBOX_SLOT_X_COUNT);

  0001b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__PyModule_AddIntConstant
  00021	8b f8		 mov	 edi, eax
  00023	6a 05		 push	 5
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DMABFMEE@SAFEBOX_SLOT_X_COUNT@
  0002a	57		 push	 edi
  0002b	ff d6		 call	 esi

; 336  : 	PyModule_AddIntConstant(poModule, "SAFEBOX_SLOT_Y_COUNT", CPythonSafeBox::SAFEBOX_SLOT_Y_COUNT);

  0002d	6a 09		 push	 9
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PAKLFMNK@SAFEBOX_SLOT_Y_COUNT@
  00034	57		 push	 edi
  00035	ff d6		 call	 esi

; 337  : 	PyModule_AddIntConstant(poModule, "SAFEBOX_PAGE_SIZE", CPythonSafeBox::SAFEBOX_PAGE_SIZE);

  00037	6a 2d		 push	 45			; 0000002dH
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JOOAEPKL@SAFEBOX_PAGE_SIZE@
  0003e	57		 push	 edi
  0003f	ff d6		 call	 esi
  00041	83 c4 38	 add	 esp, 56			; 00000038H
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 338  : }

  00046	c3		 ret	 0
?initsafebox@@YAXXZ ENDP				; initsafebox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??A?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEAAUpacket_item@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEAAUpacket_item@@I@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::operator[], COMDAT
; _this$ = ecx

; 1927 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1928 :         auto& _My_data = _Mypair._Myval2;
; 1929 : #if _MSVC_STL_HARDENING_VECTOR || _ITERATOR_DEBUG_LEVEL != 0
; 1930 :         _STL_VERIFY(
; 1931 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1932 : #endif
; 1933 : 
; 1934 :         return _My_data._Myfirst[_Pos];

  00003	6b 45 08 2e	 imul	 eax, DWORD PTR __Pos$[ebp], 46
  00007	03 01		 add	 eax, DWORD PTR [ecx]

; 1935 :     }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
??A?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEAAUpacket_item@@I@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::size, COMDAT
; _this$ = ecx

; 1914 :         auto& _My_data = _Mypair._Myval2;
; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	d1 f8		 sar	 eax, 1
  00007	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417

; 1916 :     }

  0000d	c3		 ret	 0
?size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?clear@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::clear, COMDAT
; _this$ = ecx

; 1808 :         auto& _My_data    = _Mypair._Myval2;
; 1809 :         pointer& _Myfirst = _My_data._Myfirst;
; 1810 :         pointer& _Mylast  = _My_data._Mylast;
; 1811 : 
; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00005	74 03		 je	 SHORT $LN1@clear

; 1813 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1814 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1815 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1816 :             return;
; 1817 :         }
; 1818 : 
; 1819 :         _My_data._Orphan_all();
; 1820 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1821 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1822 :         _Mylast = _Myfirst;

  00007	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN1@clear:

; 1823 :     }

  0000a	c3		 ret	 0
?clear@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::resize, COMDAT
; _this$ = ecx

; 1628 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1596 :         if (_Newsize < _Oldsize) { // trim

  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0000e	8b c3		 mov	 eax, ebx
  00010	8b 37		 mov	 esi, DWORD PTR [edi]
  00012	2b c6		 sub	 eax, esi
  00014	d1 f8		 sar	 eax, 1
  00016	69 d0 a7 37 bd
	e9		 imul	 edx, eax, -373475417
  0001c	3b ca		 cmp	 ecx, edx
  0001e	73 0f		 jae	 SHORT $LN4@resize

; 1597 :             const pointer _Newlast = _Myfirst + _Newsize;

  00020	6b c1 2e	 imul	 eax, ecx, 46
  00023	03 c6		 add	 eax, esi

; 1598 :             _Orphan_range(_Newlast, _Mylast);
; 1599 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1600 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1601 :             _Mylast = _Newlast;

  00025	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00028	5f		 pop	 edi

; 1629 :         // trim or append value-initialized elements, provide strong guarantee
; 1630 :         _Resize(_Newsize, _Value_init_tag{});
; 1631 :     }

  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN4@resize:

; 1605 :         if (_Newsize > _Oldsize) { // append

  0002f	76 39		 jbe	 SHORT $LN5@resize

; 1606 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00031	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00034	2b c6		 sub	 eax, esi
  00036	d1 f8		 sar	 eax, 1
  00038	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417

; 1607 :             if (_Newsize > _Oldcapacity) { // reallocate

  0003e	3b c8		 cmp	 ecx, eax
  00040	76 10		 jbe	 SHORT $LN6@resize

; 1608 :                 _Resize_reallocate(_Newsize, _Val);

  00042	51		 push	 ecx
  00043	51		 push	 ecx
  00044	8b cf		 mov	 ecx, edi
  00046	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Resize_reallocate<std::_Value_init_tag>
  0004b	5f		 pop	 edi

; 1629 :         // trim or append value-initialized elements, provide strong guarantee
; 1630 :         _Resize(_Newsize, _Value_init_tag{});
; 1631 :     }

  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
$LN6@resize:

; 1618 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00052	2b ca		 sub	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 2093 :     for (; 0 < _Count; --_Count) {

  00054	74 11		 je	 SHORT $LN11@resize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1618 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00056	6b f1 2e	 imul	 esi, ecx, 46
  00059	56		 push	 esi
  0005a	6a 00		 push	 0
  0005c	53		 push	 ebx
  0005d	e8 00 00 00 00	 call	 _memset
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	03 de		 add	 ebx, esi
$LN11@resize:
  00067	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
$LN5@resize:
  0006a	5f		 pop	 edi

; 1629 :         // trim or append value-initialized elements, provide strong guarantee
; 1630 :         _Resize(_Newsize, _Value_init_tag{});
; 1631 :     }

  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??1?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::~vector<packet_item,std::allocator<packet_item> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2090 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 16		 mov	 edx, DWORD PTR [esi]
  00005	85 d2		 test	 edx, edx
  00007	74 4a		 je	 SHORT $LN5@vector

; 2091 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2092 :             _ASAN_VECTOR_REMOVE;
; 2093 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c2		 sub	 eax, edx
  0000e	d1 f8		 sar	 eax, 1
  00010	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00016	6b c8 2e	 imul	 ecx, eax, 46

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00019	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001f	72 14		 jb	 SHORT $LN19@vector
  00021	57		 push	 edi

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00022	8b 7a fc	 mov	 edi, DWORD PTR [edx-4]
  00025	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00028	2b d7		 sub	 edx, edi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002a	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0002d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00030	77 23		 ja	 SHORT $LN18@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00032	8b d7		 mov	 edx, edi
  00034	5f		 pop	 edi
$LN19@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2095 :             _Myfirst = nullptr;

  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00042	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2096 :             _Mylast  = nullptr;

  00045	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2097 :             _Myend   = nullptr;

  0004c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00053	5e		 pop	 esi

; 835  :     }

  00054	c3		 ret	 0
$LN18@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00055	6a 00		 push	 0
  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	6a 00		 push	 0
  0005d	6a 00		 push	 0
  0005f	e8 00 00 00 00	 call	 __invoke_watson
$LN27@vector:
  00064	cc		 int	 3
??1?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::~vector<packet_item,std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??0?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::vector<packet_item,std::allocator<packet_item> >, COMDAT
; _this$ = ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 671  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 672  :     }

  00006	8b c1		 mov	 eax, ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 671  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 672  :     }

  00016	c3		 ret	 0
??0?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::vector<packet_item,std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCPythonSafeBox@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCPythonSafeBox@@@@UAE@XZ PROC		; CSingleton<CPythonSafeBox>::~CSingleton<CPythonSafeBox>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonSafeBox@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A, 0 ; CSingleton<CPythonSafeBox>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCPythonSafeBox@@@@UAE@XZ ENDP		; CSingleton<CPythonSafeBox>::~CSingleton<CPythonSafeBox>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??0?$CSingleton@VCPythonSafeBox@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CSingleton@VCPythonSafeBox@@@@QAE@XZ PROC		; CSingleton<CPythonSafeBox>::CSingleton<CPythonSafeBox>, COMDAT
; _this$ = ecx

; 12   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonSafeBox@@@@6B@

; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 
; 15   : 		ms_singleton = (T*) ((int) this + offset);
; 16   : 	} 

  00006	8b c1		 mov	 eax, ecx
  00008	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A, ecx ; CSingleton<CPythonSafeBox>::ms_singleton
  0000e	c3		 ret	 0
??0?$CSingleton@VCPythonSafeBox@@@@QAE@XZ ENDP		; CSingleton<CPythonSafeBox>::CSingleton<CPythonSafeBox>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z PROC	; CSingleton<CPythonSafeBox>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{ 

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  0000a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A, 0 ; CSingleton<CPythonSafeBox>::ms_singleton
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonSafeBox@@@@6B@
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z ENDP	; CSingleton<CPythonSafeBox>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@Upacket_item@@@std@@@std@@YAXPAUpacket_item@@QAU1@AAV?$allocator@Upacket_item@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@Upacket_item@@@std@@@std@@YAXPAUpacket_item@@QAU1@AAV?$allocator@Upacket_item@@@0@@Z PROC ; std::_Destroy_range<std::allocator<packet_item> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1099 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1100 :     using _Ty = typename _Alloc::value_type;
; 1101 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1102 :         for (; _First != _Last; ++_First) {
; 1103 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1104 :         }
; 1105 :     }
; 1106 : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@Upacket_item@@@std@@@std@@YAXPAUpacket_item@@QAU1@AAV?$allocator@Upacket_item@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1589 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1590 :         // trim or append elements, provide strong guarantee
; 1591 :         auto& _Al           = _Getal();
; 1592 :         auto& _My_data      = _Mypair._Myval2;
; 1593 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1594 :         pointer& _Mylast    = _My_data._Mylast;
; 1595 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1596 :         if (_Newsize < _Oldsize) { // trim

  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0000e	8b c3		 mov	 eax, ebx
  00010	8b 37		 mov	 esi, DWORD PTR [edi]
  00012	2b c6		 sub	 eax, esi
  00014	d1 f8		 sar	 eax, 1
  00016	69 d0 a7 37 bd
	e9		 imul	 edx, eax, -373475417
  0001c	3b ca		 cmp	 ecx, edx
  0001e	73 0f		 jae	 SHORT $LN2@Resize

; 1597 :             const pointer _Newlast = _Myfirst + _Newsize;

  00020	6b c1 2e	 imul	 eax, ecx, 46
  00023	03 c6		 add	 eax, esi

; 1598 :             _Orphan_range(_Newlast, _Mylast);
; 1599 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1600 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1601 :             _Mylast = _Newlast;

  00025	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00028	5f		 pop	 edi

; 1619 :             }
; 1620 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1621 :             _Orphan_range(_Oldlast, _Oldlast);
; 1622 :         }
; 1623 : 
; 1624 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1625 :     }

  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
$LN2@Resize:

; 1602 :             return;
; 1603 :         }
; 1604 : 
; 1605 :         if (_Newsize > _Oldsize) { // append

  0002f	76 39		 jbe	 SHORT $LN3@Resize

; 1606 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00031	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00034	2b c6		 sub	 eax, esi
  00036	d1 f8		 sar	 eax, 1
  00038	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417

; 1607 :             if (_Newsize > _Oldcapacity) { // reallocate

  0003e	3b c8		 cmp	 ecx, eax
  00040	76 10		 jbe	 SHORT $LN4@Resize

; 1608 :                 _Resize_reallocate(_Newsize, _Val);

  00042	51		 push	 ecx
  00043	51		 push	 ecx
  00044	8b cf		 mov	 ecx, edi
  00046	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Resize_reallocate<std::_Value_init_tag>
  0004b	5f		 pop	 edi

; 1619 :             }
; 1620 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1621 :             _Orphan_range(_Oldlast, _Oldlast);
; 1622 :         }
; 1623 : 
; 1624 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1625 :     }

  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN4@Resize:

; 1618 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00052	2b ca		 sub	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 2093 :     for (; 0 < _Count; --_Count) {

  00054	74 11		 je	 SHORT $LN9@Resize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1618 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00056	6b f1 2e	 imul	 esi, ecx, 46
  00059	56		 push	 esi
  0005a	6a 00		 push	 0
  0005c	53		 push	 ebx
  0005d	e8 00 00 00 00	 call	 _memset
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	03 de		 add	 ebx, esi
$LN9@Resize:
  00067	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
$LN3@Resize:
  0006a	5f		 pop	 edi

; 1619 :             }
; 1620 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1621 :             _Orphan_range(_Oldlast, _Oldlast);
; 1622 :         }
; 1623 : 
; 1624 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1625 :     }

  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
??$_Resize@U_Value_init_tag@std@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1>::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1>::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Getal@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEAAV?$allocator@Upacket_item@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEAAV?$allocator@Upacket_item@@@2@XZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Getal, COMDAT
; _this$ = ecx

; 2227 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 2228 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEAAV?$allocator@Upacket_item@@@2@XZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Tidy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Tidy, COMDAT
; _this$ = ecx

; 2081 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2082 :         auto& _Al         = _Getal();
; 2083 :         auto& _My_data    = _Mypair._Myval2;
; 2084 :         pointer& _Myfirst = _My_data._Myfirst;
; 2085 :         pointer& _Mylast  = _My_data._Mylast;
; 2086 :         pointer& _Myend   = _My_data._Myend;
; 2087 : 
; 2088 :         _My_data._Orphan_all();
; 2089 : 
; 2090 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 16		 mov	 edx, DWORD PTR [esi]
  00005	85 d2		 test	 edx, edx
  00007	74 4a		 je	 SHORT $LN2@Tidy

; 2091 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2092 :             _ASAN_VECTOR_REMOVE;
; 2093 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c2		 sub	 eax, edx
  0000e	d1 f8		 sar	 eax, 1
  00010	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00016	6b c8 2e	 imul	 ecx, eax, 46

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00019	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001f	72 14		 jb	 SHORT $LN16@Tidy
  00021	57		 push	 edi

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00022	8b 7a fc	 mov	 edi, DWORD PTR [edx-4]
  00025	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00028	2b d7		 sub	 edx, edi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002a	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0002d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00030	77 23		 ja	 SHORT $LN15@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00032	8b d7		 mov	 edx, edi
  00034	5f		 pop	 edi
$LN16@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2095 :             _Myfirst = nullptr;

  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00042	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2096 :             _Mylast  = nullptr;

  00045	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2097 :             _Myend   = nullptr;

  0004c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 2099 :     }

  00053	5e		 pop	 esi
  00054	c3		 ret	 0
$LN15@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00055	6a 00		 push	 0
  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	6a 00		 push	 0
  0005d	6a 00		 push	 0
  0005f	e8 00 00 00 00	 call	 __invoke_watson
$LN23@Tidy:
  00064	cc		 int	 3
?_Tidy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
__Ptr_container$1$ = -4					; size = 4
__Newsize$ = 8						; size = 4
tv567 = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1552 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1553 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	81 fb 16 b2 90
	05		 cmp	 ebx, 93368854		; 0590b216H
  00012	0f 87 10 01 00
	00		 ja	 $LN123@Resize_rea

; 1555 :         }
; 1556 : 
; 1557 :         auto& _Al         = _Getal();
; 1558 :         auto& _My_data    = _Mypair._Myval2;
; 1559 :         pointer& _Myfirst = _My_data._Myfirst;
; 1560 :         pointer& _Mylast  = _My_data._Mylast;
; 1561 : 
; 1562 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	2b 07		 sub	 eax, DWORD PTR [edi]
  0001d	d1 f8		 sar	 eax, 1
  0001f	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
  00025	89 45 fc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0002b	2b 07		 sub	 eax, DWORD PTR [edi]
  0002d	d1 f8		 sar	 eax, 1
  0002f	69 d0 a7 37 bd
	e9		 imul	 edx, eax, -373475417

; 2011 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00035	b8 16 b2 90 05	 mov	 eax, 93368854		; 0590b216H
  0003a	8b ca		 mov	 ecx, edx
  0003c	d1 e9		 shr	 ecx, 1
  0003e	2b c1		 sub	 eax, ecx
  00040	3b d0		 cmp	 edx, eax
  00042	76 14		 jbe	 SHORT $LN6@Resize_rea

; 2012 :             return _Max; // geometric growth would overflow

  00044	b8 f4 ff ff ff	 mov	 eax, -12		; fffffff4H
  00049	c7 45 08 f4 ff
	ff ff		 mov	 DWORD PTR tv567[ebp], -12 ; fffffff4H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00056	eb 39		 jmp	 SHORT $LN121@Resize_rea
$LN6@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2015 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00058	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 2016 : 
; 2017 :         if (_Geometric < _Newsize) {

  0005b	3b c3		 cmp	 eax, ebx
  0005d	73 10		 jae	 SHORT $LN7@Resize_rea

; 2018 :             return _Newsize; // geometric growth would be insufficient

  0005f	8b c3		 mov	 eax, ebx
$LN17@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 122  :     return _Count * _Ty_size;

  00061	6b c0 2e	 imul	 eax, eax, 46
  00064	89 45 08	 mov	 DWORD PTR tv567[ebp], eax

; 227  :     if (_Bytes == 0) {

  00067	85 c0		 test	 eax, eax
  00069	75 11		 jne	 SHORT $LN21@Resize_rea

; 228  :         return nullptr;

  0006b	33 f6		 xor	 esi, esi
  0006d	eb 27		 jmp	 SHORT $LN20@Resize_rea
$LN7@Resize_rea:

; 117  :         if (_Count > _Max_possible) {

  0006f	3d 16 b2 90 05	 cmp	 eax, 93368854		; 0590b216H
  00074	0f 87 b3 00 00
	00		 ja	 $LN124@Resize_rea
  0007a	eb e5		 jmp	 SHORT $LN17@Resize_rea
$LN21@Resize_rea:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 08		 jb	 SHORT $LN23@Resize_rea

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	eb 06		 jmp	 SHORT $LN121@Resize_rea
$LN23@Resize_rea:

; 136  :         return ::operator new(_Bytes);

  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1566 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00091	8b f0		 mov	 esi, eax
  00093	83 c4 04	 add	 esp, 4
$LN20@Resize_rea:
  00096	6b 4d fc 2e	 imul	 ecx, DWORD PTR __Oldsize$1$[ebp], 46

; 1575 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  0009a	8b c3		 mov	 eax, ebx
  0009c	03 ce		 add	 ecx, esi
  0009e	2b 45 fc	 sub	 eax, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 2093 :     for (; 0 < _Count; --_Count) {

  000a1	74 0f		 je	 SHORT $LN34@Resize_rea
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1575 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000a3	6b c0 2e	 imul	 eax, eax, 46
  000a6	50		 push	 eax
  000a7	6a 00		 push	 0
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 _memset
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN34@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1992 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b2	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000b5	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000b7	56		 push	 esi
  000b8	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUpacket_item@@PAU1@@std@@YAPAUpacket_item@@PAU1@00@Z ; std::_Copy_memmove<packet_item *,packet_item *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2069 :         if (_Myfirst) { // destroy and deallocate old array

  000bd	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1992 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bf	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2069 :         if (_Myfirst) { // destroy and deallocate old array

  000c2	85 c9		 test	 ecx, ecx
  000c4	74 38		 je	 SHORT $LN71@Resize_rea

; 2070 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2071 :             _ASAN_VECTOR_REMOVE;
; 2072 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000c6	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000c9	2b c1		 sub	 eax, ecx
  000cb	d1 f8		 sar	 eax, 1
  000cd	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d3	6b d0 2e	 imul	 edx, eax, 46

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000d6	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000dc	72 16		 jb	 SHORT $LN79@Resize_rea

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000de	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  000e1	83 c2 23	 add	 edx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e4	2b c8		 sub	 ecx, eax
  000e6	89 45 fc	 mov	 DWORD PTR __Ptr_container$1$[ebp], eax

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e9	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  000ec	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ef	77 28		 ja	 SHORT $LN78@Resize_rea

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f1	8b 4d fc	 mov	 ecx, DWORD PTR __Ptr_container$1$[ebp]
$LN79@Resize_rea:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f4	52		 push	 edx
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fb	83 c4 08	 add	 esp, 8
$LN71@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2076 :         _Mylast  = _Newvec + _Newsize;

  000fe	6b c3 2e	 imul	 eax, ebx, 46
  00101	89 37		 mov	 DWORD PTR [edi], esi
  00103	03 c6		 add	 eax, esi
  00105	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2077 :         _Myend   = _Newvec + _Newcapacity;

  00108	8b 45 08	 mov	 eax, DWORD PTR tv567[ebp]
  0010b	03 c6		 add	 eax, esi
  0010d	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1586 :     }

  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN78@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	6a 00		 push	 0
  0011b	6a 00		 push	 0
  0011d	6a 00		 push	 0
  0011f	6a 00		 push	 0
  00121	6a 00		 push	 0
  00123	e8 00 00 00 00	 call	 __invoke_watson
$LN123@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1554 :             _Xlength();

  00128	e8 00 00 00 00	 call	 ?_Xlength@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@CAXXZ ; std::vector<packet_item,std::allocator<packet_item> >::_Xlength
$LN124@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0012d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Resize_rea:
  00132	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@PAU1@IAAV?$allocator@Upacket_item@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@PAU1@IAAV?$allocator@Upacket_item@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<packet_item> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 2078 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 2079 :     // value-initialize _Count objects to raw _First, using _Al
; 2080 :     using _Ptrty = typename _Alloc::value_type*;
; 2081 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2082 : #if _HAS_CXX20
; 2083 :         if (!_STD is_constant_evaluated())
; 2084 : #endif // _HAS_CXX20
; 2085 :         {
; 2086 :             auto _PFirst = _Unfancy(_First);
; 2087 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2088 :             return _First + _Count;
; 2089 :         }
; 2090 :     }
; 2091 : 
; 2092 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2093 :     for (; 0 < _Count; --_Count) {

  00003	85 d2		 test	 edx, edx
  00005	74 16		 je	 SHORT $LN21@Uninitiali
  00007	56		 push	 esi
  00008	6b f2 2e	 imul	 esi, edx, 46
  0000b	56		 push	 esi
  0000c	6a 00		 push	 0
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]

; 2094 :         _Backout._Emplace_back();
; 2095 :     }
; 2096 : 
; 2097 :     return _Backout._Release();

  0001a	5e		 pop	 esi
  0001b	5f		 pop	 edi

; 2098 : }

  0001c	c3		 ret	 0
$LN21@Uninitiali:

; 2094 :         _Backout._Emplace_back();
; 2095 :     }
; 2096 : 
; 2097 :     return _Backout._Release();

  0001d	8b c7		 mov	 eax, edi
  0001f	5f		 pop	 edi

; 2098 : }

  00020	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@PAU1@IAAV?$allocator@Upacket_item@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QAEAAV?$allocator@Upacket_item@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QAEAAV?$allocator@Upacket_item@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1539 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1540 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QAEAAV?$allocator@Upacket_item@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<packet_item> >::_Vector_val<std::_Simple_types<packet_item> >, COMDAT
; _this$ = ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<packet_item> >::_Vector_val<std::_Simple_types<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Orphan_range@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEXPAUpacket_item@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEXPAUpacket_item@@0@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 2223 :     _CONSTEXPR20 void _Orphan_range(pointer, pointer) const {}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEXPAUpacket_item@@0@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?deallocate@?$allocator@Upacket_item@@@std@@QAEXQAUpacket_item@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@Upacket_item@@@std@@QAEXQAUpacket_item@@I@Z PROC ; std::allocator<packet_item>::deallocate, COMDAT
; _this$dead$ = ecx

; 982  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 983  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 984  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	6b 4d 0c 2e	 imul	 ecx, DWORD PTR __Count$[ebp], 46
  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00010	72 12		 jb	 SHORT $LN12@deallocate

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00012	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00015	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00018	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00020	77 10		 ja	 SHORT $LN11@deallocate

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00022	8b c2		 mov	 eax, edx
$LN12@deallocate:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8

; 986  :     }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
$LN11@deallocate:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	e8 00 00 00 00	 call	 __invoke_watson
$LN15@deallocate:
  00041	cc		 int	 3
?deallocate@?$allocator@Upacket_item@@@std@@QAEXQAUpacket_item@@I@Z ENDP ; std::allocator<packet_item>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??0?$allocator@Upacket_item@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@Upacket_item@@@std@@QAE@XZ PROC		; std::allocator<packet_item>::allocator<packet_item>, COMDAT
; _this$ = ecx

; 974  :     constexpr allocator() noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@Upacket_item@@@std@@QAE@XZ ENDP		; std::allocator<packet_item>::allocator<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@AAV?$allocator@Upacket_item@@@0@AAI@Z
_TEXT	SEGMENT
??$_Allocate_at_least_helper@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@AAV?$allocator@Upacket_item@@@0@AAI@Z PROC ; std::_Allocate_at_least_helper<std::allocator<packet_item> >, COMDAT
; __Al$dead$ = ecx
; __Count$ = edx

; 2295 : #if _HAS_CXX23
; 2296 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2297 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2298 :         _Count                  = _Allocated;
; 2299 :         return _Ptr;
; 2300 :     } else
; 2301 : #endif // _HAS_CXX23
; 2302 :     {
; 2303 :         return _Al.allocate(_Count);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]

; 117  :         if (_Count > _Max_possible) {

  00002	3d 16 b2 90 05	 cmp	 eax, 93368854		; 0590b216H
  00007	0f 87 00 00 00
	00		 ja	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 118  :             _Throw_bad_array_new_length(); // multiply overflow
; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0000d	6b c0 2e	 imul	 eax, eax, 46

; 227  :     if (_Bytes == 0) {

  00010	85 c0		 test	 eax, eax
  00012	75 01		 jne	 SHORT $LN10@Allocate_a

; 2304 :     }
; 2305 : }

  00014	c3		 ret	 0
$LN10@Allocate_a:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00015	50		 push	 eax
  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 09		 jb	 SHORT $LN12@Allocate_a

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0001d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>

; 2304 :     }
; 2305 : }

  00022	83 c4 04	 add	 esp, 4
  00025	c3		 ret	 0
$LN12@Allocate_a:

; 136  :         return ::operator new(_Bytes);

  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 2304 :     }
; 2305 : }

  0002b	83 c4 04	 add	 esp, 4
  0002e	c3		 ret	 0
??$_Allocate_at_least_helper@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@AAV?$allocator@Upacket_item@@@0@AAI@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAUpacket_item@@@std@@YA?A_TABQAUpacket_item@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAUpacket_item@@@std@@YA?A_TABQAUpacket_item@@@Z PROC ; std::_Get_unwrapped<packet_item * const &>, COMDAT
; __It$ = ecx

; 1380 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1381 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1382 :         return _It + 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1383 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1384 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1385 :     } else {
; 1386 :         return static_cast<_Iter&&>(_It);
; 1387 :     }
; 1388 : }

  00002	c3		 ret	 0
??$_Get_unwrapped@ABQAUpacket_item@@@std@@YA?A_TABQAUpacket_item@@@Z ENDP ; std::_Get_unwrapped<packet_item * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUpacket_item@@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@QAU1@0PAU1@AAV?$allocator@Upacket_item@@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAUpacket_item@@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@QAU1@0PAU1@AAV?$allocator@Upacket_item@@@0@@Z PROC ; std::_Uninitialized_move<packet_item *,std::allocator<packet_item> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1977 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1978 :     // move [_First, _Last) to raw _Dest, using _Al
; 1979 :     // note: only called internally from elsewhere in the STL
; 1980 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1981 :     _STD _Adl_verify_range(_First, _Last);
; 1982 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1983 :     using _Ptrval     = typename _Alloc::value_type*;
; 1984 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1985 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1986 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1987 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1988 : #if _HAS_CXX20
; 1989 :         if (!_STD is_constant_evaluated())
; 1990 : #endif // _HAS_CXX20
; 1991 :         {
; 1992 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00005	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  00008	8b fa		 mov	 edi, edx
  0000a	8b f1		 mov	 esi, ecx
  0000c	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUpacket_item@@PAU1@@std@@YAPAUpacket_item@@PAU1@00@Z ; std::_Copy_memmove<packet_item *,packet_item *>

; 1993 :             return _Dest + (_ULast - _UFirst);

  00011	2b fe		 sub	 edi, esi
  00013	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00018	f7 ef		 imul	 edi
  0001a	83 c4 04	 add	 esp, 4
  0001d	03 d7		 add	 edx, edi
  0001f	c1 fa 05	 sar	 edx, 5
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
  00029	6b c0 2e	 imul	 eax, eax, 46
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	03 45 08	 add	 eax, DWORD PTR __Dest$[ebp]

; 1994 :         }
; 1995 :     }
; 1996 : 
; 1997 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1998 :     for (; _UFirst != _ULast; ++_UFirst) {
; 1999 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 2000 :     }
; 2001 : 
; 2002 :     return _Backout._Release();
; 2003 : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Uninitialized_move@PAUpacket_item@@V?$allocator@Upacket_item@@@std@@@std@@YAPAUpacket_item@@QAU1@0PAU1@AAV?$allocator@Upacket_item@@@0@@Z ENDP ; std::_Uninitialized_move<packet_item *,std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 1843 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00003	6a 2e		 push	 46			; 0000002eH
  00005	6a 00		 push	 0
  00007	ff 76 04	 push	 DWORD PTR [esi+4]
  0000a	e8 00 00 00 00	 call	 _memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1845 :         ++_Last;

  0000f	83 46 04 2e	 add	 DWORD PTR [esi+4], 46	; 0000002eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1845 :         ++_Last;

  00016	5e		 pop	 esi

; 1846 :     }

  00017	c3		 ret	 0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEPAUpacket_item@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEPAUpacket_item@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Release, COMDAT
; _this$ = ecx

; 1849 :         _First = _Last;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	89 01		 mov	 DWORD PTR [ecx], eax

; 1850 :         return _Last;
; 1851 :     }

  00005	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEPAUpacket_item@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::~_Uninitialized_backout_al<std::allocator<packet_item> >, COMDAT
; _this$ = ecx

; 1839 :         _STD _Destroy_range(_First, _Last, _Al);
; 1840 :     }

  00000	c2 00 00	 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::~_Uninitialized_backout_al<std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAE@PAUpacket_item@@AAV?$allocator@Upacket_item@@@1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAE@PAUpacket_item@@AAV?$allocator@Upacket_item@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Uninitialized_backout_al<std::allocator<packet_item> >, COMDAT
; _this$ = ecx

; 1833 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Al_$[ebp]
  0000e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00011	8b c1		 mov	 eax, ecx
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAE@PAUpacket_item@@AAV?$allocator@Upacket_item@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Uninitialized_backout_al<std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??1_Reallocation_guard@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Reallocation_guard@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Reallocation_guard::~_Reallocation_guard, COMDAT
; _this$ = ecx

; 621  :             if (_New_begin != nullptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 28		 je	 SHORT $LN8@Reallocati
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6b 49 08 2e	 imul	 ecx, DWORD PTR [ecx+8], 46

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00011	72 12		 jb	 SHORT $LN16@Reallocati

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00013	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00016	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00019	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00021	77 0d		 ja	 SHORT $LN15@Reallocati

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00023	8b c2		 mov	 eax, edx
$LN16@Reallocati:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00025	51		 push	 ecx
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002c	83 c4 08	 add	 esp, 8
$LN8@Reallocati:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 625  :         }

  0002f	c3		 ret	 0
$LN15@Reallocati:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	e8 00 00 00 00	 call	 __invoke_watson
$LN20@Reallocati:
  0003f	cc		 int	 3
??1_Reallocation_guard@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Reallocation_guard::~_Reallocation_guard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Xlength@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@CAXXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Xlength, COMDAT

; 2184 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@CAXXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Change_array@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXQAUpacket_item@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXQAUpacket_item@@II@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Change_array, COMDAT
; _this$ = ecx

; 2059 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2060 :         // orphan all iterators, discard old array, acquire new array
; 2061 :         auto& _Al         = _Getal();
; 2062 :         auto& _My_data    = _Mypair._Myval2;
; 2063 :         pointer& _Myfirst = _My_data._Myfirst;
; 2064 :         pointer& _Mylast  = _My_data._Mylast;
; 2065 :         pointer& _Myend   = _My_data._Myend;
; 2066 : 
; 2067 :         _My_data._Orphan_all();
; 2068 : 
; 2069 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 16		 mov	 edx, DWORD PTR [esi]
  00008	85 d2		 test	 edx, edx
  0000a	74 36		 je	 SHORT $LN8@Change_arr

; 2070 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2071 :             _ASAN_VECTOR_REMOVE;
; 2072 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000f	2b c2		 sub	 eax, edx
  00011	d1 f8		 sar	 eax, 1
  00013	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	6b c8 2e	 imul	 ecx, eax, 46

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0001c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00022	72 14		 jb	 SHORT $LN16@Change_arr
  00024	57		 push	 edi

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00025	8b 7a fc	 mov	 edi, DWORD PTR [edx-4]
  00028	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002b	2b d7		 sub	 edx, edi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002d	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00030	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00033	77 29		 ja	 SHORT $LN15@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00035	8b d7		 mov	 edx, edi
  00037	5f		 pop	 edi
$LN16@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	51		 push	 ecx
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003f	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2076 :         _Mylast  = _Newvec + _Newsize;

  00042	6b 45 0c 2e	 imul	 eax, DWORD PTR __Newsize$[ebp], 46
  00046	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00049	89 0e		 mov	 DWORD PTR [esi], ecx
  0004b	03 c1		 add	 eax, ecx
  0004d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2077 :         _Myend   = _Newvec + _Newcapacity;

  00050	6b 45 10 2e	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 46
  00054	03 c1		 add	 eax, ecx
  00056	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00059	5e		 pop	 esi

; 2079 :     }

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005e	6a 00		 push	 0
  00060	6a 00		 push	 0
  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	6a 00		 push	 0
  00068	e8 00 00 00 00	 call	 __invoke_watson
$LN23@Change_arr:
  0006d	cc		 int	 3
?_Change_array@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@AAEXQAUpacket_item@@II@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Calculate_growth@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEII@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 2006 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 2007 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2008 :         const size_type _Oldcapacity = capacity();
; 2009 :         const auto _Max              = max_size();
; 2010 : 
; 2011 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00008	b9 16 b2 90 05	 mov	 ecx, 93368854		; 0590b216H

; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000d	d1 f8		 sar	 eax, 1

; 2006 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

  0000f	57		 push	 edi

; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00010	69 f8 a7 37 bd
	e9		 imul	 edi, eax, -373475417

; 2007 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2008 :         const size_type _Oldcapacity = capacity();
; 2009 :         const auto _Max              = max_size();
; 2010 : 
; 2011 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00016	8b d7		 mov	 edx, edi
  00018	d1 ea		 shr	 edx, 1
  0001a	2b ca		 sub	 ecx, edx
  0001c	3b f9		 cmp	 edi, ecx
  0001e	76 0a		 jbe	 SHORT $LN2@Calculate_

; 2012 :             return _Max; // geometric growth would overflow

  00020	b8 16 b2 90 05	 mov	 eax, 93368854		; 0590b216H
  00025	5f		 pop	 edi

; 2018 :             return _Newsize; // geometric growth would be insufficient
; 2019 :         }
; 2020 : 
; 2021 :         return _Geometric; // geometric growth is sufficient
; 2022 :     }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN2@Calculate_:

; 2013 :         }
; 2014 : 
; 2015 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0002a	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]

; 2016 : 
; 2017 :         if (_Geometric < _Newsize) {

  0002d	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00030	5f		 pop	 edi
  00031	0f 42 45 08	 cmovb	 eax, DWORD PTR __Newsize$[ebp]

; 2018 :             return _Newsize; // geometric growth would be insufficient
; 2019 :         }
; 2020 : 
; 2021 :         return _Geometric; // geometric growth is sufficient
; 2022 :     }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEII@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?max_size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::max_size, COMDAT
; _this$dead$ = ecx

; 1919 :         return (_STD min)(static_cast<size_type>(_STD _Max_limit<difference_type>()), _Alty_traits::max_size(_Getal()));

  00000	b8 16 b2 90 05	 mov	 eax, 93368854		; 0590b216H

; 1920 :     }

  00005	c3		 ret	 0
?max_size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$move@AAUpacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z
_TEXT	SEGMENT
??$move@AAUpacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z PROC ; std::move<packet_item &>, COMDAT
; __Arg$ = ecx

; 1513 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1514 : }

  00002	c3		 ret	 0
??$move@AAUpacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z ENDP ; std::move<packet_item &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Unfancy@Upacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z
_TEXT	SEGMENT
??$_Unfancy@Upacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z PROC ; std::_Unfancy<packet_item>, COMDAT
; __Ptr$ = ecx

; 69   :     return _Ptr;

  00000	8b c1		 mov	 eax, ecx

; 70   : }

  00002	c3		 ret	 0
??$_Unfancy@Upacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z ENDP ; std::_Unfancy<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Copy_memmove@PAUpacket_item@@PAU1@@std@@YAPAUpacket_item@@PAU1@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAUpacket_item@@PAU1@@std@@YAPAUpacket_item@@PAU1@00@Z PROC ; std::_Copy_memmove<packet_item *,packet_item *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4762 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4763 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4764 :     const auto _First_ptr    = _STD _To_address(_First);
; 4765 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4766 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);
; 4767 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4768 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4769 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);

  00003	2b d1		 sub	 edx, ecx

; 4770 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00005	51		 push	 ecx
  00006	52		 push	 edx
  00007	8b 55 08	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAUpacket_item@@@std@@YAPAUpacket_item@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<packet_item *>
  0000f	83 c4 08	 add	 esp, 8

; 4771 : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$_Copy_memmove@PAUpacket_item@@PAU1@@std@@YAPAUpacket_item@@PAU1@00@Z ENDP ; std::_Copy_memmove<packet_item *,packet_item *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_To_address@PAUpacket_item@@@std@@YA?A_PABQAUpacket_item@@@Z
_TEXT	SEGMENT
??$_To_address@PAUpacket_item@@@std@@YA?A_PABQAUpacket_item@@@Z PROC ; std::_To_address<packet_item *>, COMDAT
; __Val$ = ecx

; 4616 :     _STL_INTERNAL_STATIC_ASSERT(contiguous_iterator<_Iter>);
; 4617 :     return _STD to_address(_Val);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 4618 : }

  00002	c3		 ret	 0
??$_To_address@PAUpacket_item@@@std@@YA?A_PABQAUpacket_item@@@Z ENDP ; std::_To_address<packet_item *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Emplace_back@Upacket_item@@@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEX$$QAUpacket_item@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@Upacket_item@@@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEX$$QAUpacket_item@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Emplace_back<packet_item>, COMDAT
; _this$ = ecx

; 1843 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1843 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00007	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000a	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0000d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00010	0f 10 42 10	 movups	 xmm0, XMMWORD PTR [edx+16]
  00014	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00018	f3 0f 7e 42 20	 movq	 xmm0, QWORD PTR [edx+32]
  0001d	66 0f d6 46 20	 movq	 QWORD PTR [esi+32], xmm0
  00022	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00025	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00028	66 8b 42 2c	 mov	 ax, WORD PTR [edx+44]
  0002c	66 89 46 2c	 mov	 WORD PTR [esi+44], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1845 :         ++_Last;

  00030	83 41 04 2e	 add	 DWORD PTR [ecx+4], 46	; 0000002eH
  00034	5e		 pop	 esi

; 1846 :     }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??$_Emplace_back@Upacket_item@@@?$_Uninitialized_backout_al@V?$allocator@Upacket_item@@@std@@@std@@QAEX$$QAUpacket_item@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<packet_item> >::_Emplace_back<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$construct@Upacket_item@@$$V@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@QAUpacket_item@@@Z
_TEXT	SEGMENT
??$construct@Upacket_item@@$$V@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@QAUpacket_item@@@Z PROC ; std::_Default_allocator_traits<std::allocator<packet_item> >::construct<packet_item>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	6a 2e		 push	 46			; 0000002eH
  00002	6a 00		 push	 0
  00004	52		 push	 edx
  00005	e8 00 00 00 00	 call	 _memset
  0000a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 734  :     }

  0000d	c3		 ret	 0
??$construct@Upacket_item@@$$V@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@QAUpacket_item@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<packet_item> >::construct<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAIABV?$allocator@Upacket_item@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAIABV?$allocator@Upacket_item@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<packet_item> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 746  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	b8 16 b2 90 05	 mov	 eax, 93368854		; 0590b216H

; 747  :     }

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAIABV?$allocator@Upacket_item@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<packet_item> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Getal@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEABV?$allocator@Upacket_item@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEABV?$allocator@Upacket_item@@@2@XZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Getal, COMDAT
; _this$ = ecx

; 2231 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 2232 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@ABEABV?$allocator@Upacket_item@@@2@XZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::capacity, COMDAT
; _this$ = ecx

; 1923 :         auto& _My_data = _Mypair._Myval2;
; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	d1 f8		 sar	 eax, 1
  00007	69 c0 a7 37 bd
	e9		 imul	 eax, eax, -373475417

; 1925 :     }

  0000d	c3		 ret	 0
?capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?allocate@?$allocator@Upacket_item@@@std@@QAEPAUpacket_item@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@Upacket_item@@@std@@QAEPAUpacket_item@@I@Z PROC ; std::allocator<packet_item>::allocate, COMDAT
; _this$dead$ = ecx

; 988  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  :         if (_Count > _Max_possible) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	3d 16 b2 90 05	 cmp	 eax, 93368854		; 0590b216H
  0000b	77 2b		 ja	 SHORT $LN19@allocate

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0000d	6b c0 2e	 imul	 eax, eax, 46

; 227  :     if (_Bytes == 0) {

  00010	85 c0		 test	 eax, eax
  00012	75 04		 jne	 SHORT $LN8@allocate

; 989  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 991  :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN8@allocate:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	50		 push	 eax
  00019	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001e	72 0c		 jb	 SHORT $LN10@allocate

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00020	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>

; 989  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 991  :     }

  00025	83 c4 04	 add	 esp, 4
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN10@allocate:

; 136  :         return ::operator new(_Bytes);

  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 989  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 991  :     }

  00031	83 c4 04	 add	 esp, 4
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN19@allocate:

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00038	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN16@allocate:
  0003d	cc		 int	 3
?allocate@?$allocator@Upacket_item@@@std@@QAEPAUpacket_item@@I@Z ENDP ; std::allocator<packet_item>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$to_address@Upacket_item@@@std@@YAPAUpacket_item@@QAU1@@Z
_TEXT	SEGMENT
??$to_address@Upacket_item@@@std@@YAPAUpacket_item@@QAU1@@Z PROC ; std::to_address<packet_item>, COMDAT
; __Val$ = ecx

; 541  :     static_assert(!is_function_v<_Ty>, "N4950 [pointer.conversion]/1: Mandates: T is not a function type.");
; 542  :     return _Val;

  00000	8b c1		 mov	 eax, ecx

; 543  : }

  00002	c3		 ret	 0
??$to_address@Upacket_item@@@std@@YAPAUpacket_item@@QAU1@@Z ENDP ; std::to_address<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$move@AAPAUpacket_item@@@std@@YA$$QAPAUpacket_item@@AAPAU1@@Z
_TEXT	SEGMENT
??$move@AAPAUpacket_item@@@std@@YA$$QAPAUpacket_item@@AAPAU1@@Z PROC ; std::move<packet_item * &>, COMDAT
; __Arg$ = ecx

; 1513 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1514 : }

  00002	c3		 ret	 0
??$move@AAPAUpacket_item@@@std@@YA$$QAPAUpacket_item@@AAPAU1@@Z ENDP ; std::move<packet_item * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAUpacket_item@@@std@@YAPAUpacket_item@@QBDQAU1@II@Z
_TEXT	SEGMENT
__Byte_count$ = 8					; size = 4
__Object_count$dead$ = 12				; size = 4
??$_Copy_memmove_tail@PAUpacket_item@@@std@@YAPAUpacket_item@@QBDQAU1@II@Z PROC ; std::_Copy_memmove_tail<packet_item *>, COMDAT
; __First_ch$ = ecx
; __Dest$ = edx

; 4747 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4748 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4749 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4750 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4751 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Byte_count$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b fa		 mov	 edi, edx
  0000b	51		 push	 ecx
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _memmove
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4752 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4753 :         (void) _Object_count;
; 4754 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4755 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00015	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi

; 4756 :     } else {
; 4757 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4758 :     }
; 4759 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Copy_memmove_tail@PAUpacket_item@@@std@@YAPAUpacket_item@@QBDQAU1@II@Z ENDP ; std::_Copy_memmove_tail<packet_item *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@Upacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z
_TEXT	SEGMENT
??$forward@Upacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z PROC ; std::forward<packet_item>, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@Upacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z ENDP ; std::forward<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$construct@Upacket_item@@U1@@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@QAUpacket_item@@$$QAU3@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@Upacket_item@@U1@@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@QAUpacket_item@@$$QAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<packet_item> >::construct<packet_item,packet_item>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 728  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00006	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00009	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0000c	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  00010	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
  00014	f3 0f 7e 41 20	 movq	 xmm0, QWORD PTR [ecx+32]
  00019	66 0f d6 42 20	 movq	 QWORD PTR [edx+32], xmm0
  0001e	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00021	89 42 28	 mov	 DWORD PTR [edx+40], eax
  00024	66 8b 41 2c	 mov	 ax, WORD PTR [ecx+44]
  00028	66 89 42 2c	 mov	 WORD PTR [edx+44], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 734  :     }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$construct@Upacket_item@@U1@@?$_Default_allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@QAUpacket_item@@$$QAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<packet_item> >::construct<packet_item,packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$construct_at@Upacket_item@@$$V@std@@YAPAUpacket_item@@QAU1@@Z
_TEXT	SEGMENT
??$construct_at@Upacket_item@@$$V@std@@YAPAUpacket_item@@QAU1@@Z PROC ; std::construct_at<packet_item>, COMDAT
; __Location$ = ecx

; 462  :     noexcept(noexcept(::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...))) /* strengthened */ {

  00000	56		 push	 esi

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00001	6a 2e		 push	 46			; 0000002eH
  00003	8b f1		 mov	 esi, ecx
  00005	6a 00		 push	 0
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 _memset
  0000d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 464  : }

  00013	c3		 ret	 0
??$construct_at@Upacket_item@@$$V@std@@YAPAUpacket_item@@QAU1@@Z ENDP ; std::construct_at<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0CO@@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$0CO@@std@@YAII@Z PROC		; std::_Get_size_of_n<46>, COMDAT
; __Count$ = ecx

; 113  :     constexpr bool _Overflow_is_possible = _Ty_size > 1;
; 114  : 
; 115  :     if constexpr (_Overflow_is_possible) {
; 116  :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 117  :         if (_Count > _Max_possible) {

  00000	81 f9 16 b2 90
	05		 cmp	 ecx, 93368854		; 0590b216H
  00006	0f 87 00 00 00
	00		 ja	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 118  :             _Throw_bad_array_new_length(); // multiply overflow
; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0000c	6b c1 2e	 imul	 eax, ecx, 46

; 123  : }

  0000f	c3		 ret	 0
??$_Get_size_of_n@$0CO@@std@@YAII@Z ENDP		; std::_Get_size_of_n<46>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QBEABV?$allocator@Upacket_item@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QBEABV?$allocator@Upacket_item@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1543 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1544 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@Upacket_item@@@std@@V?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@2@$00@std@@QBEABV?$allocator@Upacket_item@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<packet_item>,std::_Vector_val<std::_Simple_types<packet_item> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$construct_at@Upacket_item@@U1@@std@@YAPAUpacket_item@@QAU1@$$QAU1@@Z
_TEXT	SEGMENT
??$construct_at@Upacket_item@@U1@@std@@YAPAUpacket_item@@QAU1@$$QAU1@@Z PROC ; std::construct_at<packet_item,packet_item>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00003	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00006	0f 10 42 10	 movups	 xmm0, XMMWORD PTR [edx+16]
  0000a	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0000e	f3 0f 7e 42 20	 movq	 xmm0, QWORD PTR [edx+32]
  00013	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00018	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0001b	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  0001e	66 8b 42 2c	 mov	 ax, WORD PTR [edx+44]
  00022	66 89 41 2c	 mov	 WORD PTR [ecx+44], ax
  00026	8b c1		 mov	 eax, ecx

; 464  : }

  00028	c3		 ret	 0
??$construct_at@Upacket_item@@U1@@std@@YAPAUpacket_item@@QAU1@$$QAU1@@Z ENDP ; std::construct_at<packet_item,packet_item>
_TEXT	ENDS
END
