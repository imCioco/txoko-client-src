; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35217.0 

	TITLE	d:\_m2work\server client tmp4\clientvs22\vs_files\userinterface\distribute\pythonitem.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BH@BBCPOMJB@Item?3?5Inst?5?$CFd?0?5Pool?5?$CFd@ ; `string'
PUBLIC	??_C@_0BJ@CMCGILDJ@SetDropSoundFile?5?$CFd?5?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CO@ILCHIEAM@d?3?1ymir?5work?1effect?1etc?1dropite@ ; `string'
PUBLIC	??_C@_0CC@LIGJBHKC@CDynamicPool?$DMTGroundItemInstanc@ ; `string'
PUBLIC	??_R2?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Base Class Array'
PUBLIC	??_R2SGroundItemInstance@CPythonItem@@8		; CPythonItem::SGroundItemInstance::`RTTI Base Class Array'
PUBLIC	??_R2CPythonItem@@8				; CPythonItem::`RTTI Base Class Array'
PUBLIC	??_R2?$CSingleton@VCPythonItem@@@@8		; CSingleton<CPythonItem>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SGroundItemInstance@CPythonItem@@8 ; CPythonItem::SGroundItemInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CPythonItem@@8			; CPythonItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonItem@@@@8	; CSingleton<CPythonItem>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance> `RTTI Type Descriptor'
PUBLIC	??_R3SGroundItemInstance@CPythonItem@@8		; CPythonItem::SGroundItemInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AUSGroundItemInstance@CPythonItem@@@8	; CPythonItem::SGroundItemInstance `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPythonItem@@@@8		; CSingleton<CPythonItem>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$CSingleton@VCPythonItem@@@@@8		; CSingleton<CPythonItem> `RTTI Type Descriptor'
PUBLIC	??_R3CPythonItem@@8				; CPythonItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCPythonItem@@@8				; CPythonItem `RTTI Type Descriptor'
PUBLIC	??_R4?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@ ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R4SGroundItemInstance@CPythonItem@@6B@	; CPythonItem::SGroundItemInstance::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CSingleton@VCPythonItem@@@@6B@		; CSingleton<CPythonItem>::`RTTI Complete Object Locator'
PUBLIC	??_R4CPythonItem@@6B@				; CPythonItem::`RTTI Complete Object Locator'
PUBLIC	?unordered@partial_ordering@std@@2U12@B		; std::partial_ordering::unordered
PUBLIC	?equivalent@partial_ordering@std@@2U12@B	; std::partial_ordering::equivalent
PUBLIC	?greater@partial_ordering@std@@2U12@B		; std::partial_ordering::greater
PUBLIC	?less@partial_ordering@std@@2U12@B		; std::partial_ordering::less
PUBLIC	?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCPythonItem@@@@6B@		; CSingleton<CPythonItem>::`vftable'
PUBLIC	??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@ ; CDynamicPool<CPythonItem::SGroundItemInstance>::`vftable'
PUBLIC	??_7CPythonItem@@6B@				; CPythonItem::`vftable'
PUBLIC	??_7SGroundItemInstance@CPythonItem@@6B@	; CPythonItem::SGroundItemInstance::`vftable'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	?Show@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Show
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	?random@@YAKXZ:PROC				; random
EXTRN	?SetModelInstance@CGraphicThingInstance@@QAE_NHHHH@Z:PROC ; CGraphicThingInstance::SetModelInstance
EXTRN	?Update@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Update
EXTRN	?ReserveModelInstance@CGraphicThingInstance@@QAEXH@Z:PROC ; CGraphicThingInstance::ReserveModelInstance
EXTRN	?RegisterModelThing@CGraphicThingInstance@@QAEXHPAVCGraphicThing@@@Z:PROC ; CGraphicThingInstance::RegisterModelThing
EXTRN	?GetNormal@CMapManager@@QAE_NHHPAUD3DXVECTOR3@@@Z:PROC ; CMapManager::GetNormal
EXTRN	?ReserveModelThing@CGraphicThingInstance@@QAEXH@Z:PROC ; CGraphicThingInstance::ReserveModelThing
EXTRN	?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ:PROC ; CItemData::GetDropModelThing
EXTRN	?PlaySound2D@CSoundManager@@QAEXPBD@Z:PROC	; CSoundManager::PlaySound2D
EXTRN	?BlendRender@CGraphicObjectInstance@@QAEXXZ:PROC ; CGraphicObjectInstance::BlendRender
EXTRN	?Deform@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Deform
EXTRN	?SetDiffuseOperation@CScreen@@QAEXXZ:PROC	; CScreen::SetDiffuseOperation
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	?Transform@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Transform
EXTRN	_D3DXQuaternionMultiply@12:PROC
EXTRN	?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z:PROC ; CGraphicObjectInstance::SetPosition
EXTRN	?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z:PROC	; CSoundManager::PlaySound3D
EXTRN	?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z:PROC ; CGraphicObjectInstance::SetRotationQuaternion
EXTRN	??0CGraphicThingInstance@@QAE@XZ:PROC		; CGraphicThingInstance::CGraphicThingInstance
EXTRN	??1CGraphicThingInstance@@UAE@XZ:PROC		; CGraphicThingInstance::~CGraphicThingInstance
EXTRN	?Clear@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Clear
;	COMDAT ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A DD 01H DUP (?) ; CSingleton<CSoundManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_7SGroundItemInstance@CPythonItem@@6B@
CONST	SEGMENT
??_7SGroundItemInstance@CPythonItem@@6B@ DD FLAT:??_R4SGroundItemInstance@CPythonItem@@6B@ ; CPythonItem::SGroundItemInstance::`vftable'
	DD	FLAT:??_ESGroundItemInstance@CPythonItem@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CPythonItem@@6B@
CONST	SEGMENT
??_7CPythonItem@@6B@ DD FLAT:??_R4CPythonItem@@6B@	; CPythonItem::`vftable'
	DD	FLAT:??_ECPythonItem@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@ DD FLAT:??_R4?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@ ; CDynamicPool<CPythonItem::SGroundItemInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonItem@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonItem@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonItem@@@@6B@ ; CSingleton<CPythonItem>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonItem@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?less@partial_ordering@std@@2U12@B
CONST	SEGMENT
?less@partial_ordering@std@@2U12@B DB 0ffH		; std::partial_ordering::less
CONST	ENDS
;	COMDAT ?greater@partial_ordering@std@@2U12@B
CONST	SEGMENT
?greater@partial_ordering@std@@2U12@B DB 01H		; std::partial_ordering::greater
CONST	ENDS
;	COMDAT ?equivalent@partial_ordering@std@@2U12@B
CONST	SEGMENT
?equivalent@partial_ordering@std@@2U12@B DB 00H		; std::partial_ordering::equivalent
CONST	ENDS
;	COMDAT ?unordered@partial_ordering@std@@2U12@B
CONST	SEGMENT
?unordered@partial_ordering@std@@2U12@B DB 080H		; std::partial_ordering::unordered
CONST	ENDS
;	COMDAT ??_R4CPythonItem@@6B@
rdata$r	SEGMENT
??_R4CPythonItem@@6B@ DD 00H				; CPythonItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonItem@@@8
	DD	FLAT:??_R3CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonItem@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonItem@@@@6B@ DD 00H		; CSingleton<CPythonItem>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonItem@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R4SGroundItemInstance@CPythonItem@@6B@
rdata$r	SEGMENT
??_R4SGroundItemInstance@CPythonItem@@6B@ DD 00H	; CPythonItem::SGroundItemInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSGroundItemInstance@CPythonItem@@@8
	DD	FLAT:??_R3SGroundItemInstance@CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@ DD 00H ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonItem@@@8
data$rs	SEGMENT
??_R0?AVCPythonItem@@@8 DD FLAT:??_7type_info@@6B@	; CPythonItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonItem@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CPythonItem@@8
rdata$r	SEGMENT
??_R3CPythonItem@@8 DD 00H				; CPythonItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonItem@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCPythonItem@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonItem> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonItem@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonItem@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonItem@@@@8 DD 00H		; CSingleton<CPythonItem>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSGroundItemInstance@CPythonItem@@@8
data$rs	SEGMENT
??_R0?AUSGroundItemInstance@CPythonItem@@@8 DD FLAT:??_7type_info@@6B@ ; CPythonItem::SGroundItemInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSGroundItemInstance@CPythonItem@@', 00H
data$rs	ENDS
;	COMDAT ??_R3SGroundItemInstance@CPythonItem@@8
rdata$r	SEGMENT
??_R3SGroundItemInstance@CPythonItem@@8 DD 00H		; CPythonItem::SGroundItemInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SGroundItemInstance@CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CPythonItem::SGroundItemInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R3?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 DD 00H ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonItem@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonItem@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonItem@@@@@8 ; CSingleton<CPythonItem>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonItem@@8 DD FLAT:??_R0?AVCPythonItem@@@8 ; CPythonItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SGroundItemInstance@CPythonItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SGroundItemInstance@CPythonItem@@8 DD FLAT:??_R0?AUSGroundItemInstance@CPythonItem@@@8 ; CPythonItem::SGroundItemInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SGroundItemInstance@CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonItem@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonItem@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonItem@@@@8 ; CSingleton<CPythonItem>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2CPythonItem@@8
rdata$r	SEGMENT
??_R2CPythonItem@@8 DD FLAT:??_R1A@?0A@EA@CPythonItem@@8 ; CPythonItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R2SGroundItemInstance@CPythonItem@@8
rdata$r	SEGMENT
??_R2SGroundItemInstance@CPythonItem@@8 DD FLAT:??_R1A@?0A@EA@SGroundItemInstance@CPythonItem@@8 ; CPythonItem::SGroundItemInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_C@_0CC@LIGJBHKC@CDynamicPool?$DMTGroundItemInstanc@
CONST	SEGMENT
??_C@_0CC@LIGJBHKC@CDynamicPool?$DMTGroundItemInstanc@ DB 'CDynamicPool<T'
	DB	'GroundItemInstance>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@ILCHIEAM@d?3?1ymir?5work?1effect?1etc?1dropite@
CONST	SEGMENT
??_C@_0CO@ILCHIEAM@d?3?1ymir?5work?1effect?1etc?1dropite@ DB 'd:/ymir wor'
	DB	'k/effect/etc/dropitem/dropitem.mse', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CMCGILDJ@SetDropSoundFile?5?$CFd?5?3?5?$CFs@
CONST	SEGMENT
??_C@_0BJ@CMCGILDJ@SetDropSoundFile?5?$CFd?5?3?5?$CFs@ DB 'SetDropSoundFi'
	DB	'le %d : %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BBCPOMJB@Item?3?5Inst?5?$CFd?0?5Pool?5?$CFd@
CONST	SEGMENT
??_C@_0BH@BBCPOMJB@Item?3?5Inst?5?$CFd?0?5Pool?5?$CFd@ DB 'Item: Inst %d,'
	DB	' Pool %d', 00H				; `string'
PUBLIC	??0D3DXQUATERNION@@QAE@MMMM@Z			; D3DXQUATERNION::D3DXQUATERNION
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
PUBLIC	?D3DXQuaternionConjugate@@YAPAUD3DXQUATERNION@@PAU1@PBU1@@Z ; D3DXQuaternionConjugate
PUBLIC	_sinf
PUBLIC	_cosf
PUBLIC	??Mstd@@YA_NUpartial_ordering@0@U_Literal_zero@0@@Z ; std::operator<
PUBLIC	??8std@@YA_NUpartial_ordering@0@U_Literal_zero@0@@Z ; std::operator==
PUBLIC	??Bstrong_ordering@std@@QBE?AUpartial_ordering@1@XZ ; std::strong_ordering::operator std::partial_ordering
PUBLIC	??$swap@H$0A@@std@@YAXAAH0@Z			; std::swap<int,0>
PUBLIC	??$construct_at@PAUSGroundItemInstance@CPythonItem@@PAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@$$QAPAU12@@Z ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *>
PUBLIC	??$move@AAM@std@@YA$$QAMAAM@Z			; std::move<float &>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QBEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first
PUBLIC	??$construct@PAUSGroundItemInstance@CPythonItem@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@$$QAPAU34@@Z ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *>
PUBLIC	??$forward@PAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ; std::forward<CPythonItem::SGroundItemInstance *>
PUBLIC	??$_Copy_memmove_tail@PAPAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QBDQAPAU12@II@Z ; std::_Copy_memmove_tail<CPythonItem::SGroundItemInstance * *>
PUBLIC	??$move@AAPAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAPAUSGroundItemInstance@CPythonItem@@AAPAPAU12@@Z ; std::move<CPythonItem::SGroundItemInstance * * &>
PUBLIC	??$to_address@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@@Z ; std::to_address<CPythonItem::SGroundItemInstance *>
PUBLIC	??$swap@M$0A@@std@@YAXAAM0@Z			; std::swap<float,0>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first
PUBLIC	?allocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@I@Z ; std::allocator<CPythonItem::SGroundItemInstance *>::allocate
PUBLIC	?capacity@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::capacity
PUBLIC	?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAIABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@@Z ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::max_size
PUBLIC	?swap@?$pair@MH@std@@QAEXAAU12@@Z		; std::pair<float,int>::swap
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@PAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::~_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Release
PUBLIC	??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@ABQAU10@@Z ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>
PUBLIC	??$forward@ABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>
PUBLIC	??$_Emplace_back@PAUSGroundItemInstance@CPythonItem@@@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEX$$QAPAUSGroundItemInstance@CPythonItem@@@Z ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back<CPythonItem::SGroundItemInstance *>
PUBLIC	??$_To_address@PAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_PABQAPAUSGroundItemInstance@CPythonItem@@@Z ; std::_To_address<CPythonItem::SGroundItemInstance * *>
PUBLIC	??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>
PUBLIC	??$move@AAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ; std::move<CPythonItem::SGroundItemInstance * &>
PUBLIC	??$construct_at@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@ABQAU12@@Z ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$addressof@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ; std::addressof<CPythonItem::SGroundItemInstance *>
PUBLIC	??$forward@AAPAU?$pair@MH@std@@@std@@YAAAPAU?$pair@MH@0@AAPAU10@@Z ; std::forward<std::pair<float,int> * &>
PUBLIC	??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Pop_heap_hole_unchecked@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_unchecked<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
PUBLIC	??$_Push_heap_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Push_heap_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
PUBLIC	??$forward@U?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z ; std::forward<std::pair<float,int> >
PUBLIC	??$?__MMHMH@std@@YA?AUpartial_ordering@0@ABU?$pair@MH@0@0@Z ; std::operator<=><float,int,float,int>
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::max_size
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Get_first
PUBLIC	?max_size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::max_size
PUBLIC	?_Calculate_growth@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEII@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXQAPAUSGroundItemInstance@CPythonItem@@II@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@CAXXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Xlength
PUBLIC	??1_Reallocation_guard@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Reallocation_guard::~_Reallocation_guard
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Allocate
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>
PUBLIC	??$_Uninitialized_move@PAPAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z ; std::_Uninitialized_move<CPythonItem::SGroundItemInstance * *,std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_TABQAPAUSGroundItemInstance@CPythonItem@@@Z ; std::_Get_unwrapped<CPythonItem::SGroundItemInstance * * const &>
PUBLIC	??$construct@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@ABQAU34@@Z ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Construct_in_place@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAXAAPAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z ; std::_Construct_in_place<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$destroy_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXQAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z ; std::destroy_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@AAPAU10@@Z ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
PUBLIC	??$construct_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@QAU10@$$QAU10@@Z ; std::construct_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$?0AAPAU?$pair@MH@std@@AAPAU01@$0A@@?$pair@PAU?$pair@MH@std@@PAU12@@std@@QAE@AAPAU?$pair@MH@1@0@Z ; std::pair<std::pair<float,int> *,std::pair<float,int> *>::pair<std::pair<float,int> *,std::pair<float,int> *><std::pair<float,int> * &,std::pair<float,int> * &,0>
PUBLIC	??$swap@MH$0A@@std@@YAXAAU?$pair@MH@0@0@Z	; std::swap<float,int,0>
PUBLIC	??$_Next_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z ; std::_Next_iter<std::pair<float,int> *>
PUBLIC	??$_Guess_median_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Guess_median_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Prev_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z ; std::_Prev_iter<std::pair<float,int> *>
PUBLIC	??$_Pop_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Pop_heap_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
PUBLIC	??$?4U?$pair@MH@std@@$0A@@?$pair@MH@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,int>::operator=<std::pair<float,int>,0>
PUBLIC	??$_Move_backward_unchecked@PAU?$pair@MH@std@@PAU12@@std@@YAPAU?$pair@MH@0@PAU10@00@Z ; std::_Move_backward_unchecked<std::pair<float,int> *,std::pair<float,int> *>
PUBLIC	??$?RAAU?$pair@MH@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MH@1@0@Z ; std::less<void>::operator()<std::pair<float,int> &,std::pair<float,int> &>
PUBLIC	??$move@AAU?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z ; std::move<std::pair<float,int> &>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCItemData@@@2@XZ ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Get_first
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::max_size
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABU?$less@K@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getcomp
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::deallocate
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Max
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Min
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Rrotate
PUBLIC	??0?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAE@XZ ; std::allocator<CPythonItem::SGroundItemInstance *>::allocator<CPythonItem::SGroundItemInstance *>
PUBLIC	?deallocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEXQAPAUSGroundItemInstance@CPythonItem@@I@Z ; std::allocator<CPythonItem::SGroundItemInstance *>::deallocate
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first
PUBLIC	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$_Unfancy_maybe_null@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z ; std::_Unfancy_maybe_null<CPythonItem::SGroundItemInstance *>
PUBLIC	??$_Destroy_range@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z ; std::_Destroy_range<std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::nullptr_t>
PUBLIC	??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back_with_unused_capacity<CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$forward@ABQAUSGroundItemInstance@CPythonItem@@@std@@YAABQAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z ; std::forward<CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$destroy_at@PAUSGroundItemInstance@CPythonItem@@@std@@YAXQAPAUSGroundItemInstance@CPythonItem@@@Z ; std::destroy_at<CPythonItem::SGroundItemInstance *>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
PUBLIC	??$destroy@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::destroy<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$forward@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
PUBLIC	??$construct@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::construct<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Kfn@$$CBKPAUSGroundItemInstance@CPythonItem@@@?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0>::_Kfn<unsigned long const ,CPythonItem::SGroundItemInstance *>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MH@std@@PAU12@@0@PAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Sort_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Sort_heap_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Make_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Make_heap_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$?RHH@_Synth_three_way@std@@SA?A_PABH0@Z	; std::_Synth_three_way::operator()<int,int>
PUBLIC	??$?RMM@_Synth_three_way@std@@SA?A_PABM0@Z	; std::_Synth_three_way::operator()<float,float>
PUBLIC	??$_Insertion_sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAPAU?$pair@MH@0@QAU10@0U?$less@X@0@@Z ; std::_Insertion_sort_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1><>
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??0?$allocator@PAVCItemData@@@std@@QAE@XZ	; std::allocator<CItemData *>::allocator<CItemData *>
PUBLIC	?deallocate@?$allocator@PAVCItemData@@@std@@QAEXQAPAVCItemData@@I@Z ; std::allocator<CItemData *>::deallocate
PUBLIC	?_Getal@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEAAV?$allocator@PAVCItemData@@@2@XZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CItemData *> >::_Vector_val<std::_Simple_types<CItemData *> >
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Check_grow_by_1
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first
PUBLIC	?Delete@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@KAXPAUSGroundItemInstance@CPythonItem@@@Z ; CDynamicPool<CPythonItem::SGroundItemInstance>::Delete
PUBLIC	?clear@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::clear
PUBLIC	?_Unchecked_begin@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_end
PUBLIC	?_Tidy@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Tidy
PUBLIC	?_Orphan_range@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEXPAPAUSGroundItemInstance@CPythonItem@@0@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Orphan_range
PUBLIC	?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal
PUBLIC	?_Extract@?$_In_place_key_extract_map_impl@KU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@@Z ; std::_In_place_key_extract_map_impl<unsigned long,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >::_Extract
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Release
PUBLIC	??$_Destroy_range@V?$allocator@PAVCItemData@@@std@@@std@@YAXPAPAVCItemData@@QAPAV1@AAV?$allocator@PAVCItemData@@@0@@Z ; std::_Destroy_range<std::allocator<CItemData *> >
PUBLIC	??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1><std::less<unsigned long> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > const >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1><>
PUBLIC	??$_Emplace_one_at_back@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_one_at_back<CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$destroy@PAUSGroundItemInstance@CPythonItem@@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@@Z ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::destroy<CPythonItem::SGroundItemInstance *>
PUBLIC	??$_Unfancy@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z ; std::_Unfancy<CPythonItem::SGroundItemInstance *>
PUBLIC	??$addressof@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ; std::addressof<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > > >
PUBLIC	??$?0PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool,0>
PUBLIC	??$?0AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &,bool,0>
PUBLIC	??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > ><std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$forward@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Lower_bound_duplicate@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Lower_bound_duplicate<unsigned long>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Adl_verify_range@PAU?$pair@MH@std@@PAU12@@std@@YAXABQAU?$pair@MH@0@0@Z ; std::_Adl_verify_range<std::pair<float,int> *,std::pair<float,int> *>
PUBLIC	??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	?_Tidy@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEXXZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Tidy
PUBLIC	??0?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >
PUBLIC	?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Erase_unchecked
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary
PUBLIC	?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Orphan_ptr
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*
PUBLIC	?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Unwrapped
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>
PUBLIC	?Destroy@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::Destroy
PUBLIC	??0?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	?push_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXABQAUSGroundItemInstance@CPythonItem@@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::push_back
PUBLIC	?pop_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::pop_back
PUBLIC	?empty@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBE_NXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::empty
PUBLIC	?size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::size
PUBLIC	?back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEAAPAUSGroundItemInstance@CPythonItem@@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::back
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@AAU32@@Z ; std::pointer_traits<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> *>::pointer_to
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1><>
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$_Find@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find<unsigned long>
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@AB_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool const &,0>
PUBLIC	??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Emplace<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$move@AAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ; std::move<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> &>
PUBLIC	??$forward@AAPAUSGroundItemInstance@CPythonItem@@@std@@YAAAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ; std::forward<CPythonItem::SGroundItemInstance * &>
PUBLIC	??$_Pass_fn@U?$less@X@std@@@std@@YA?A_PAAU?$less@X@0@@Z ; std::_Pass_fn<std::less<void> >
PUBLIC	??$_Get_unwrapped@ABQAU?$pair@MH@std@@@std@@YA?A_TABQAU?$pair@MH@0@@Z ; std::_Get_unwrapped<std::pair<float,int> * const &>
PUBLIC	??$sort@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXQAU?$pair@MH@0@0U?$less@X@0@@Z ; std::sort<std::pair<float,int> *,std::less<void> >
PUBLIC	??$?0MH$0A@@?$pair@MH@std@@QAE@$$QAM$$QAH@Z	; std::pair<float,int>::pair<float,int><float,int,0>
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	??_G?$CSingleton@VCPythonItem@@@@UAEPAXI@Z	; CSingleton<CPythonItem>::`scalar deleting destructor'
PUBLIC	??_G?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z ; CDynamicPool<CPythonItem::SGroundItemInstance>::`scalar deleting destructor'
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	?Instance@?$CSingleton@VCSoundManager@@@@SAAAVCSoundManager@@XZ ; CSingleton<CSoundManager>::Instance
PUBLIC	??0?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ ; std::vector<CItemData *,std::allocator<CItemData *> >::vector<CItemData *,std::allocator<CItemData *> >
PUBLIC	??1?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ ; std::vector<CItemData *,std::allocator<CItemData *> >::~vector<CItemData *,std::allocator<CItemData *> >
PUBLIC	??0?$CSingleton@VCPythonItem@@@@QAE@XZ		; CSingleton<CPythonItem>::CSingleton<CPythonItem>
PUBLIC	??1?$CSingleton@VCPythonItem@@@@UAE@XZ		; CSingleton<CPythonItem>::~CSingleton<CPythonItem>
PUBLIC	??0?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::end
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::size
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::clear
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::find
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator==
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator->
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>
PUBLIC	??0?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAE@XZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::CDynamicPool<CPythonItem::SGroundItemInstance>
PUBLIC	??1?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAE@XZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::~CDynamicPool<CPythonItem::SGroundItemInstance>
PUBLIC	?SetName@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPBD@Z ; CDynamicPool<CPythonItem::SGroundItemInstance>::SetName
PUBLIC	?Clear@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::Clear
PUBLIC	?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::Alloc
PUBLIC	?Free@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPAUSGroundItemInstance@CPythonItem@@@Z ; CDynamicPool<CPythonItem::SGroundItemInstance>::Free
PUBLIC	?GetCapacity@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEKXZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::GetCapacity
PUBLIC	??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@V21@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,0>
PUBLIC	??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::insert<0,0>
PUBLIC	??$?0AAKAAPAUSGroundItemInstance@CPythonItem@@$0A@@?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@QAE@AAKAAPAUSGroundItemInstance@CPythonItem@@@Z ; std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>::pair<unsigned long const ,CPythonItem::SGroundItemInstance *><unsigned long &,CPythonItem::SGroundItemInstance * &,0>
PUBLIC	??$sort@PAU?$pair@MH@std@@@std@@YAXQAU?$pair@MH@0@0@Z ; std::sort<std::pair<float,int> *>
PUBLIC	??$make_pair@MH@std@@YA?AU?$pair@MH@0@$$QAM$$QAH@Z ; std::make_pair<float,int>
PUBLIC	??1?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::~map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
PUBLIC	??_GCPythonItem@@UAEPAXI@Z			; CPythonItem::`scalar deleting destructor'
PUBLIC	?GetVirtualNumberOfGroundItem@CPythonItem@@QAEKK@Z ; CPythonItem::GetVirtualNumberOfGroundItem
PUBLIC	?GetPickedItemID@CPythonItem@@QAE_NPAK@Z	; CPythonItem::GetPickedItemID
PUBLIC	?__Pick@CPythonItem@@IAEKABUtagPOINT@@@Z	; CPythonItem::__Pick
PUBLIC	?GetGroundItemPosition@CPythonItem@@QAEHKPAUD3DXVECTOR3@@@Z ; CPythonItem::GetGroundItemPosition
PUBLIC	?GetCloseItem@CPythonItem@@QAE_NABUD3DXVECTOR3@@PAKK@Z ; CPythonItem::GetCloseItem
PUBLIC	?DISTANCE_APPROX@@YAHHH@Z			; DISTANCE_APPROX
PUBLIC	?DeleteItem@CPythonItem@@QAEXK@Z		; CPythonItem::DeleteItem
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	?GetOwnership@CPythonItem@@QAE_NKPAPBD@Z	; CPythonItem::GetOwnership
PUBLIC	?SetOwnership@CPythonItem@@QAEXKPBD@Z		; CPythonItem::SetOwnership
PUBLIC	?CreateItem@CPythonItem@@QAEXKKMMM_N@Z		; CPythonItem::CreateItem
PUBLIC	?__GetUseSoundType@CPythonItem@@IAEKABVCItemData@@@Z ; CPythonItem::__GetUseSoundType
PUBLIC	?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z ; CPythonItem::__GetDropSoundType
PUBLIC	?PlayUsePotionSound@CPythonItem@@QAEXXZ		; CPythonItem::PlayUsePotionSound
PUBLIC	?PlayDropSound@CPythonItem@@QAEXK@Z		; CPythonItem::PlayDropSound
PUBLIC	?PlayUseSound@CPythonItem@@QAEXK@Z		; CPythonItem::PlayUseSound
PUBLIC	?SetDropSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPythonItem::SetDropSoundFileName
PUBLIC	?SetUseSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPythonItem::SetUseSoundFileName
PUBLIC	?Update@SGroundItemInstance@CPythonItem@@QAE_NXZ ; CPythonItem::SGroundItemInstance::Update
PUBLIC	?__PlayDropSound@SGroundItemInstance@CPythonItem@@SAXKABUD3DXVECTOR3@@@Z ; CPythonItem::SGroundItemInstance::__PlayDropSound
PUBLIC	?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ	; CPythonItem::SGroundItemInstance::Clear
PUBLIC	??_GSGroundItemInstance@CPythonItem@@UAEPAXI@Z	; CPythonItem::SGroundItemInstance::`scalar deleting destructor'
PUBLIC	??1SGroundItemInstance@CPythonItem@@UAE@XZ	; CPythonItem::SGroundItemInstance::~SGroundItemInstance
PUBLIC	??0SGroundItemInstance@CPythonItem@@QAE@XZ	; CPythonItem::SGroundItemInstance::SGroundItemInstance
PUBLIC	?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; RotationArc
PUBLIC	?RotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; RotationNormalizedArc
PUBLIC	??0CPythonItem@@QAE@XZ				; CPythonItem::CPythonItem
PUBLIC	??1CPythonItem@@UAE@XZ				; CPythonItem::~CPythonItem
PUBLIC	?GetInfo@CPythonItem@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPythonItem::GetInfo
PUBLIC	?Render@CPythonItem@@QAEXXZ			; CPythonItem::Render
PUBLIC	?Update@CPythonItem@@QAEXABUtagPOINT@@@Z	; CPythonItem::Update
PUBLIC	?Create@CPythonItem@@QAEXXZ			; CPythonItem::Create
PUBLIC	?Destroy@CPythonItem@@QAEXXZ			; CPythonItem::Destroy
PUBLIC	?DeleteAllItems@CPythonItem@@QAEXXZ		; CPythonItem::DeleteAllItems
PUBLIC	?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; CPythonItem::SGroundItemInstance::ms_astDropSoundFileName
EXTRN	??_ECPythonItem@@UAEPAXI@Z:PROC			; CPythonItem::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCPythonItem@@@@UAEPAXI@Z:PROC	; CSingleton<CPythonItem>::`vector deleting destructor'
EXTRN	??_ESGroundItemInstance@CPythonItem@@UAEPAXI@Z:PROC ; CPythonItem::SGroundItemInstance::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z:PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CPythonItem@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CPythonItem@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CPythonItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CPythonItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPythonItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPythonItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CPythonItem@@QAE@XZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z$0
	ORG $+4
?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; CPythonItem::SGroundItemInstance::ms_astDropSoundFileName
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	0fH
??ms_astDropSoundFileName$initializer$@SGroundItemInstance@CPythonItem@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ ; ??ms_astDropSoundFileName$initializer$@SGroundItemInstance@CPythonItem@@2P6AXXZA@@3P6AXXZA
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?DeleteAllItems@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
_rkTextTail$1$ = -12					; size = 4
_pkData$ = -8						; size = 4
_i$ = -4						; size = 4
?DeleteAllItems@CPythonItem@@QAEXXZ PROC		; CPythonItem::DeleteAllItems, COMDAT
; _this$ = ecx

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 511  : 	CPythonTextTail& rkTextTail=CPythonTextTail::Instance();

  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonTextTail@@@@0PAVCPythonTextTail@@A ; CSingleton<CPythonTextTail>::ms_singleton
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	89 55 f4	 mov	 DWORD PTR _rkTextTail$1$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1142 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00014	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00017	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 514  : 	for (i= m_GroundItemInstanceMap.begin(); i!=m_GroundItemInstanceMap.end(); ++i)

  0001c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001f	3b c6		 cmp	 eax, esi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 514  : 	for (i= m_GroundItemInstanceMap.begin(); i!=m_GroundItemInstanceMap.end(); ++i)

  00021	74 48		 je	 SHORT $LN3@DeleteAllI
$LL4@DeleteAllI:

; 515  : 	{
; 516  : 		TGroundItemInstance* pGroundItemInst=i->second;
; 517  : 		rkTextTail.DeleteItemTextTail(i->first);

  00023	ff 70 10	 push	 DWORD PTR [eax+16]
  00026	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00029	8b ca		 mov	 ecx, edx
  0002b	e8 00 00 00 00	 call	 ?DeleteItemTextTail@CPythonTextTail@@QAEXK@Z ; CPythonTextTail::DeleteItemTextTail

; 518  : 		pGroundItemInst->Clear();

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ ; CPythonItem::SGroundItemInstance::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00037	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 519  : 		m_GroundItemInstancePool.Free(pGroundItemInst);

  0003a	89 75 f8	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0003d	3b 47 24	 cmp	 eax, DWORD PTR [edi+36]
  00040	74 08		 je	 SHORT $LN71@DeleteAllI

; 860  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00042	89 30		 mov	 DWORD PTR [eax], esi

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00044	83 47 20 04	 add	 DWORD PTR [edi+32], 4

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00048	eb 0d		 jmp	 SHORT $LN2@DeleteAllI
$LN71@DeleteAllI:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004a	8d 4d f8	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  00052	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
$LN2@DeleteAllI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 198  :         _Mybase::operator++();

  00057	8d 4d fc	 lea	 ecx, DWORD PTR _i$[ebp]
  0005a	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0005f	8b 33		 mov	 esi, DWORD PTR [ebx]

; 232  :         return this->_Ptr == _Right._Ptr;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 514  : 	for (i= m_GroundItemInstanceMap.begin(); i!=m_GroundItemInstanceMap.end(); ++i)

  00064	8b 55 f4	 mov	 edx, DWORD PTR _rkTextTail$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 232  :         return this->_Ptr == _Right._Ptr;

  00067	3b c6		 cmp	 eax, esi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 514  : 	for (i= m_GroundItemInstanceMap.begin(); i!=m_GroundItemInstanceMap.end(); ++i)

  00069	75 b8		 jne	 SHORT $LL4@DeleteAllI
$LN3@DeleteAllI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1374 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0006b	ff 76 04	 push	 DWORD PTR [esi+4]
  0006e	8b cb		 mov	 ecx, ebx
  00070	53		 push	 ebx
  00071	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >

; 1375 :         _Head->_Parent  = _Head;
; 1376 :         _Head->_Left    = _Head;
; 1377 :         _Head->_Right   = _Head;
; 1378 :         _Scary->_Mysize = 0;

  00076	5f		 pop	 edi
  00077	89 76 04	 mov	 DWORD PTR [esi+4], esi
  0007a	89 36		 mov	 DWORD PTR [esi], esi
  0007c	89 76 08	 mov	 DWORD PTR [esi+8], esi
  0007f	5e		 pop	 esi
  00080	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00087	5b		 pop	 ebx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 522  : }

  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
?DeleteAllItems@CPythonItem@@QAEXXZ ENDP		; CPythonItem::DeleteAllItems
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Destroy@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CPythonItem@@QAEXXZ PROC			; CPythonItem::Destroy, COMDAT
; _this$ = ecx

; 744  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 745  : 	DeleteAllItems();

  00005	e8 00 00 00 00	 call	 ?DeleteAllItems@CPythonItem@@QAEXXZ ; CPythonItem::DeleteAllItems
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  0000a	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  0000d	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00010	3b f3		 cmp	 esi, ebx
  00012	74 13		 je	 SHORT $LN7@Destroy
$LL8@Destroy:

; 111  : 			delete pkData;

  00014	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00016	85 c9		 test	 ecx, ecx
  00018	74 06		 je	 SHORT $LN6@Destroy
  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	6a 01		 push	 1
  0001e	ff 10		 call	 DWORD PTR [eax]
$LN6@Destroy:

; 50   : 			for (auto v : m_kVct_pkData)

  00020	83 c6 04	 add	 esi, 4
  00023	3b f3		 cmp	 esi, ebx
  00025	75 ed		 jne	 SHORT $LL8@Destroy
$LN7@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00027	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002a	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  0002d	74 03		 je	 SHORT $LN14@Destroy

; 1813 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1814 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1815 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1816 :             return;
; 1817 :         }
; 1818 : 
; 1819 :         _My_data._Orphan_all();
; 1820 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1821 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1822 :         _Mylast = _Myfirst;

  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN14@Destroy:

; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00032	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00035	3b 47 20	 cmp	 eax, DWORD PTR [edi+32]
  00038	74 03		 je	 SHORT $LN18@Destroy

; 1813 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1814 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1815 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1816 :             return;
; 1817 :         }
; 1818 : 
; 1819 :         _My_data._Orphan_all();
; 1820 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1821 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1822 :         _Mylast = _Myfirst;

  0003a	89 47 20	 mov	 DWORD PTR [edi+32], eax
$LN18@Destroy:
  0003d	5f		 pop	 edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 747  : }

  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	c3		 ret	 0
?Destroy@CPythonItem@@QAEXXZ ENDP			; CPythonItem::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Create@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
?Create@CPythonItem@@QAEXXZ PROC			; CPythonItem::Create, COMDAT
; _this$ = ecx

; 751  : 	CEffectManager::Instance().RegisterEffect2("d:/ymir work/effect/etc/dropitem/dropitem.mse", &m_dwDropItemEffectID);

  00000	6a 00		 push	 0
  00002	8d 41 30	 lea	 eax, DWORD PTR [ecx+48]
  00005	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@ILCHIEAM@d?3?1ymir?5work?1effect?1etc?1dropite@
  00011	e8 00 00 00 00	 call	 ?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z ; CEffectManager::RegisterEffect2

; 752  : }

  00016	c3		 ret	 0
?Create@CPythonItem@@QAEXXZ ENDP			; CPythonItem::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Update@CPythonItem@@QAEXABUtagPOINT@@@Z
_TEXT	SEGMENT
_itor$ = -4						; size = 4
_c_rkPtMouse$ = 8					; size = 4
?Update@CPythonItem@@QAEXABUtagPOINT@@@Z PROC		; CPythonItem::Update, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1142 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000d	8b 02		 mov	 eax, DWORD PTR [edx]
  0000f	89 44 24 04	 mov	 DWORD PTR _itor$[esp+8], eax
  00013	3b c2		 cmp	 eax, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 113  : 	for(; itor != m_GroundItemInstanceMap.end(); ++itor)

  00015	74 1a		 je	 SHORT $LN3@Update
$LL4@Update:

; 114  : 	{
; 115  : 		itor->second->Update();

  00017	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001a	e8 00 00 00 00	 call	 ?Update@SGroundItemInstance@CPythonItem@@QAE_NXZ ; CPythonItem::SGroundItemInstance::Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 198  :         _Mybase::operator++();

  0001f	8d 4c 24 04	 lea	 ecx, DWORD PTR _itor$[esp+8]
  00023	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  00028	8b 44 24 04	 mov	 eax, DWORD PTR _itor$[esp+8]
  0002c	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 113  : 	for(; itor != m_GroundItemInstanceMap.end(); ++itor)

  0002f	75 e6		 jne	 SHORT $LL4@Update
$LN3@Update:

; 116  : 	}
; 117  : 
; 118  : 	m_dwPickedItemID=__Pick(c_rkPtMouse);

  00031	ff 75 08	 push	 DWORD PTR _c_rkPtMouse$[ebp]
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?__Pick@CPythonItem@@IAEKABUtagPOINT@@@Z ; CPythonItem::__Pick
  0003b	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 119  : }

  0003e	5e		 pop	 esi
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?Update@CPythonItem@@QAEXABUtagPOINT@@@Z ENDP		; CPythonItem::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Render@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
_itor$ = -4						; size = 4
?Render@CPythonItem@@QAEXXZ PROC			; CPythonItem::Render, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 123  : 	CPythonGraphic::Instance().SetDiffuseOperation();

  00007	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  0000d	e8 00 00 00 00	 call	 ?SetDiffuseOperation@CScreen@@QAEXXZ ; CScreen::SetDiffuseOperation
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1142 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00012	8b 57 04	 mov	 edx, DWORD PTR [edi+4]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	89 45 fc	 mov	 DWORD PTR _itor$[ebp], eax
  0001a	3b c2		 cmp	 eax, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 125  : 	for (; itor != m_GroundItemInstanceMap.end(); ++itor)

  0001c	74 26		 je	 SHORT $LN3@Render
  0001e	56		 push	 esi
  0001f	90		 npad	 1
$LL4@Render:

; 126  : 	{
; 127  : 		CGraphicThingInstance & rInstance = itor->second->ThingInstance;

  00020	8b 70 14	 mov	 esi, DWORD PTR [eax+20]

; 128  : 		//rInstance.Update();
; 129  : 		rInstance.Render();

  00023	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00026	e8 00 00 00 00	 call	 ?Render@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::Render

; 130  : 		rInstance.BlendRender();

  0002b	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0002e	e8 00 00 00 00	 call	 ?BlendRender@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::BlendRender
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 198  :         _Mybase::operator++();

  00033	8d 4d fc	 lea	 ecx, DWORD PTR _itor$[ebp]
  00036	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _itor$[ebp]
  0003e	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 125  : 	for (; itor != m_GroundItemInstanceMap.end(); ++itor)

  00041	75 dd		 jne	 SHORT $LL4@Render
  00043	5e		 pop	 esi
$LN3@Render:
  00044	5f		 pop	 edi

; 131  : 	}
; 132  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?Render@CPythonItem@@QAEXXZ ENDP			; CPythonItem::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetInfo@CPythonItem@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_szInfo$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pstInfo$ = 8						; size = 4
?GetInfo@CPythonItem@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPythonItem::GetInfo, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00013	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00016	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 16   : {

  00019	56		 push	 esi
  0001a	8b 75 08	 mov	 esi, DWORD PTR _pstInfo$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001d	c1 f8 02	 sar	 eax, 2
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 18   : 	sprintf(szInfo, "Item: Inst %d, Pool %d", m_GroundItemInstanceMap.size(), m_GroundItemInstancePool.GetCapacity());

  00020	50		 push	 eax
  00021	ff 71 08	 push	 DWORD PTR [ecx+8]
  00024	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szInfo$[ebp]
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BBCPOMJB@Item?3?5Inst?5?$CFd?0?5Pool?5?$CFd@
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _sprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00035	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szInfo$[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 18   : 	sprintf(szInfo, "Item: Inst %d, Pool %d", m_GroundItemInstanceMap.size(), m_GroundItemInstancePool.GetCapacity());

  0003b	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0003e	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL13@GetInfo:
  00041	8a 08		 mov	 cl, BYTE PTR [eax]
  00043	40		 inc	 eax
  00044	84 c9		 test	 cl, cl
  00046	75 f9		 jne	 SHORT $LL13@GetInfo
  00048	2b c2		 sub	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1534 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004a	8b ce		 mov	 ecx, esi
  0004c	50		 push	 eax
  0004d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szInfo$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 21   : }

  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	33 cd		 xor	 ecx, ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1534 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005e	5e		 pop	 esi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 21   : }

  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?GetInfo@CPythonItem@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPythonItem::GetInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ??1CPythonItem@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CPythonItem@@UAE@XZ PROC				; CPythonItem::~CPythonItem, COMDAT
; _this$ = ecx

; 761  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CPythonItem@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 763  : }

  00026	8d 8f 00 01 00
	00		 lea	 ecx, DWORD PTR [edi+256]
  0002c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CPythonItem@@6B@
  00032	e8 00 00 00 00	 call	 ??1?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ ; std::vector<CItemData *,std::allocator<CItemData *> >::~vector<CItemData *,std::allocator<CItemData *> >
  00037	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003c	6a 08		 push	 8
  0003e	6a 18		 push	 24			; 00000018H
  00040	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 26   : 		}

  00049	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  0004c	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
  00053	e8 00 00 00 00	 call	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
  00058	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0005b	e8 00 00 00 00	 call	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 777  :         _Erase_tree(_Al, _Myhead->_Parent);

  00060	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 763  : }

  00063	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 777  :         _Erase_tree(_Al, _Myhead->_Parent);

  00066	8b ce		 mov	 ecx, esi
  00068	ff 70 04	 push	 DWORD PTR [eax+4]
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00071	6a 18		 push	 24			; 00000018H
  00073	ff 36		 push	 DWORD PTR [esi]
  00075	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007a	83 c4 08	 add	 esp, 8
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h

; 19   : 	{ 

  0007d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CSingleton@VCPythonItem@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00083	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonItem@@@@0PAVCPythonItem@@A, 0 ; CSingleton<CPythonItem>::ms_singleton
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 763  : }

  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
  0009e	cc		 int	 3
  0009f	cc		 int	 3
  000a0	cc		 int	 3
  000a1	cc		 int	 3
  000a2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CPythonItem@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CPythonItem@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CPythonItem@@UAE@XZ ENDP				; CPythonItem::~CPythonItem
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ??0CPythonItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPythonItem@@QAE@XZ PROC				; CPythonItem::CPythonItem, COMDAT
; _this$ = ecx

; 755  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPythonItem@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonItem@@@@0PAVCPythonItem@@A, edi ; CSingleton<CPythonItem>::ms_singleton
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 755  : {

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0003c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CPythonItem@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00042	6a 18		 push	 24			; 00000018H
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 755  : {

  00044	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0005c	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0005e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00061	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00064	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1957 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0006a	89 06		 mov	 DWORD PTR [esi], eax
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 12   : 		{

  0006c	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00073	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0007a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00081	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00088	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
  0008f	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00096	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 14   : 			m_uInitCapacity=0;

  0009d	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 15   : 			m_uUsedCapacity=0;

  000a4	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 755  : {

  000ab	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b0	68 00 00 00 00	 push	 OFFSET ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b5	6a 08		 push	 8
  000b7	6a 18		 push	 24			; 00000018H
  000b9	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  000bc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000c6	c7 87 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+256], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 758  : }

  000d0	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000d2	c7 87 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+260], 0
  000dc	c7 87 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+264], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 757  : 	m_dwPickedItemID = INVALID_ID;

  000e6	c7 47 34 ff ff
	ff ff		 mov	 DWORD PTR [edi+52], -1

; 758  : }

  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPythonItem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCPythonItem@@@@UAE@XZ ; CSingleton<CPythonItem>::~CSingleton<CPythonItem>
__unwindfunclet$??0CPythonItem@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ
__unwindfunclet$??0CPythonItem@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAE@XZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::~CDynamicPool<CPythonItem::SGroundItemInstance>
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CPythonItem@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPythonItem@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPythonItem@@QAE@XZ ENDP				; CPythonItem::CPythonItem
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
;	COMDAT ?RotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_vTo$ = 8						; size = 4
?RotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z PROC ; RotationNormalizedArc, COMDAT
; ___$ReturnUdt$ = ecx
; _vFrom$ = edx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00009	8b 75 08	 mov	 esi, DWORD PTR _vTo$[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 63   : {

  0000c	8b d9		 mov	 ebx, ecx
  0000e	57		 push	 edi
  0000f	8b fa		 mov	 edi, edx
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00011	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00016	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  0001a	f3 0f 59 0e	 mulss	 xmm1, DWORD PTR [esi]
  0001e	f3 0f 59 47 04	 mulss	 xmm0, DWORD PTR [edi+4]
  00023	f3 0f 58 c8	 addss	 xmm1, xmm0
  00027	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  0002c	f3 0f 59 46 08	 mulss	 xmm0, DWORD PTR [esi+8]
  00031	f3 0f 58 c8	 addss	 xmm1, xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 67   : 	float s = sqrtf((1+d)*2);

  00035	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  0003d	f3 0f 58 c9	 addss	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 799  :             return (float)sqrt(_X);

  00041	0f 5a c1	 cvtps2pd xmm0, xmm1
  00044	0f 57 c9	 xorps	 xmm1, xmm1
  00047	66 0f 2e c8	 ucomisd xmm1, xmm0
  0004b	77 06		 ja	 SHORT $LN11@RotationNo
  0004d	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00051	eb 05		 jmp	 SHORT $LN12@RotationNo
$LN11@RotationNo:
  00053	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN12@RotationNo:
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00058	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 799  :             return (float)sqrt(_X);

  0005d	0f 57 d2	 xorps	 xmm2, xmm2
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00060	f3 0f 59 4f 04	 mulss	 xmm1, DWORD PTR [edi+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 69   : 	return D3DXQUATERNION(c.x/s,c.y/s,c.z/s,s*0.5f);

  00065	8b c3		 mov	 eax, ebx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 799  :             return (float)sqrt(_X);

  00067	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0006b	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00070	f3 0f 59 47 08	 mulss	 xmm0, DWORD PTR [edi+8]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00075	f3 0f 10 36	 movss	 xmm6, DWORD PTR [esi]
  00079	f3 0f 10 1f	 movss	 xmm3, DWORD PTR [edi]
  0007d	f3 0f 5c c8	 subss	 xmm1, xmm0
  00081	0f 28 c3	 movaps	 xmm0, xmm3

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00084	f3 0f 59 5e 04	 mulss	 xmm3, DWORD PTR [esi+4]
  00089	f3 0f 59 46 08	 mulss	 xmm0, DWORD PTR [esi+8]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 67   : 	float s = sqrtf((1+d)*2);

  0008e	f3 0f 5e ca	 divss	 xmm1, xmm2
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 667  :     x = fx;

  00092	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00096	0f 28 ce	 movaps	 xmm1, xmm6
  00099	f3 0f 59 4f 08	 mulss	 xmm1, DWORD PTR [edi+8]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0009e	f3 0f 59 77 04	 mulss	 xmm6, DWORD PTR [edi+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 70   : }

  000a3	5f		 pop	 edi
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000a4	f3 0f 5c c8	 subss	 xmm1, xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 70   : }

  000a8	5e		 pop	 esi
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000a9	f3 0f 5c de	 subss	 xmm3, xmm6

; 667  :     x = fx;

  000ad	f3 0f 5e ca	 divss	 xmm1, xmm2

; 668  :     y = fy;

  000b1	f3 0f 5e da	 divss	 xmm3, xmm2
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 69   : 	return D3DXQUATERNION(c.x/s,c.y/s,c.z/s,s*0.5f);

  000b5	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 668  :     y = fy;

  000bd	f3 0f 11 4b 04	 movss	 DWORD PTR [ebx+4], xmm1

; 669  :     z = fz;

  000c2	f3 0f 11 5b 08	 movss	 DWORD PTR [ebx+8], xmm3

; 670  :     w = fw;

  000c7	f3 0f 11 53 0c	 movss	 DWORD PTR [ebx+12], xmm2
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 70   : }

  000cc	5b		 pop	 ebx
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
?RotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ENDP ; RotationNormalizedArc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h
;	COMDAT ?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_vnTo$ = -28						; size = 12
_vnFrom$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_vTo$ = 8						; size = 4
?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z PROC ; RotationArc, COMDAT
; ___$ReturnUdt$ = ecx
; _vFrom$ = edx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 20	 sub	 esp, 32			; 00000020H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 1c	 mov	 DWORD PTR __$ArrayPad$[esp+32], eax
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _vTo$[ebp]

; 74   : 	D3DXVECTOR3 vnFrom, vnTo;
; 75   : 	D3DXVec3Normalize(&vnFrom, &vFrom);

  00018	8d 44 24 14	 lea	 eax, DWORD PTR _vnFrom$[esp+36]
  0001c	57		 push	 edi
  0001d	52		 push	 edx
  0001e	50		 push	 eax
  0001f	8b f9		 mov	 edi, ecx
  00021	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 76   : 	D3DXVec3Normalize(&vnTo, &vTo);

  00026	56		 push	 esi
  00027	8d 44 24 10	 lea	 eax, DWORD PTR _vnTo$[esp+44]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00031	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR _vnTo$[esp+44]
  00037	f3 0f 59 4c 24
	1c		 mulss	 xmm1, DWORD PTR _vnFrom$[esp+44]
  0003d	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR _vnFrom$[esp+40]
  00043	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _vnTo$[esp+40]
  00049	f3 0f 58 c8	 addss	 xmm1, xmm0
  0004d	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR _vnFrom$[esp+48]
  00053	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _vnTo$[esp+48]
  00059	f3 0f 58 c8	 addss	 xmm1, xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 67   : 	float s = sqrtf((1+d)*2);

  0005d	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00065	f3 0f 58 c9	 addss	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 799  :             return (float)sqrt(_X);

  00069	0f 5a c1	 cvtps2pd xmm0, xmm1
  0006c	0f 57 c9	 xorps	 xmm1, xmm1
  0006f	66 0f 2e c8	 ucomisd xmm1, xmm0
  00073	77 06		 ja	 SHORT $LN13@RotationAr
  00075	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00079	eb 05		 jmp	 SHORT $LN14@RotationAr
$LN13@RotationAr:
  0007b	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN14@RotationAr:
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00080	f3 0f 10 54 24
	14		 movss	 xmm2, DWORD PTR _vnTo$[esp+48]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 799  :             return (float)sqrt(_X);

  00086	0f 57 db	 xorps	 xmm3, xmm3
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00089	f3 0f 10 74 24
	10		 movss	 xmm6, DWORD PTR _vnTo$[esp+44]
  0008f	0f 28 ca	 movaps	 xmm1, xmm2
  00092	f3 0f 10 6c 24
	1c		 movss	 xmm5, DWORD PTR _vnFrom$[esp+44]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 77   : 	return RotationNormalizedArc(vnFrom, vnTo);

  00098	8b c7		 mov	 eax, edi
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0009a	f3 0f 10 64 24
	20		 movss	 xmm4, DWORD PTR _vnFrom$[esp+48]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000a0	f3 0f 59 54 24
	18		 mulss	 xmm2, DWORD PTR _vnFrom$[esp+40]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 78   : }

  000a6	8b 4c 24 24	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+40]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 799  :             return (float)sqrt(_X);

  000aa	f2 0f 5a d8	 cvtsd2ss xmm3, xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000ae	0f 28 c6	 movaps	 xmm0, xmm6
  000b1	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000b5	f3 0f 59 74 24
	18		 mulss	 xmm6, DWORD PTR _vnFrom$[esp+40]
  000bb	f3 0f 59 6c 24
	0c		 mulss	 xmm5, DWORD PTR _vnTo$[esp+40]
  000c1	f3 0f 59 c4	 mulss	 xmm0, xmm4
  000c5	f3 0f 59 64 24
	0c		 mulss	 xmm4, DWORD PTR _vnTo$[esp+40]
  000cb	f3 0f 5c f5	 subss	 xmm6, xmm5
  000cf	f3 0f 5c c8	 subss	 xmm1, xmm0
  000d3	f3 0f 5c e2	 subss	 xmm4, xmm2

; 668  :     y = fy;

  000d7	f3 0f 5e f3	 divss	 xmm6, xmm3
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 67   : 	float s = sqrtf((1+d)*2);

  000db	f3 0f 5e cb	 divss	 xmm1, xmm3
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 667  :     x = fx;

  000df	f3 0f 5e e3	 divss	 xmm4, xmm3
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 69   : 	return D3DXQUATERNION(c.x/s,c.y/s,c.z/s,s*0.5f);

  000e3	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 667  :     x = fx;

  000eb	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1

; 668  :     y = fy;

  000ef	f3 0f 11 67 04	 movss	 DWORD PTR [edi+4], xmm4

; 669  :     z = fz;

  000f4	f3 0f 11 77 08	 movss	 DWORD PTR [edi+8], xmm6

; 670  :     w = fw;

  000f9	f3 0f 11 5f 0c	 movss	 DWORD PTR [edi+12], xmm3
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\GrpMath.h

; 78   : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	33 cc		 xor	 ecx, esp
  00102	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ENDP ; RotationArc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h
;	COMDAT ??0SGroundItemInstance@CPythonItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SGroundItemInstance@CPythonItem@@QAE@XZ PROC		; CPythonItem::SGroundItemInstance::SGroundItemInstance, COMDAT
; _this$ = ecx

; 71   : 			SGroundItemInstance() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SGroundItemInstance@CPythonItem@@6B@
  00013	e8 00 00 00 00	 call	 ??0CGraphicThingInstance@@QAE@XZ ; CGraphicThingInstance::CGraphicThingInstance
  00018	0f 57 c0	 xorps	 xmm0, xmm0
  0001b	8b c6		 mov	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0001d	0f 11 86 2c 02
	00 00		 movups	 XMMWORD PTR [esi+556], xmm0

; 860  :         _My_data._Mysize = 0;

  00024	c7 86 3c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+572], 0

; 861  :         _My_data._Myres  = _Small_string_capacity;

  0002e	c7 86 40 02 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+576], 15	; 0000000fH

; 862  :         _My_data._Activate_SSO_buffer();
; 863  : 
; 864  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 865  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00038	c6 86 2c 02 00
	00 00		 mov	 BYTE PTR [esi+556], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h

; 71   : 			SGroundItemInstance() {}

  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??0SGroundItemInstance@CPythonItem@@QAE@XZ ENDP		; CPythonItem::SGroundItemInstance::SGroundItemInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h
;	COMDAT ??1SGroundItemInstance@CPythonItem@@UAE@XZ
_TEXT	SEGMENT
??1SGroundItemInstance@CPythonItem@@UAE@XZ PROC		; CPythonItem::SGroundItemInstance::~SGroundItemInstance, COMDAT
; _this$ = ecx

; 72   : 			virtual ~SGroundItemInstance() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e 2c 02 00
	00		 lea	 ecx, DWORD PTR [esi+556]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SGroundItemInstance@CPythonItem@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1383 :         _Tidy_deallocate();

  0000f	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h

; 72   : 			virtual ~SGroundItemInstance() {}

  00014	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00017	5e		 pop	 esi
  00018	e9 00 00 00 00	 jmp	 ??1CGraphicThingInstance@@UAE@XZ ; CGraphicThingInstance::~CGraphicThingInstance
??1SGroundItemInstance@CPythonItem@@UAE@XZ ENDP		; CPythonItem::SGroundItemInstance::~SGroundItemInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h
;	COMDAT ??_GSGroundItemInstance@CPythonItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSGroundItemInstance@CPythonItem@@UAEPAXI@Z PROC	; CPythonItem::SGroundItemInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   : 			virtual ~SGroundItemInstance() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 8e 2c 02 00
	00		 lea	 ecx, DWORD PTR [esi+556]
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SGroundItemInstance@CPythonItem@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1383 :         _Tidy_deallocate();

  00012	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h

; 72   : 			virtual ~SGroundItemInstance() {}

  00017	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0001a	e8 00 00 00 00	 call	 ??1CGraphicThingInstance@@UAE@XZ ; CGraphicThingInstance::~CGraphicThingInstance
  0001f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00023	74 0e		 je	 SHORT $LN15@scalar
  00025	68 44 02 00 00	 push	 580			; 00000244H
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@scalar:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_GSGroundItemInstance@CPythonItem@@UAEPAXI@Z ENDP	; CPythonItem::SGroundItemInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ??__E?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CPythonItem::SGroundItemInstance::ms_astDropSoundFileName'', COMDAT

; 13   : std::string CPythonItem::TGroundItemInstance::ms_astDropSoundFileName[DROPSOUND_NUM];

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CPythonItem::SGroundItemInstance::ms_astDropSoundFileName''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPythonItem::SGroundItemInstance::ms_astDropSoundFileName''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPythonItem::SGroundItemInstance::ms_astDropSoundFileName'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00005	6a 05		 push	 5
  00007	6a 18		 push	 24			; 00000018H
  00009	68 00 00 00 00	 push	 OFFSET ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; CPythonItem::SGroundItemInstance::ms_astDropSoundFileName
  0000e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00013	c3		 ret	 0
??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPythonItem::SGroundItemInstance::ms_astDropSoundFileName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ PROC	; CPythonItem::SGroundItemInstance::Clear, COMDAT
; _this$ = ecx

; 24   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1638 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00003	6a 00		 push	 0
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 25   : 	stOwnership = "";

  0000a	8d 8e 2c 02 00
	00		 lea	 ecx, DWORD PTR [esi+556]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1638 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00010	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 26   : 	ThingInstance.Clear();

  00015	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00018	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear

; 27   : 	CEffectManager::Instance().DestroyEffectInstance(dwEffectInstanceIndex);

  0001d	ff b6 28 02 00
	00		 push	 DWORD PTR [esi+552]
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  00029	e8 00 00 00 00	 call	 ?DestroyEffectInstance@CEffectManager@@QAE_NK@Z ; CEffectManager::DestroyEffectInstance
  0002e	5e		 pop	 esi

; 28   : }

  0002f	c3		 ret	 0
?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ ENDP	; CPythonItem::SGroundItemInstance::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?__PlayDropSound@SGroundItemInstance@CPythonItem@@SAXKABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
?__PlayDropSound@SGroundItemInstance@CPythonItem@@SAXKABUD3DXVECTOR3@@@Z PROC ; CPythonItem::SGroundItemInstance::__PlayDropSound, COMDAT
; _eItemType$ = ecx
; _c_rv3Pos$ = edx

; 32   : 	if (eItemType>=DROPSOUND_NUM)

  00000	83 f9 05	 cmp	 ecx, 5
  00003	73 46		 jae	 SHORT $LN1@PlayDropSo

; 35   : 	CSoundManager::Instance().PlaySound3D(c_rv3Pos.x, c_rv3Pos.y, c_rv3Pos.z, ms_astDropSoundFileName[eItemType].c_str());

  00005	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00008	83 3c c5 14 00
	00 00 0f	 cmp	 DWORD PTR ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8+20], 15 ; 0000000fH

; 2356 :         return _Mypair._Myval2._Myptr();

  00010	8d 04 c5 00 00
	00 00		 lea	 eax, DWORD PTR ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]

; 445  :         if (_Large_mode_engaged()) {

  00017	76 02		 jbe	 SHORT $LN8@PlayDropSo

; 446  :             _Result = _Unfancy(_Bx._Ptr);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@PlayDropSo:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 35   : 	CSoundManager::Instance().PlaySound3D(c_rv3Pos.x, c_rv3Pos.y, c_rv3Pos.z, ms_astDropSoundFileName[eItemType].c_str());

  0001b	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  00026	6a 01		 push	 1
  00028	50		 push	 eax
  00029	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0002c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00032	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00037	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003d	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	e8 00 00 00 00	 call	 ?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z ; CSoundManager::PlaySound3D
$LN1@PlayDropSo:

; 36   : }

  0004b	c3		 ret	 0
?__PlayDropSound@SGroundItemInstance@CPythonItem@@SAXKABUD3DXVECTOR3@@@Z ENDP ; CPythonItem::SGroundItemInstance::__PlayDropSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Update@SGroundItemInstance@CPythonItem@@QAE_NXZ
_TEXT	SEGMENT
_qc$1 = -72						; size = 16
_qc$2 = -56						; size = 16
_q$3 = -56						; size = 16
_qAdjust$4 = -40					; size = 16
_qAdjust$5 = -24					; size = 16
_v3NewPosition$6 = -20					; size = 12
tv456 = -8						; size = 4
_this$1$ = -4						; size = 4
_rate$1$ = -4						; size = 4
?Update@SGroundItemInstance@CPythonItem@@QAE_NXZ PROC	; CPythonItem::SGroundItemInstance::Update, COMDAT
; _this$ = ecx

; 39   : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 48	 sub	 esp, 72			; 00000048H
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8b f9		 mov	 edi, ecx
  0001d	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi

; 40   : 	if (bAnimEnded)

  00020	80 bf 24 02 00
	00 00		 cmp	 BYTE PTR [edi+548], 0
  00027	74 0b		 je	 SHORT $LN2@Update

; 41   : 		return false;

  00029	32 c0		 xor	 al, al

; 108  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	8b e3		 mov	 esp, ebx
  00032	5b		 pop	 ebx
  00033	c3		 ret	 0
$LN2@Update:

; 42   : 	if (dwEndTime < CTimer::Instance().GetCurrentMillisecond())

  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0003a	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond
  0003f	8d 77 20	 lea	 esi, DWORD PTR [edi+32]
  00042	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00045	39 87 1c 02 00
	00		 cmp	 DWORD PTR [edi+540], eax
  0004b	0f 83 df 00 00
	00		 jae	 $LN3@Update

; 43   : 	{
; 44   : 		ThingInstance.SetRotationQuaternion(qEnd);

  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z ; CGraphicObjectInstance::SetRotationQuaternion

; 54   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00057	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000

; 57   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&qEnd);

  0005f	8d 45 e8	 lea	 eax, DWORD PTR _qAdjust$5[ebp]
  00062	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00067	0f 57 c1	 xorps	 xmm0, xmm1
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 670  :     w = fw;

  0006a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _qAdjust$5[ebp+12], 0
  00071	f3 0f 11 45 e8	 movss	 DWORD PTR _qAdjust$5[ebp], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 54   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00076	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]
  0007b	0f 57 c1	 xorps	 xmm0, xmm1
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 668  :     y = fy;

  0007e	f3 0f 11 45 ec	 movss	 DWORD PTR _qAdjust$5[ebp+4], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 54   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00083	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  00088	0f 57 c1	 xorps	 xmm0, xmm1
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 669  :     z = fz;

  0008b	f3 0f 11 45 f0	 movss	 DWORD PTR _qAdjust$5[ebp+8], xmm0

; 1616 :     pOut->x = -pQ->x;

  00090	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00094	0f 57 c1	 xorps	 xmm0, xmm1
  00097	f3 0f 11 45 c8	 movss	 DWORD PTR _qc$2[ebp], xmm0

; 1617 :     pOut->y = -pQ->y;

  0009c	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  000a1	0f 57 c1	 xorps	 xmm0, xmm1
  000a4	f3 0f 11 45 cc	 movss	 DWORD PTR _qc$2[ebp+4], xmm0

; 1618 :     pOut->z = -pQ->z;

  000a9	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000ae	0f 57 c1	 xorps	 xmm0, xmm1
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 57   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&qEnd);

  000b1	56		 push	 esi
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1618 :     pOut->z = -pQ->z;

  000b2	f3 0f 11 45 d0	 movss	 DWORD PTR _qc$2[ebp+8], xmm0

; 1619 :     pOut->w =  pQ->w;

  000b7	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 57   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&qEnd);

  000bc	50		 push	 eax
  000bd	50		 push	 eax
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1619 :     pOut->w =  pQ->w;

  000be	f3 0f 11 45 d4	 movss	 DWORD PTR _qc$2[ebp+12], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 57   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&qEnd);

  000c3	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 58   : 		D3DXQuaternionMultiply(&qAdjust,&qc,&qAdjust);

  000c8	8d 45 e8	 lea	 eax, DWORD PTR _qAdjust$5[ebp]
  000cb	50		 push	 eax
  000cc	8d 45 c8	 lea	 eax, DWORD PTR _qc$2[ebp]
  000cf	50		 push	 eax
  000d0	8d 45 e8	 lea	 eax, DWORD PTR _qAdjust$5[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 59   : 
; 60   : 		ThingInstance.SetPosition(v3EndPosition.x+qAdjust.x, 

  000d9	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _qAdjust$5[ebp+8]
  000de	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  000e1	f3 0f 58 47 10	 addss	 xmm0, DWORD PTR [edi+16]
  000e6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000e9	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000ef	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _qAdjust$5[ebp+4]
  000f4	f3 0f 58 47 0c	 addss	 xmm0, DWORD PTR [edi+12]
  000f9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000ff	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _qAdjust$5[ebp]
  00104	f3 0f 58 47 08	 addss	 xmm0, DWORD PTR [edi+8]
  00109	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010e	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition

; 61   : 			v3EndPosition.y+qAdjust.y,
; 62   : 			v3EndPosition.z+qAdjust.z);
; 63   : 		//ThingInstance.Update();
; 64   : 		bAnimEnded = true;
; 65   : 
; 66   : 		__PlayDropSound(eDropSoundType, v3EndPosition);

  00113	8b 8f 20 02 00
	00		 mov	 ecx, DWORD PTR [edi+544]
  00119	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  0011c	c6 87 24 02 00
	00 01		 mov	 BYTE PTR [edi+548], 1
  00123	e8 00 00 00 00	 call	 ?__PlayDropSound@SGroundItemInstance@CPythonItem@@SAXKABUD3DXVECTOR3@@@Z ; CPythonItem::SGroundItemInstance::__PlayDropSound

; 67   : 	}

  00128	8d 77 3c	 lea	 esi, DWORD PTR [edi+60]
  0012b	e9 d5 01 00 00	 jmp	 $LN4@Update
$LN3@Update:

; 68   : 	else
; 69   : 	{
; 70   : 		DWORD time = CTimer::Instance().GetCurrentMillisecond() - dwStartTime;

  00130	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00136	8b b7 18 02 00
	00		 mov	 esi, DWORD PTR [edi+536]
  0013c	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond

; 71   : 		DWORD etime = dwEndTime - CTimer::Instance().GetCurrentMillisecond();

  00141	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00147	8b f8		 mov	 edi, eax
  00149	2b fe		 sub	 edi, esi
  0014b	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  0014e	8b b6 1c 02 00
	00		 mov	 esi, DWORD PTR [esi+540]
  00154	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond
  00159	66 0f 6e c7	 movd	 xmm0, edi
  0015d	8b ce		 mov	 ecx, esi

; 72   : 		float rate = time * 1.0f / (dwEndTime - dwStartTime);

  0015f	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00163	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00166	2b c8		 sub	 ecx, eax
  00168	f2 0f 58 04 fd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edi*8]
  00171	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  00174	2b b7 18 02 00
	00		 sub	 esi, DWORD PTR [edi+536]
  0017a	66 0f 5a d0	 cvtpd2ps xmm2, xmm0

; 73   : 
; 74   : 		D3DXVECTOR3 v3NewPosition=v3EndPosition;// = rate*(v3EndPosition - v3StartPosition) + v3StartPosition;

  0017e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00181	89 45 f4	 mov	 DWORD PTR _v3NewPosition$6[ebp+8], eax

; 75   : 		v3NewPosition.z += 100-100*rate*(3*rate-2);//-100*(rate-1)*(3*rate+2);
; 76   : 
; 77   : 		D3DXQUATERNION q;
; 78   : 		D3DXQuaternionRotationAxis(&q, &v3RotationAxis, etime * 0.03f *(-1+rate*(3*rate-2)));

  00184	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  00187	66 0f 6e c6	 movd	 xmm0, esi
  0018b	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0018f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00192	f2 0f 58 04 f5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[esi*8]
  0019b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0019f	f3 0f 5e d0	 divss	 xmm2, xmm0
  001a3	f3 0f 7e 47 08	 movq	 xmm0, QWORD PTR [edi+8]
  001a8	66 0f d6 45 ec	 movq	 QWORD PTR _v3NewPosition$6[ebp], xmm0
  001ad	0f 28 c2	 movaps	 xmm0, xmm2
  001b0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  001b8	f3 0f 11 55 fc	 movss	 DWORD PTR _rate$1$[ebp], xmm2
  001bd	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  001c5	0f 28 c8	 movaps	 xmm1, xmm0
  001c8	f3 0f 11 45 f8	 movss	 DWORD PTR tv456[ebp], xmm0
  001cd	66 0f 6e c1	 movd	 xmm0, ecx
  001d1	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001d5	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001d8	51		 push	 ecx
  001d9	f3 0f 59 ca	 mulss	 xmm1, xmm2
  001dd	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  001e6	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  001ee	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001f2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3cf5c28f
  001fa	f3 0f 59 c8	 mulss	 xmm1, xmm0
  001fe	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00203	50		 push	 eax
  00204	8d 45 c8	 lea	 eax, DWORD PTR _q$3[ebp]
  00207	50		 push	 eax
  00208	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 79   : 		//ThingInstance.SetRotation(rEnd.y + etime*rStart.y, rEnd.x + etime*rStart.x, rEnd.z + etime*rStart.z);
; 80   : 		D3DXQuaternionMultiply(&q,&qEnd,&q);

  0020d	8d 45 c8	 lea	 eax, DWORD PTR _q$3[ebp]
  00210	50		 push	 eax
  00211	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  00214	50		 push	 eax
  00215	8d 45 c8	 lea	 eax, DWORD PTR _q$3[ebp]
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 81   : 
; 82   : 		ThingInstance.SetRotationQuaternion(q);

  0021e	8d 45 c8	 lea	 eax, DWORD PTR _q$3[ebp]
  00221	8d 77 3c	 lea	 esi, DWORD PTR [edi+60]
  00224	50		 push	 eax
  00225	8b ce		 mov	 ecx, esi
  00227	e8 00 00 00 00	 call	 ?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z ; CGraphicObjectInstance::SetRotationQuaternion

; 83   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  0022c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00234	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00239	0f 57 c1	 xorps	 xmm0, xmm1
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 670  :     w = fw;

  0023c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _qAdjust$4[ebp+12], 0
  00243	f3 0f 11 45 d8	 movss	 DWORD PTR _qAdjust$4[ebp], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 83   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00248	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]
  0024d	0f 57 c1	 xorps	 xmm0, xmm1
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 668  :     y = fy;

  00250	f3 0f 11 45 dc	 movss	 DWORD PTR _qAdjust$4[ebp+4], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 83   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00255	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  0025a	0f 57 c1	 xorps	 xmm0, xmm1
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 669  :     z = fz;

  0025d	f3 0f 11 45 e0	 movss	 DWORD PTR _qAdjust$4[ebp+8], xmm0

; 1616 :     pOut->x = -pQ->x;

  00262	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _q$3[ebp]
  00267	0f 57 c1	 xorps	 xmm0, xmm1
  0026a	f3 0f 11 45 b8	 movss	 DWORD PTR _qc$1[ebp], xmm0

; 1617 :     pOut->y = -pQ->y;

  0026f	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _q$3[ebp+4]
  00274	0f 57 c1	 xorps	 xmm0, xmm1
  00277	f3 0f 11 45 bc	 movss	 DWORD PTR _qc$1[ebp+4], xmm0

; 1618 :     pOut->z = -pQ->z;

  0027c	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _q$3[ebp+8]
  00281	0f 57 c1	 xorps	 xmm0, xmm1
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 86   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&q);

  00284	8d 45 c8	 lea	 eax, DWORD PTR _q$3[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1618 :     pOut->z = -pQ->z;

  00287	f3 0f 11 45 c0	 movss	 DWORD PTR _qc$1[ebp+8], xmm0

; 1619 :     pOut->w =  pQ->w;

  0028c	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _q$3[ebp+12]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 86   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&q);

  00291	50		 push	 eax
  00292	8d 45 d8	 lea	 eax, DWORD PTR _qAdjust$4[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 1619 :     pOut->w =  pQ->w;

  00295	f3 0f 11 45 c4	 movss	 DWORD PTR _qc$1[ebp+12], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 86   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&q);

  0029a	50		 push	 eax
  0029b	50		 push	 eax
  0029c	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 87   : 		D3DXQuaternionMultiply(&qAdjust,&qc,&qAdjust);

  002a1	8d 45 d8	 lea	 eax, DWORD PTR _qAdjust$4[ebp]
  002a4	50		 push	 eax
  002a5	8d 45 b8	 lea	 eax, DWORD PTR _qc$1[ebp]
  002a8	50		 push	 eax
  002a9	8d 45 d8	 lea	 eax, DWORD PTR _qAdjust$4[ebp]
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
  002b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000

; 88   : 		
; 89   : 		ThingInstance.SetPosition(v3NewPosition.x+qAdjust.x, 

  002ba	83 ec 0c	 sub	 esp, 12			; 0000000cH
  002bd	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _rate$1$[ebp]
  002c2	8b ce		 mov	 ecx, esi
  002c4	f3 0f 59 c8	 mulss	 xmm1, xmm0
  002c8	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR tv456[ebp]
  002cd	f3 0f 5c c1	 subss	 xmm0, xmm1
  002d1	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _v3NewPosition$6[ebp+8]
  002d6	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _qAdjust$4[ebp+8]
  002db	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002e1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _qAdjust$4[ebp+4]
  002e6	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _v3NewPosition$6[ebp+4]
  002eb	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002f1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _qAdjust$4[ebp]
  002f6	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _v3NewPosition$6[ebp]
  002fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00300	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition
$LN4@Update:

; 90   : 			v3NewPosition.y+qAdjust.y,
; 91   : 			v3NewPosition.z+qAdjust.z);
; 92   : 		
; 93   : 		/*D3DXVECTOR3 v3Adjust = -v3Center;
; 94   : 		D3DXMATRIX mat;
; 95   : 		D3DXMatrixRotationYawPitchRoll(&mat, 
; 96   : 		D3DXToRadian(rEnd.y + etime*rStart.y), 
; 97   : 		D3DXToRadian(rEnd.x + etime*rStart.x), 
; 98   : 		D3DXToRadian(rEnd.z + etime*rStart.z));
; 99   : 						
; 100  : 		D3DXVec3TransformCoord(&v3Adjust,&v3Adjust,&mat);
; 101  : 		//Tracef("%f %f %f\n",v3Adjust.x,v3Adjust.y,v3Adjust.z);
; 102  : 		v3NewPosition += v3Adjust;
; 103  : 		ThingInstance.SetPosition(v3NewPosition.x, v3NewPosition.y, v3NewPosition.z);*/
; 104  : 	}
; 105  : 	ThingInstance.Transform();

  00305	8b ce		 mov	 ecx, esi
  00307	e8 00 00 00 00	 call	 ?Transform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Transform

; 106  : 	ThingInstance.Deform();				

  0030c	8b ce		 mov	 ecx, esi
  0030e	e8 00 00 00 00	 call	 ?Deform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Deform

; 107  : 	return !bAnimEnded;

  00313	80 bf 24 02 00
	00 00		 cmp	 BYTE PTR [edi+548], 0

; 108  : }

  0031a	5f		 pop	 edi
  0031b	0f 94 c0	 sete	 al
  0031e	5e		 pop	 esi
  0031f	8b e5		 mov	 esp, ebp
  00321	5d		 pop	 ebp
  00322	8b e3		 mov	 esp, ebx
  00324	5b		 pop	 ebx
  00325	c3		 ret	 0
?Update@SGroundItemInstance@CPythonItem@@QAE_NXZ ENDP	; CPythonItem::SGroundItemInstance::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?SetUseSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_eItemType$ = 8						; size = 4
_c_rstFileName$ = 12					; size = 4
?SetUseSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPythonItem::SetUseSoundFileName, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  : 	if (eItemType>=USESOUND_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _eItemType$[ebp]
  00006	83 f8 08	 cmp	 eax, 8
  00009	73 27		 jae	 SHORT $LN4@SetUseSoun

; 141  : 	m_astUseSoundFileName[eItemType]=c_rstFileName;	

  0000b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0000e	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1395 :         if (this == _STD addressof(_Right)) {

  00011	8b 45 0c	 mov	 eax, DWORD PTR _c_rstFileName$[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 141  : 	m_astUseSoundFileName[eItemType]=c_rstFileName;	

  00014	83 c1 40	 add	 ecx, 64			; 00000040H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1395 :         if (this == _STD addressof(_Right)) {

  00017	3b c8		 cmp	 ecx, eax
  00019	74 17		 je	 SHORT $LN4@SetUseSoun

; 453  :         return _Myres > _Small_string_capacity;

  0001b	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 1434 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0001f	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 445  :         if (_Large_mode_engaged()) {

  00022	76 02		 jbe	 SHORT $LN8@SetUseSoun

; 446  :             _Result = _Unfancy(_Bx._Ptr);

  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@SetUseSoun:

; 1434 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00026	89 55 0c	 mov	 DWORD PTR _c_rstFileName$[ebp], edx
  00029	89 45 08	 mov	 DWORD PTR _eItemType$[ebp], eax
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 142  : }

  0002c	5d		 pop	 ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1434 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002d	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@SetUseSoun:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 142  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?SetUseSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPythonItem::SetUseSoundFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?SetDropSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_eItemType$ = 8						; size = 4
_c_rstFileName$ = 12					; size = 4
?SetDropSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPythonItem::SetDropSoundFileName, COMDAT
; _this$dead$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 146  : 	if (eItemType>=DROPSOUND_NUM)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _eItemType$[ebp]
  00007	83 ff 05	 cmp	 edi, 5
  0000a	73 3e		 jae	 SHORT $LN14@SetDropSou
  0000c	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 444  :         const value_type* _Result = _Bx._Buf;

  0000d	8b 75 0c	 mov	 esi, DWORD PTR _c_rstFileName$[ebp]
  00010	8b c6		 mov	 eax, esi

; 453  :         return _Myres > _Small_string_capacity;

  00012	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 445  :         if (_Large_mode_engaged()) {

  00016	76 02		 jbe	 SHORT $LN25@SetDropSou

; 446  :             _Result = _Unfancy(_Bx._Ptr);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
$LN25@SetDropSou:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 149  : 	Tracenf("SetDropSoundFile %d : %s", eItemType, c_rstFileName.c_str());

  0001a	50		 push	 eax
  0001b	57		 push	 edi
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CMCGILDJ@SetDropSoundFile?5?$CFd?5?3?5?$CFs@
  00021	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf

; 150  : 
; 151  : 	SGroundItemInstance::ms_astDropSoundFileName[eItemType]=c_rstFileName;

  00026	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1395 :         if (this == _STD addressof(_Right)) {

  00033	3b ce		 cmp	 ecx, esi
  00035	74 12		 je	 SHORT $LN30@SetDropSou

; 453  :         return _Myres > _Small_string_capacity;

  00037	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 1434 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0003b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 445  :         if (_Large_mode_engaged()) {

  0003e	76 02		 jbe	 SHORT $LN18@SetDropSou

; 446  :             _Result = _Unfancy(_Bx._Ptr);

  00040	8b 36		 mov	 esi, DWORD PTR [esi]
$LN18@SetDropSou:

; 1434 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00042	50		 push	 eax
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN30@SetDropSou:
  00049	5e		 pop	 esi
$LN14@SetDropSou:
  0004a	5f		 pop	 edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 152  : }

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?SetDropSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPythonItem::SetDropSoundFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?PlayUseSound@CPythonItem@@QAEXK@Z
_TEXT	SEGMENT
_pkItemData$ = -4					; size = 4
_dwItemID$ = 8						; size = 4
?PlayUseSound@CPythonItem@@QAEXK@Z PROC			; CPythonItem::PlayUseSound, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 156  : 	//CItemManager& rkItemMgr=CItemManager::Instance();
; 157  : 
; 158  : 	CItemData* pkItemData;
; 159  : 	if (!CItemManager::Instance().GetItemDataPointer(dwItemID, &pkItemData))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pkItemData$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A ; CSingleton<CItemManager>::ms_singleton
  00010	50		 push	 eax
  00011	ff 75 08	 push	 DWORD PTR _dwItemID$[ebp]
  00014	e8 00 00 00 00	 call	 ?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z ; CItemManager::GetItemDataPointer
  00019	85 c0		 test	 eax, eax
  0001b	74 2f		 je	 SHORT $LN1@PlayUseSou

; 160  : 		return;
; 161  : 
; 162  : 	DWORD eItemType=__GetUseSoundType(*pkItemData);

  0001d	ff 75 fc	 push	 DWORD PTR _pkItemData$[ebp]
  00020	e8 00 00 00 00	 call	 ?__GetUseSoundType@CPythonItem@@IAEKABVCItemData@@@Z ; CPythonItem::__GetUseSoundType

; 163  : 	if (eItemType==USESOUND_NONE)

  00025	85 c0		 test	 eax, eax
  00027	74 23		 je	 SHORT $LN1@PlayUseSou

; 164  : 		return;
; 165  : 	if (eItemType>=USESOUND_NUM)

  00029	83 f8 08	 cmp	 eax, 8
  0002c	73 1e		 jae	 SHORT $LN1@PlayUseSou

; 168  : 	CSoundManager::Instance().PlaySound2D(m_astUseSoundFileName[eItemType].c_str());

  0002e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2356 :         return _Mypair._Myval2._Myptr();

  00031	8d 40 08	 lea	 eax, DWORD PTR [eax+8]

; 453  :         return _Myres > _Small_string_capacity;

  00034	83 7c c6 14 0f	 cmp	 DWORD PTR [esi+eax*8+20], 15 ; 0000000fH

; 2356 :         return _Mypair._Myval2._Myptr();

  00039	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]

; 445  :         if (_Large_mode_engaged()) {

  0003c	76 02		 jbe	 SHORT $LN10@PlayUseSou

; 446  :             _Result = _Unfancy(_Bx._Ptr);

  0003e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN10@PlayUseSou:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 168  : 	CSoundManager::Instance().PlaySound2D(m_astUseSoundFileName[eItemType].c_str());

  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?PlaySound2D@CSoundManager@@QAEXPBD@Z ; CSoundManager::PlaySound2D
$LN1@PlayUseSou:
  0004c	5e		 pop	 esi

; 169  : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?PlayUseSound@CPythonItem@@QAEXK@Z ENDP			; CPythonItem::PlayUseSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?PlayDropSound@CPythonItem@@QAEXK@Z
_TEXT	SEGMENT
_pkItemData$ = -4					; size = 4
_dwItemID$ = 8						; size = 4
?PlayDropSound@CPythonItem@@QAEXK@Z PROC		; CPythonItem::PlayDropSound, COMDAT
; _this$dead$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 174  : 	//CItemManager& rkItemMgr=CItemManager::Instance();
; 175  : 
; 176  : 	CItemData* pkItemData;
; 177  : 	if (!CItemManager::Instance().GetItemDataPointer(dwItemID, &pkItemData))

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A ; CSingleton<CItemManager>::ms_singleton
  0000a	8d 45 fc	 lea	 eax, DWORD PTR _pkItemData$[ebp]
  0000d	50		 push	 eax
  0000e	ff 75 08	 push	 DWORD PTR _dwItemID$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z ; CItemManager::GetItemDataPointer
  00016	85 c0		 test	 eax, eax
  00018	74 2f		 je	 SHORT $LN1@PlayDropSo

; 178  : 		return;
; 179  : 
; 180  : 	DWORD eItemType=__GetDropSoundType(*pkItemData);

  0001a	ff 75 fc	 push	 DWORD PTR _pkItemData$[ebp]
  0001d	e8 00 00 00 00	 call	 ?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z ; CPythonItem::__GetDropSoundType

; 181  : 	if (eItemType>=DROPSOUND_NUM)

  00022	83 f8 05	 cmp	 eax, 5
  00025	73 22		 jae	 SHORT $LN1@PlayDropSo

; 184  : 	CSoundManager::Instance().PlaySound2D(SGroundItemInstance::ms_astDropSoundFileName[eItemType].c_str());

  00027	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0002a	83 3c c5 14 00
	00 00 0f	 cmp	 DWORD PTR ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8+20], 15 ; 0000000fH

; 2356 :         return _Mypair._Myval2._Myptr();

  00032	8d 04 c5 00 00
	00 00		 lea	 eax, DWORD PTR ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]

; 445  :         if (_Large_mode_engaged()) {

  00039	76 02		 jbe	 SHORT $LN9@PlayDropSo

; 446  :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@PlayDropSo:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 184  : 	CSoundManager::Instance().PlaySound2D(SGroundItemInstance::ms_astDropSoundFileName[eItemType].c_str());

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?PlaySound2D@CSoundManager@@QAEXPBD@Z ; CSoundManager::PlaySound2D
$LN1@PlayDropSo:

; 185  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?PlayDropSound@CPythonItem@@QAEXK@Z ENDP		; CPythonItem::PlayDropSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?PlayUsePotionSound@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
?PlayUsePotionSound@CPythonItem@@QAEXXZ PROC		; CPythonItem::PlayUsePotionSound, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2356 :         return _Mypair._Myval2._Myptr();

  00000	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H

; 453  :         return _Myres > _Small_string_capacity;

  00006	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 445  :         if (_Large_mode_engaged()) {

  0000a	76 02		 jbe	 SHORT $LN7@PlayUsePot

; 446  :             _Result = _Unfancy(_Bx._Ptr);

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN7@PlayUsePot:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 189  : 	CSoundManager::Instance().PlaySound2D(m_astUseSoundFileName[USESOUND_POTION].c_str());

  0000e	51		 push	 ecx
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  00015	e8 00 00 00 00	 call	 ?PlaySound2D@CSoundManager@@QAEXPBD@Z ; CSoundManager::PlaySound2D

; 190  : }

  0001a	c3		 ret	 0
?PlayUsePotionSound@CPythonItem@@QAEXXZ ENDP		; CPythonItem::PlayUsePotionSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z
_TEXT	SEGMENT
_c_rkItemData$ = 8					; size = 4
?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z PROC ; CPythonItem::__GetDropSoundType, COMDAT
; _this$dead$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 194  : 	switch (c_rkItemData.GetType())

  00004	8b 75 08	 mov	 esi, DWORD PTR _c_rkItemData$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  0000e	0f b6 c0	 movzx	 eax, al
  00011	83 e8 01	 sub	 eax, 1
  00014	74 32		 je	 SHORT $LN8@GetDropSou
  00016	83 e8 01	 sub	 eax, 1
  00019	75 48		 jne	 SHORT $LN10@GetDropSou

; 207  : 					break;
; 208  : 			}
; 209  : 			break;
; 210  : 		case CItemData::ITEM_TYPE_ARMOR:
; 211  : 			switch (c_rkItemData.GetSubType())

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  00022	0f b6 c0	 movzx	 eax, al
  00025	83 e8 00	 sub	 eax, 0
  00028	74 14		 je	 SHORT $LN15@GetDropSou
  0002a	83 e8 05	 sub	 eax, 5
  0002d	74 05		 je	 SHORT $LN13@GetDropSou
  0002f	83 e8 01	 sub	 eax, 1
  00032	75 2f		 jne	 SHORT $LN10@GetDropSou
$LN13@GetDropSou:

; 212  : 			{
; 213  : 				case CItemData::ARMOR_NECK:
; 214  : 				case CItemData::ARMOR_EAR:
; 215  : 					return DROPSOUND_ACCESSORY;

  00034	b8 04 00 00 00	 mov	 eax, 4
  00039	5e		 pop	 esi

; 219  : 				default:
; 220  : 					return DROPSOUND_DEFAULT;		
; 221  : 					break;
; 222  : 			}
; 223  : 			break;	
; 224  : 		default:
; 225  : 			return DROPSOUND_DEFAULT;
; 226  : 			break;
; 227  : 	}
; 228  : 
; 229  : 	return DROPSOUND_DEFAULT;
; 230  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
$LN15@GetDropSou:

; 216  : 					break;
; 217  : 				case CItemData::ARMOR_BODY:
; 218  : 					return DROPSOUND_ARMOR;

  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	5e		 pop	 esi

; 219  : 				default:
; 220  : 					return DROPSOUND_DEFAULT;		
; 221  : 					break;
; 222  : 			}
; 223  : 			break;	
; 224  : 		default:
; 225  : 			return DROPSOUND_DEFAULT;
; 226  : 			break;
; 227  : 	}
; 228  : 
; 229  : 	return DROPSOUND_DEFAULT;
; 230  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN8@GetDropSou:

; 195  : 	{
; 196  : 		case CItemData::ITEM_TYPE_WEAPON:
; 197  : 			switch (c_rkItemData.GetWeaponType())

  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
  0004f	83 e8 02	 sub	 eax, 2
  00052	74 16		 je	 SHORT $LN9@GetDropSou
  00054	83 e8 04	 sub	 eax, 4
  00057	74 0a		 je	 SHORT $LN10@GetDropSou

; 204  : 					break;
; 205  : 				default:
; 206  : 					return DROPSOUND_WEAPON;

  00059	b8 02 00 00 00	 mov	 eax, 2
  0005e	5e		 pop	 esi

; 219  : 				default:
; 220  : 					return DROPSOUND_DEFAULT;		
; 221  : 					break;
; 222  : 			}
; 223  : 			break;	
; 224  : 		default:
; 225  : 			return DROPSOUND_DEFAULT;
; 226  : 			break;
; 227  : 	}
; 228  : 
; 229  : 	return DROPSOUND_DEFAULT;
; 230  : }

  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN10@GetDropSou:

; 201  : 					break;
; 202  : 				case CItemData::WEAPON_ARROW:
; 203  : 					return DROPSOUND_DEFAULT;

  00063	33 c0		 xor	 eax, eax
  00065	5e		 pop	 esi

; 219  : 				default:
; 220  : 					return DROPSOUND_DEFAULT;		
; 221  : 					break;
; 222  : 			}
; 223  : 			break;	
; 224  : 		default:
; 225  : 			return DROPSOUND_DEFAULT;
; 226  : 			break;
; 227  : 	}
; 228  : 
; 229  : 	return DROPSOUND_DEFAULT;
; 230  : }

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
$LN9@GetDropSou:

; 198  : 			{
; 199  : 				case CItemData::WEAPON_BOW:
; 200  : 					return DROPSOUND_BOW;

  0006a	b8 03 00 00 00	 mov	 eax, 3
  0006f	5e		 pop	 esi

; 219  : 				default:
; 220  : 					return DROPSOUND_DEFAULT;		
; 221  : 					break;
; 222  : 			}
; 223  : 			break;	
; 224  : 		default:
; 225  : 			return DROPSOUND_DEFAULT;
; 226  : 			break;
; 227  : 	}
; 228  : 
; 229  : 	return DROPSOUND_DEFAULT;
; 230  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z ENDP ; CPythonItem::__GetDropSoundType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?__GetUseSoundType@CPythonItem@@IAEKABVCItemData@@@Z
_TEXT	SEGMENT
_c_rkItemData$ = 8					; size = 4
?__GetUseSoundType@CPythonItem@@IAEKABVCItemData@@@Z PROC ; CPythonItem::__GetUseSoundType, COMDAT
; _this$dead$ = ecx

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 235  : 	switch (c_rkItemData.GetType())

  00004	8b 75 08	 mov	 esi, DWORD PTR _c_rkItemData$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  0000e	0f b6 c0	 movzx	 eax, al
  00011	83 e8 01	 sub	 eax, 1
  00014	74 6b		 je	 SHORT $LN10@GetUseSoun
  00016	83 e8 01	 sub	 eax, 1
  00019	74 39		 je	 SHORT $LN14@GetUseSoun
  0001b	83 e8 01	 sub	 eax, 1
  0001e	75 7c		 jne	 SHORT $LN12@GetUseSoun

; 260  : 				default:
; 261  : 					return USESOUND_DEFAULT;		
; 262  : 					break;
; 263  : 			}
; 264  : 			break;
; 265  : 		case CItemData::ITEM_TYPE_USE:
; 266  : 			switch (c_rkItemData.GetSubType())

  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  00027	0f b6 c0	 movzx	 eax, al
  0002a	83 e8 00	 sub	 eax, 0
  0002d	74 1e		 je	 SHORT $LN21@GetUseSoun
  0002f	83 e8 01	 sub	 eax, 1
  00032	74 0f		 je	 SHORT $LN22@GetUseSoun
  00034	83 e8 06	 sub	 eax, 6
  00037	75 63		 jne	 SHORT $LN12@GetUseSoun

; 267  : 			{
; 268  : 				case CItemData::USE_ABILITY_UP:
; 269  : 					return USESOUND_POTION;

  00039	b8 06 00 00 00	 mov	 eax, 6
  0003e	5e		 pop	 esi

; 276  : 					break;
; 277  : 				default:
; 278  : 					return USESOUND_DEFAULT;		
; 279  : 					break;
; 280  : 			}
; 281  : 			break;			
; 282  : 		default:
; 283  : 			return USESOUND_DEFAULT;
; 284  : 			break;
; 285  : 	}
; 286  : 
; 287  : 	return USESOUND_DEFAULT;
; 288  : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
$LN22@GetUseSoun:

; 273  : 					break;
; 274  : 				case CItemData::USE_TALISMAN:
; 275  : 					return USESOUND_PORTAL;

  00043	b8 07 00 00 00	 mov	 eax, 7
  00048	5e		 pop	 esi

; 276  : 					break;
; 277  : 				default:
; 278  : 					return USESOUND_DEFAULT;		
; 279  : 					break;
; 280  : 			}
; 281  : 			break;			
; 282  : 		default:
; 283  : 			return USESOUND_DEFAULT;
; 284  : 			break;
; 285  : 	}
; 286  : 
; 287  : 	return USESOUND_DEFAULT;
; 288  : }

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN21@GetUseSoun:

; 270  : 					break;
; 271  : 				case CItemData::USE_POTION:
; 272  : 					return USESOUND_NONE;

  0004d	33 c0		 xor	 eax, eax
  0004f	5e		 pop	 esi

; 276  : 					break;
; 277  : 				default:
; 278  : 					return USESOUND_DEFAULT;		
; 279  : 					break;
; 280  : 			}
; 281  : 			break;			
; 282  : 		default:
; 283  : 			return USESOUND_DEFAULT;
; 284  : 			break;
; 285  : 	}
; 286  : 
; 287  : 	return USESOUND_DEFAULT;
; 288  : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
$LN14@GetUseSoun:

; 248  : 					break;
; 249  : 			}
; 250  : 			break;
; 251  : 		case CItemData::ITEM_TYPE_ARMOR:
; 252  : 			switch (c_rkItemData.GetSubType())

  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  0005b	0f b6 c0	 movzx	 eax, al
  0005e	83 e8 00	 sub	 eax, 0
  00061	74 14		 je	 SHORT $LN17@GetUseSoun
  00063	83 e8 05	 sub	 eax, 5
  00066	74 05		 je	 SHORT $LN15@GetUseSoun
  00068	83 e8 01	 sub	 eax, 1
  0006b	75 2f		 jne	 SHORT $LN12@GetUseSoun
$LN15@GetUseSoun:

; 253  : 			{
; 254  : 				case CItemData::ARMOR_NECK:
; 255  : 				case CItemData::ARMOR_EAR:
; 256  : 					return USESOUND_ACCESSORY;

  0006d	b8 05 00 00 00	 mov	 eax, 5
  00072	5e		 pop	 esi

; 276  : 					break;
; 277  : 				default:
; 278  : 					return USESOUND_DEFAULT;		
; 279  : 					break;
; 280  : 			}
; 281  : 			break;			
; 282  : 		default:
; 283  : 			return USESOUND_DEFAULT;
; 284  : 			break;
; 285  : 	}
; 286  : 
; 287  : 	return USESOUND_DEFAULT;
; 288  : }

  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
$LN17@GetUseSoun:

; 257  : 					break;
; 258  : 				case CItemData::ARMOR_BODY:
; 259  : 					return USESOUND_ARMOR;

  00077	b8 02 00 00 00	 mov	 eax, 2
  0007c	5e		 pop	 esi

; 276  : 					break;
; 277  : 				default:
; 278  : 					return USESOUND_DEFAULT;		
; 279  : 					break;
; 280  : 			}
; 281  : 			break;			
; 282  : 		default:
; 283  : 			return USESOUND_DEFAULT;
; 284  : 			break;
; 285  : 	}
; 286  : 
; 287  : 	return USESOUND_DEFAULT;
; 288  : }

  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
$LN10@GetUseSoun:

; 236  : 	{
; 237  : 		case CItemData::ITEM_TYPE_WEAPON:
; 238  : 			switch (c_rkItemData.GetWeaponType())

  00081	8b ce		 mov	 ecx, esi
  00083	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
  00088	83 e8 02	 sub	 eax, 2
  0008b	74 19		 je	 SHORT $LN11@GetUseSoun
  0008d	83 e8 04	 sub	 eax, 4
  00090	74 0a		 je	 SHORT $LN12@GetUseSoun

; 245  : 					break;
; 246  : 				default:
; 247  : 					return USESOUND_WEAPON;

  00092	b8 03 00 00 00	 mov	 eax, 3
  00097	5e		 pop	 esi

; 276  : 					break;
; 277  : 				default:
; 278  : 					return USESOUND_DEFAULT;		
; 279  : 					break;
; 280  : 			}
; 281  : 			break;			
; 282  : 		default:
; 283  : 			return USESOUND_DEFAULT;
; 284  : 			break;
; 285  : 	}
; 286  : 
; 287  : 	return USESOUND_DEFAULT;
; 288  : }

  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
$LN12@GetUseSoun:

; 242  : 					break;
; 243  : 				case CItemData::WEAPON_ARROW:
; 244  : 					return USESOUND_DEFAULT;

  0009c	b8 01 00 00 00	 mov	 eax, 1
  000a1	5e		 pop	 esi

; 276  : 					break;
; 277  : 				default:
; 278  : 					return USESOUND_DEFAULT;		
; 279  : 					break;
; 280  : 			}
; 281  : 			break;			
; 282  : 		default:
; 283  : 			return USESOUND_DEFAULT;
; 284  : 			break;
; 285  : 	}
; 286  : 
; 287  : 	return USESOUND_DEFAULT;
; 288  : }

  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
$LN11@GetUseSoun:

; 239  : 			{
; 240  : 				case CItemData::WEAPON_BOW:
; 241  : 					return USESOUND_BOW;

  000a6	b8 04 00 00 00	 mov	 eax, 4
  000ab	5e		 pop	 esi

; 276  : 					break;
; 277  : 				default:
; 278  : 					return USESOUND_DEFAULT;		
; 279  : 					break;
; 280  : 			}
; 281  : 			break;			
; 282  : 		default:
; 283  : 			return USESOUND_DEFAULT;
; 284  : 			break;
; 285  : 	}
; 286  : 
; 287  : 	return USESOUND_DEFAULT;
; 288  : }

  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
?__GetUseSoundType@CPythonItem@@IAEKABVCItemData@@@Z ENDP ; CPythonItem::__GetUseSoundType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?CreateItem@CPythonItem@@QAEXKKMMM_N@Z
_TEXT	SEGMENT
$T3 = -256						; size = 16
$T4 = -256						; size = 16
_q$5 = -240						; size = 16
tv1979 = -240						; size = 16
$T6 = -212						; size = 8
$T7 = -212						; size = 8
_this$GSCopy$1$ = -208					; size = 4
$T8 = -204						; size = 4
_pItemData$ = -200					; size = 4
tv1788 = -196						; size = 4
_rot$9 = -196						; size = 4
_y$GSCopy$1$ = -196					; size = 4
_z$GSCopy$ = -192					; size = 4
$T10 = -192						; size = 4
_pkNewData$11 = -192					; size = 4
$T12 = -192						; size = 4
__Scary$1$ = -192					; size = 4
tv2324 = -192						; size = 4
tv1799 = -192						; size = 4
tv1789 = -192						; size = 4
tv1825 = -188						; size = 4
tv1846 = -188						; size = 4
tv1874 = -188						; size = 4
tv2084 = -188						; size = 4
tv2128 = -188						; size = 4
tv2171 = -188						; size = 4
tv2321 = -188						; size = 4
_pItemModel$1$ = -188					; size = 4
_rot$1$ = -188						; size = 4
$T13 = -188						; size = 1
tv1800 = -188						; size = 4
tv1812 = -188						; size = 4
_mat$14 = -184						; size = 64
_normal$ = -116						; size = 12
_vMax$15 = -104						; size = 12
$T16 = -92						; size = 12
_v3Adjust$17 = -92					; size = 12
$T18 = -80						; size = 12
_vMin$19 = -80						; size = 12
$T20 = -68						; size = 12
$T21 = -68						; size = 12
$T22 = -68						; size = 12
$T23 = -68						; size = 12
$T24 = -56						; size = 12
__Loc$25 = -56						; size = 12
$T26 = -56						; size = 12
$T27 = -56						; size = 12
$T28 = -56						; size = 12
$T29 = -56						; size = 12
$T30 = -56						; size = 12
$T31 = -56						; size = 12
_f$32 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_dwVirtualID$ = 8					; size = 4
_dwVirtualNumber$ = 12					; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_bDrop$ = 24						; size = 1
?CreateItem@CPythonItem@@QAEXKKMMM_N@Z PROC		; CPythonItem::CreateItem, COMDAT
; _this$ = ecx
; _x$ = xmm3s

; 291  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	f3 0f 11 9d 10
	ff ff ff	 movss	 DWORD PTR tv1979[ebp], xmm3
  00049	8b f1		 mov	 esi, ecx
  0004b	89 b5 30 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00051	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR _y$[ebx]

; 292  : 	//CItemManager& rkItemMgr=CItemManager::Instance();
; 293  : 
; 294  : 	CItemData * pItemData;
; 295  : 	if (!CItemManager::Instance().GetItemDataPointer(dwVirtualNumber, &pItemData))

  00056	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _pItemData$[ebp]
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A ; CSingleton<CItemManager>::ms_singleton
  00062	50		 push	 eax
  00063	ff 73 0c	 push	 DWORD PTR _dwVirtualNumber$[ebx]
  00066	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _y$GSCopy$1$[ebp], xmm0
  0006e	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR _z$[ebx]
  00073	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR $T8[ebp], xmm0
  0007b	e8 00 00 00 00	 call	 ?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z ; CItemManager::GetItemDataPointer
  00080	85 c0		 test	 eax, eax
  00082	0f 84 45 08 00
	00		 je	 $LN1@CreateItem

; 296  : 		return;
; 297  : 
; 298  : 	CGraphicThing* pItemModel = pItemData->GetDropModelThing();

  00088	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  0008e	e8 00 00 00 00	 call	 ?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ; CItemData::GetDropModelThing
  00093	89 85 44 ff ff
	ff		 mov	 DWORD PTR _pItemModel$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1910 :         return _My_data._Myfirst == _My_data._Mylast;

  00099	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0009c	39 46 1c	 cmp	 DWORD PTR [esi+28], eax
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  0009f	0f 85 84 00 00
	00		 jne	 $LN23@CreateItem

; 66   : 				T* pkNewData=new T;

  000a5	68 44 02 00 00	 push	 580			; 00000244H
  000aa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000af	8b f8		 mov	 edi, eax
  000b1	83 c4 04	 add	 esp, 4
  000b4	89 bd 40 ff ff
	ff		 mov	 DWORD PTR $T10[ebp], edi
  000ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h

; 71   : 			SGroundItemInstance() {}

  000c1	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  000c4	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7SGroundItemInstance@CPythonItem@@6B@
  000ca	e8 00 00 00 00	 call	 ??0CGraphicThingInstance@@QAE@XZ ; CGraphicThingInstance::CGraphicThingInstance
  000cf	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  000d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000d9	0f 11 87 2c 02
	00 00		 movups	 XMMWORD PTR [edi+556], xmm0

; 860  :         _My_data._Mysize = 0;

  000e0	c7 87 3c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+572], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 67   : 				m_kVct_pkData.push_back(pkNewData);

  000ea	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 861  :         _My_data._Myres  = _Small_string_capacity;

  000ed	c7 87 40 02 00
	00 0f 00 00 00	 mov	 DWORD PTR [edi+576], 15	; 0000000fH

; 862  :         _My_data._Activate_SSO_buffer();
; 863  : 
; 864  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 865  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000f7	c6 87 2c 02 00
	00 00		 mov	 BYTE PTR [edi+556], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  000fe	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  00101	89 bd 40 ff ff
	ff		 mov	 DWORD PTR _pkNewData$11[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00107	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0010a	74 0b		 je	 SHORT $LN58@CreateItem

; 860  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0010c	89 38		 mov	 DWORD PTR [eax], edi

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  0010e	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  00112	ff 46 2c	 inc	 DWORD PTR [esi+44]

; 69   : 				return pkNewData;

  00115	eb 1b		 jmp	 SHORT $LN22@CreateItem
$LN58@CreateItem:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00117	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR _pkNewData$11[ebp]
  0011d	52		 push	 edx
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  00124	ff 46 2c	 inc	 DWORD PTR [esi+44]

; 69   : 				return pkNewData;

  00127	eb 09		 jmp	 SHORT $LN22@CreateItem
$LN23@CreateItem:

; 70   : 			}
; 71   : 
; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  00129	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1759 :         --_Mylast;

  0012c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012f	89 46 20	 mov	 DWORD PTR [esi+32], eax
$LN22@CreateItem:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 305  : 	if (bDrop)

  00132	80 7b 18 00	 cmp	 BYTE PTR _bDrop$[ebx], 0
  00136	8b 43 0c	 mov	 eax, DWORD PTR _dwVirtualNumber$[ebx]
  00139	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0013c	74 71		 je	 SHORT $LN3@CreateItem

; 306  : 	{
; 307  : 		z = CPythonBackground::Instance().GetHeight(x, y) + 10.0f;

  0013e	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$GSCopy$1$[ebp]
  00146	83 ec 08	 sub	 esp, 8
  00149	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonBackground@@@@0PAVCPythonBackground@@A ; CSingleton<CPythonBackground>::ms_singleton
  0014f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00155	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv1979[ebp]
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	e8 00 00 00 00	 call	 ?GetHeight@CMapManager@@QAEMMM@Z ; CMapManager::GetHeight
  00166	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41200000

; 308  : 
; 309  : 		if (pItemData->GetType()==CItemData::ITEM_TYPE_WEAPON && 

  0016c	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  00172	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR _z$GSCopy$[ebp]
  00178	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  0017d	3c 01		 cmp	 al, 1
  0017f	75 1a		 jne	 SHORT $LN6@CreateItem
  00181	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  00187	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
  0018c	85 c0		 test	 eax, eax
  0018e	74 0b		 je	 SHORT $LN6@CreateItem
  00190	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  00196	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
$LN6@CreateItem:

; 310  : 			(pItemData->GetWeaponType() == CItemData::WEAPON_SWORD || 
; 311  : 			 pItemData->GetWeaponType() == CItemData::WEAPON_ARROW))
; 312  : 			bStabGround = true;
; 313  : 
; 314  : 		bStabGround = false;
; 315  : 		pGroundItemInstance->bAnimEnded = false;
; 316  : 	}

  0019b	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _z$GSCopy$[ebp]
  001a3	32 c0		 xor	 al, al
  001a5	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR $T8[ebp], xmm0
  001ad	eb 02		 jmp	 SHORT $LN245@CreateItem
$LN3@CreateItem:

; 317  : 	else
; 318  : 	{
; 319  : 		pGroundItemInstance->bAnimEnded = true;

  001af	b0 01		 mov	 al, 1
$LN245@CreateItem:

; 320  : 	}
; 321  : 
; 322  : 	{
; 323  : 		// attaching effect
; 324  : 		CEffectManager & rem =CEffectManager::Instance();

  001b1	ba 24 02 00 00	 mov	 edx, 548		; 00000224H
  001b6	8b cf		 mov	 ecx, edi
  001b8	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 325  : 		pGroundItemInstance->dwEffectInstanceIndex = 

  001bb	8d 45 a4	 lea	 eax, DWORD PTR $T16[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 180  :     x = fx;

  001be	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv1979[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 325  : 		pGroundItemInstance->dwEffectInstanceIndex = 

  001c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 180  :     x = fx;

  001cb	f3 0f 11 45 b0	 movss	 DWORD PTR $T18[ebp], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 325  : 		pGroundItemInstance->dwEffectInstanceIndex = 

  001d0	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$GSCopy$1$[ebp]
  001d8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001df	50		 push	 eax
  001e0	8d 45 b0	 lea	 eax, DWORD PTR $T18[ebp]
  001e3	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR $T12[ebp], xmm0
  001eb	50		 push	 eax
  001ec	ff 76 30	 push	 DWORD PTR [esi+48]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 181  :     y = fy;

  001ef	f3 0f 11 45 b4	 movss	 DWORD PTR $T18[ebp+4], xmm0

; 182  :     z = fz;

  001f4	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR $T8[ebp]

; 180  :     x = fx;

  001fc	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T16[ebp], 0

; 181  :     y = fy;

  00203	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+4], 0

; 182  :     z = fz;

  0020a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+8], 0
  00211	f3 0f 11 45 b8	 movss	 DWORD PTR $T18[ebp+8], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 325  : 		pGroundItemInstance->dwEffectInstanceIndex = 

  00216	e8 00 00 00 00	 call	 ?CreateEffect@CEffectManager@@QAEHKABUD3DXVECTOR3@@0@Z ; CEffectManager::CreateEffect
  0021b	89 87 28 02 00
	00		 mov	 DWORD PTR [edi+552], eax

; 326  : 		rem.CreateEffect(m_dwDropItemEffectID, D3DXVECTOR3(x, -y, z), D3DXVECTOR3(0,0,0));		
; 327  : 
; 328  : 		pGroundItemInstance->eDropSoundType=__GetDropSoundType(*pItemData);

  00221	ff b5 38 ff ff
	ff		 push	 DWORD PTR _pItemData$[ebp]
  00227	e8 00 00 00 00	 call	 ?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z ; CPythonItem::__GetDropSoundType

; 329  : 	}
; 330  : 
; 331  : 
; 332  : 	D3DXVECTOR3 normal;
; 333  : 	if (!CPythonBackground::Instance().GetNormal(int(x),int(y),&normal))

  0022c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonBackground@@@@0PAVCPythonBackground@@A ; CSingleton<CPythonBackground>::ms_singleton
  00232	89 87 20 02 00
	00		 mov	 DWORD PTR [edi+544], eax
  00238	8d 45 8c	 lea	 eax, DWORD PTR _normal$[ebp]
  0023b	50		 push	 eax
  0023c	f3 0f 2c 85 3c
	ff ff ff	 cvttss2si eax, DWORD PTR _y$GSCopy$1$[ebp]
  00244	50		 push	 eax
  00245	f3 0f 2c 85 10
	ff ff ff	 cvttss2si eax, DWORD PTR tv1979[ebp]
  0024d	50		 push	 eax
  0024e	e8 00 00 00 00	 call	 ?GetNormal@CMapManager@@QAE_NHHPAUD3DXVECTOR3@@@Z ; CMapManager::GetNormal
  00253	84 c0		 test	 al, al
  00255	75 1b		 jne	 SHORT $LN7@CreateItem
  00257	0f 57 c9	 xorps	 xmm1, xmm1
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0025a	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR $T24[ebp+8], 1065353216 ; 3f800000H
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 334  : 		normal = D3DXVECTOR3(0.0f,0.0f,1.0f);

  00261	8b 45 d0	 mov	 eax, DWORD PTR $T24[ebp+8]
  00264	0f 57 c0	 xorps	 xmm0, xmm0
  00267	0f 14 c1	 unpcklps xmm0, xmm1
  0026a	66 0f d6 45 8c	 movq	 QWORD PTR _normal$[ebp], xmm0
  0026f	89 45 94	 mov	 DWORD PTR _normal$[ebp+8], eax
$LN7@CreateItem:

; 335  : 
; 336  : 	pGroundItemInstance->ThingInstance.Clear();

  00272	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00275	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear

; 337  : 	pGroundItemInstance->ThingInstance.ReserveModelThing(1);

  0027a	6a 01		 push	 1
  0027c	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0027f	e8 00 00 00 00	 call	 ?ReserveModelThing@CGraphicThingInstance@@QAEXH@Z ; CGraphicThingInstance::ReserveModelThing

; 338  : 	pGroundItemInstance->ThingInstance.ReserveModelInstance(1);

  00284	6a 01		 push	 1
  00286	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00289	e8 00 00 00 00	 call	 ?ReserveModelInstance@CGraphicThingInstance@@QAEXH@Z ; CGraphicThingInstance::ReserveModelInstance

; 339  : 	pGroundItemInstance->ThingInstance.RegisterModelThing(0, pItemModel);

  0028e	ff b5 44 ff ff
	ff		 push	 DWORD PTR _pItemModel$1$[ebp]
  00294	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00297	6a 00		 push	 0
  00299	e8 00 00 00 00	 call	 ?RegisterModelThing@CGraphicThingInstance@@QAEXHPAVCGraphicThing@@@Z ; CGraphicThingInstance::RegisterModelThing

; 340  : 	pGroundItemInstance->ThingInstance.SetModelInstance(0, 0, 0);

  0029e	6a ff		 push	 -1
  002a0	6a 00		 push	 0
  002a2	6a 00		 push	 0
  002a4	6a 00		 push	 0
  002a6	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  002a9	e8 00 00 00 00	 call	 ?SetModelInstance@CGraphicThingInstance@@QAE_NHHHH@Z ; CGraphicThingInstance::SetModelInstance

; 341  : 	if (bDrop)

  002ae	80 7b 18 00	 cmp	 BYTE PTR _bDrop$[ebx], 0
  002b2	f3 0f 10 8d 40
	ff ff ff	 movss	 xmm1, DWORD PTR $T12[ebp]
  002ba	74 2d		 je	 SHORT $LN8@CreateItem
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 182  :     z = fz;

  002bc	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR $T8[ebp]
  002c4	0f 57 d2	 xorps	 xmm2, xmm2
  002c7	f3 0f 11 45 d0	 movss	 DWORD PTR $T31[ebp+8], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 343  : 		pGroundItemInstance->v3EndPosition = D3DXVECTOR3(x,-y,z);

  002cc	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv1979[ebp]
  002d3	8b 45 d0	 mov	 eax, DWORD PTR $T31[ebp+8]
  002d6	0f 14 c1	 unpcklps xmm0, xmm1
  002d9	0f 57 c9	 xorps	 xmm1, xmm1
  002dc	66 0f d6 47 08	 movq	 QWORD PTR [edi+8], xmm0
  002e1	0f 57 c0	 xorps	 xmm0, xmm0
  002e4	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 344  : 		pGroundItemInstance->ThingInstance.SetPosition(0,0,0);
; 345  : 	}

  002e7	eb 0f		 jmp	 SHORT $LN9@CreateItem
$LN8@CreateItem:
  002e9	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv1979[ebp]
  002f0	f3 0f 10 95 34
	ff ff ff	 movss	 xmm2, DWORD PTR $T8[ebp]
$LN9@CreateItem:

; 346  : 	else
; 347  : 		pGroundItemInstance->ThingInstance.SetPosition(x, -y, z);
; 348  : 
; 349  : 	pGroundItemInstance->ThingInstance.Update();

  002f8	83 ec 0c	 sub	 esp, 12			; 0000000cH
  002fb	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  002fe	f3 0f 11 54 24
	08		 movss	 DWORD PTR [esp+8], xmm2
  00304	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  0030a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030f	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition
  00314	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00317	e8 00 00 00 00	 call	 ?Update@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Update

; 350  : 	pGroundItemInstance->ThingInstance.Transform();

  0031c	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0031f	e8 00 00 00 00	 call	 ?Transform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Transform

; 351  : 	pGroundItemInstance->ThingInstance.Deform();

  00324	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00327	e8 00 00 00 00	 call	 ?Deform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Deform

; 352  : 
; 353  : 	if (bDrop)

  0032c	80 7b 18 00	 cmp	 BYTE PTR _bDrop$[ebx], 0
  00330	0f 84 bf 04 00
	00		 je	 $LN10@CreateItem

; 354  : 	{
; 355  : 		D3DXVECTOR3 vMin, vMax;
; 356  : 		pGroundItemInstance->ThingInstance.GetBoundBox(&vMin,&vMax);

  00336	8d 45 98	 lea	 eax, DWORD PTR _vMax$15[ebp]
  00339	50		 push	 eax
  0033a	8d 45 b0	 lea	 eax, DWORD PTR _vMin$19[ebp]
  0033d	50		 push	 eax
  0033e	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00341	e8 00 00 00 00	 call	 ?GetBoundBox@CGraphicThingInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGraphicThingInstance::GetBoundBox
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00346	f3 0f 10 5d b0	 movss	 xmm3, DWORD PTR _vMin$19[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8403 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  0034b	8d 55 ec	 lea	 edx, DWORD PTR _f$32[ebp+24]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0034e	f3 0f 10 7d 98	 movss	 xmm7, DWORD PTR _vMax$15[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8403 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  00353	8d 4d d4	 lea	 ecx, DWORD PTR _f$32[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00356	f3 0f 10 6d 9c	 movss	 xmm5, DWORD PTR _vMax$15[ebp+4]
  0035b	f3 0f 58 df	 addss	 xmm3, xmm7
  0035f	f3 0f 10 55 b4	 movss	 xmm2, DWORD PTR _vMin$19[ebp+4]
  00364	f3 0f 10 65 a0	 movss	 xmm4, DWORD PTR _vMax$15[ebp+8]
  00369	f3 0f 58 d5	 addss	 xmm2, xmm5
  0036d	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _vMin$19[ebp+8]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00372	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0037a	f3 0f 58 cc	 addss	 xmm1, xmm4
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 361  : 				std::make_pair(vMax.x - vMin.x,0),

  0037e	f3 0f 5c 7d b0	 subss	 xmm7, DWORD PTR _vMin$19[ebp]

; 362  : 				std::make_pair(vMax.y - vMin.y,1),

  00383	f3 0f 5c 6d b4	 subss	 xmm5, DWORD PTR _vMin$19[ebp+4]

; 363  : 				std::make_pair(vMax.z - vMin.z,2)

  00388	f3 0f 5c 65 b8	 subss	 xmm4, DWORD PTR _vMin$19[ebp+8]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0038d	f3 0f 59 d8	 mulss	 xmm3, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8403 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  00391	c6 85 44 ff ff
	ff 00		 mov	 BYTE PTR $T13[ebp], 0
  00398	ff b5 44 ff ff
	ff		 push	 DWORD PTR $T13[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0039e	f3 0f 59 d0	 mulss	 xmm2, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8403 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  003a2	6a 03		 push	 3
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  003a4	f3 0f 59 c8	 mulss	 xmm1, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  003a8	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _f$32[ebp+4], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 357  : 		pGroundItemInstance->v3Center = (vMin + vMax) * 0.5f;

  003af	0f 14 da	 unpcklps xmm3, xmm2
  003b2	66 0f d6 5f 30	 movq	 QWORD PTR [edi+48], xmm3
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 182  :     z = fz;

  003b7	f3 0f 11 4d d0	 movss	 DWORD PTR $T29[ebp+8], xmm1
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 357  : 		pGroundItemInstance->v3Center = (vMin + vMax) * 0.5f;

  003bc	8b 45 d0	 mov	 eax, DWORD PTR $T29[ebp+8]
  003bf	89 47 38	 mov	 DWORD PTR [edi+56], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  003c2	f3 0f 11 7d d4	 movss	 DWORD PTR _f$32[ebp], xmm7
  003c7	f3 0f 11 6d dc	 movss	 DWORD PTR _f$32[ebp+8], xmm5
  003cc	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _f$32[ebp+12], 1
  003d3	f3 0f 11 65 e4	 movss	 DWORD PTR _f$32[ebp+16], xmm4
  003d8	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _f$32[ebp+20], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8403 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  003df	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 398  : 			if (f[0].second == 0)

  003e4	8b 45 d8	 mov	 eax, DWORD PTR _f$32[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8403 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  003e7	83 c4 08	 add	 esp, 8
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 398  : 			if (f[0].second == 0)

  003ea	85 c0		 test	 eax, eax
  003ec	0f 85 d2 00 00
	00		 jne	 $LN17@CreateItem

; 401  : 				pGroundItemInstance->qEnd = 

  003f2	83 ec 08	 sub	 esp, 8
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 180  :     x = fx;

  003f5	89 45 bc	 mov	 DWORD PTR $T23[ebp], eax

; 181  :     y = fy;

  003f8	89 45 c0	 mov	 DWORD PTR $T23[ebp+4], eax

; 182  :     z = fz;

  003fb	c7 45 c4 00 00
	80 3f		 mov	 DWORD PTR $T23[ebp+8], 1065353216 ; 3f800000H
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 401  : 				pGroundItemInstance->qEnd = 

  00402	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  0040a	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  00411	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00416	d9 ee		 fldz
  00418	de c1		 faddp	 ST(1), ST(0)
  0041a	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  00422	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  00429	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv1788[ebp]
  0042f	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00434	d9 ee		 fldz
  00436	de c1		 faddp	 ST(1), ST(0)
  00438	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv1789[ebp]
  0043e	e8 00 00 00 00	 call	 ?random@@YAKXZ		; random
  00443	83 e0 01	 and	 eax, 1
  00446	66 0f 6e c0	 movd	 xmm0, eax
  0044a	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0044e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00451	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0045a	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  00462	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  00469	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0046d	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv1800[ebp], xmm0
  00475	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0047a	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1800[ebp]
  00482	8d 45 bc	 lea	 eax, DWORD PTR $T23[ebp]
  00485	f3 0f 58 c0	 addss	 xmm0, xmm0
  00489	8d 55 c8	 lea	 edx, DWORD PTR $T27[ebp]
  0048c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00494	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv2171[ebp], xmm0
  0049c	d8 85 44 ff ff
	ff		 fadd	 DWORD PTR tv2171[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 181  :     y = fy;

  004a2	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv1789[ebp]
  004aa	f3 0f 11 45 cc	 movss	 DWORD PTR $T27[ebp+4], xmm0

; 182  :     z = fz;

  004af	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv1788[ebp]
  004b7	d9 5d c8	 fstp	 DWORD PTR $T27[ebp]
  004ba	f3 0f 11 45 d0	 movss	 DWORD PTR $T27[ebp+8], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 408  : 			}

  004bf	e9 91 01 00 00	 jmp	 $LN246@CreateItem
$LN17@CreateItem:

; 409  : 			else if (f[0].second == 1)

  004c4	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T30[ebp], 0
  004cb	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T30[ebp+4], 0
  004d2	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR $T30[ebp+8], 1065353216 ; 3f800000H
  004d9	83 f8 01	 cmp	 eax, 1
  004dc	0f 85 b3 00 00
	00		 jne	 $LN19@CreateItem

; 410  : 			{
; 411  : 				pGroundItemInstance->qEnd = 

  004e2	83 ec 08	 sub	 esp, 8
  004e5	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  004ed	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  004f4	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  004f9	d9 ee		 fldz
  004fb	de c1		 faddp	 ST(1), ST(0)
  004fd	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv1799[ebp]
  00503	e8 00 00 00 00	 call	 ?random@@YAKXZ		; random
  00508	83 e0 01	 and	 eax, 1
  0050b	66 0f 6e c0	 movd	 xmm0, eax
  0050f	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00513	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00516	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0051f	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  00527	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  0052e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00532	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv1825[ebp], xmm0
  0053a	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0053f	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1825[ebp]
  00547	f3 0f 58 c0	 addss	 xmm0, xmm0
  0054b	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  00553	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  0055a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00562	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv2128[ebp], xmm0
  0056a	d8 85 44 ff ff
	ff		 fadd	 DWORD PTR tv2128[ebp]
  00570	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv2321[ebp]
  00576	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0057b	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv2321[ebp]
  00583	f3 0f 11 45 c0	 movss	 DWORD PTR $T22[ebp+4], xmm0

; 182  :     z = fz;

  00588	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv1799[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 418  : 			}

  00590	e9 ae 00 00 00	 jmp	 $LN247@CreateItem
$LN19@CreateItem:

; 419  : 			else 
; 420  : 			{
; 421  : 				pGroundItemInstance->qEnd = 

  00595	e8 00 00 00 00	 call	 ?random@@YAKXZ		; random
  0059a	83 e0 01	 and	 eax, 1
  0059d	83 ec 08	 sub	 esp, 8
  005a0	66 0f 6e c0	 movd	 xmm0, eax
  005a4	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  005a8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  005ab	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  005b4	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  005bc	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  005c3	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  005c7	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv1846[ebp], xmm0
  005cf	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  005d4	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1846[ebp]
  005dc	f3 0f 58 c0	 addss	 xmm0, xmm0
  005e0	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  005e8	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  005ef	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  005f7	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv2084[ebp], xmm0
  005ff	d8 85 44 ff ff
	ff		 fadd	 DWORD PTR tv2084[ebp]
  00605	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv2324[ebp]
  0060b	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00610	d9 ee		 fldz
  00612	de c1		 faddp	 ST(1), ST(0)
  00614	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  0061c	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  00623	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1812[ebp]
  00629	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0062e	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1812[ebp]
  00636	f3 0f 11 45 c0	 movss	 DWORD PTR $T21[ebp+4], xmm0

; 182  :     z = fz;

  0063b	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv2324[ebp]
$LN247@CreateItem:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 431  : 		float rot = frandom(0, 2*3.1415926535f);

  00643	d9 ee		 fldz
  00645	8d 55 bc	 lea	 edx, DWORD PTR $T21[ebp]
  00648	de c1		 faddp	 ST(1), ST(0)
  0064a	f3 0f 11 45 c4	 movss	 DWORD PTR $T21[ebp+8], xmm0
  0064f	8d 45 c8	 lea	 eax, DWORD PTR $T28[ebp]
  00652	d9 5d bc	 fstp	 DWORD PTR $T21[ebp]
$LN246@CreateItem:
  00655	50		 push	 eax
  00656	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0065c	e8 00 00 00 00	 call	 ?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; RotationArc
  00661	83 c4 0c	 add	 esp, 12			; 0000000cH
  00664	83 ec 08	 sub	 esp, 8
  00667	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0066a	c7 44 24 04 db
	0f c9 40	 mov	 DWORD PTR [esp+4], 1086918619 ; 40c90fdbH
  00672	0f 11 47 20	 movups	 XMMWORD PTR [edi+32], xmm0
  00676	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0067d	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00682	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR _rot$9[ebp]
  00688	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR _rot$9[ebp]
  00690	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 789  :             return (float)sin(_X);

  00693	0f 5a c0	 cvtps2pd xmm0, xmm0
  00696	e8 00 00 00 00	 call	 __libm_sse2_sin_precise

; 683  :             return (float)cos(_X);

  0069b	f3 0f 10 8d 3c
	ff ff ff	 movss	 xmm1, DWORD PTR _rot$9[ebp]

; 789  :             return (float)sin(_X);

  006a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006a7	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv1874[ebp], xmm0

; 683  :             return (float)cos(_X);

  006af	0f 5a c1	 cvtps2pd xmm0, xmm1
  006b2	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  006b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 433  : 		D3DXQuaternionMultiply(&pGroundItemInstance->qEnd, &pGroundItemInstance->qEnd, &q);

  006bb	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _q$5[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 667  :     x = fx;

  006c1	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _q$5[ebp], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 433  : 		D3DXQuaternionMultiply(&pGroundItemInstance->qEnd, &pGroundItemInstance->qEnd, &q);

  006cb	50		 push	 eax
  006cc	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 668  :     y = fy;

  006cf	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _q$5[ebp+4], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 433  : 		D3DXQuaternionMultiply(&pGroundItemInstance->qEnd, &pGroundItemInstance->qEnd, &q);

  006d9	50		 push	 eax
  006da	50		 push	 eax
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 669  :     z = fz;

  006db	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _q$5[ebp+8], xmm0

; 670  :     w = fw;

  006e3	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1874[ebp]
  006eb	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _q$5[ebp+12], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 433  : 		D3DXQuaternionMultiply(&pGroundItemInstance->qEnd, &pGroundItemInstance->qEnd, &q);

  006f3	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 434  : 		q = RotationArc(D3DXVECTOR3(0,0,1),normal);

  006f8	8d 45 8c	 lea	 eax, DWORD PTR _normal$[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 180  :     x = fx;

  006fb	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T26[ebp], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 434  : 		q = RotationArc(D3DXVECTOR3(0,0,1),normal);

  00702	50		 push	 eax
  00703	8d 55 c8	 lea	 edx, DWORD PTR $T26[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00706	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T26[ebp+4], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 434  : 		q = RotationArc(D3DXVECTOR3(0,0,1),normal);

  0070d	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00713	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR $T26[ebp+8], 1065353216 ; 3f800000H
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 434  : 		q = RotationArc(D3DXVECTOR3(0,0,1),normal);

  0071a	e8 00 00 00 00	 call	 ?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; RotationArc
  0071f	83 c4 04	 add	 esp, 4
  00722	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 435  : 		D3DXQuaternionMultiply(&pGroundItemInstance->qEnd, &pGroundItemInstance->qEnd, &q);

  00725	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _q$5[ebp]
  0072b	50		 push	 eax
  0072c	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  0072f	50		 push	 eax
  00730	50		 push	 eax
  00731	0f 11 85 10 ff
	ff ff		 movups	 XMMWORD PTR _q$5[ebp], xmm0
  00738	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 436  : 
; 437  : 		pGroundItemInstance->dwStartTime = CTimer::Instance().GetCurrentMillisecond();

  0073d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00743	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond

; 439  : 		pGroundItemInstance->v3RotationAxis.x = sinf(rot+0);//frandom(0.4f,0.7f) * (2*(int)(random()%2) - 1);

  00748	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR _rot$9[ebp]
  00750	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  00758	89 87 18 02 00
	00		 mov	 DWORD PTR [edi+536], eax
  0075e	05 2c 01 00 00	 add	 eax, 300		; 0000012cH
  00763	89 87 1c 02 00
	00		 mov	 DWORD PTR [edi+540], eax
  00769	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _rot$1$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 789  :             return (float)sin(_X);

  00771	0f 5a c0	 cvtps2pd xmm0, xmm0
  00774	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00779	0f 57 c9	 xorps	 xmm1, xmm1
  0077c	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 439  : 		pGroundItemInstance->v3RotationAxis.x = sinf(rot+0);//frandom(0.4f,0.7f) * (2*(int)(random()%2) - 1);

  00780	f3 0f 11 4f 14	 movss	 DWORD PTR [edi+20], xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 683  :             return (float)cos(_X);

  00785	f3 0f 10 8d 44
	ff ff ff	 movss	 xmm1, DWORD PTR _rot$1$[ebp]
  0078d	0f 5a c1	 cvtps2pd xmm0, xmm1
  00790	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00795	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 459  : 		D3DXMatrixRotationQuaternion(&mat, &pGroundItemInstance->qEnd);

  0079d	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 683  :             return (float)cos(_X);

  007a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 441  : 		pGroundItemInstance->v3RotationAxis.z = 0;//frandom(0.4f,0.7f) * (2*(int)(random()%2) - 1);

  007a4	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 459  : 		D3DXMatrixRotationQuaternion(&mat, &pGroundItemInstance->qEnd);

  007ab	50		 push	 eax
  007ac	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _mat$14[ebp]
  007b2	f3 0f 11 47 18	 movss	 DWORD PTR [edi+24], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  007b7	f3 0f 10 57 30	 movss	 xmm2, DWORD PTR [edi+48]
  007bc	f3 0f 10 4f 34	 movss	 xmm1, DWORD PTR [edi+52]
  007c1	0f 57 d3	 xorps	 xmm2, xmm3
  007c4	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  007c9	0f 57 cb	 xorps	 xmm1, xmm3
  007cc	0f 57 c3	 xorps	 xmm0, xmm3

; 180  :     x = fx;

  007cf	f3 0f 11 55 a4	 movss	 DWORD PTR _v3Adjust$17[ebp], xmm2

; 181  :     y = fy;

  007d4	f3 0f 11 4d a8	 movss	 DWORD PTR _v3Adjust$17[ebp+4], xmm1

; 182  :     z = fz;

  007d9	f3 0f 11 45 ac	 movss	 DWORD PTR _v3Adjust$17[ebp+8], xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 459  : 		D3DXMatrixRotationQuaternion(&mat, &pGroundItemInstance->qEnd);

  007de	50		 push	 eax
  007df	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 460  : 		/*D3DXMatrixRotationYawPitchRoll(&mat, 
; 461  : 			D3DXToRadian(pGroundItemInstance->rEnd.y), 
; 462  : 			D3DXToRadian(pGroundItemInstance->rEnd.x), 
; 463  : 			D3DXToRadian(pGroundItemInstance->rEnd.z));*/
; 464  : 
; 465  : 		D3DXVec3TransformCoord(&v3Adjust,&v3Adjust,&mat);

  007e4	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _mat$14[ebp]
  007ea	50		 push	 eax
  007eb	8d 45 a4	 lea	 eax, DWORD PTR _v3Adjust$17[ebp]
  007ee	50		 push	 eax
  007ef	50		 push	 eax
  007f0	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
$LN10@CreateItem:

; 466  : 		//Tracef("%f %f %f\n",v3Adjust.x,v3Adjust.y,v3Adjust.z);
; 467  : 		//pGroundItemInstance->v3EndPosition += v3Adjust;
; 468  : 		//pGroundItemInstance->rEnd.z += pGroundItemInstance->v3Center.z;
; 469  : 	}
; 470  : 
; 471  : 	pGroundItemInstance->ThingInstance.Show();

  007f5	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  007f8	e8 00 00 00 00	 call	 ?Show@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Show
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  007fd	8b 43 08	 mov	 eax, DWORD PTR _dwVirtualID$[ebx]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 473  : 	m_GroundItemInstanceMap.insert(TGroundItemInstanceMap::value_type(dwVirtualID, pGroundItemInstance));

  00800	8b b5 30 ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00806	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 473  : 	m_GroundItemInstanceMap.insert(TGroundItemInstanceMap::value_type(dwVirtualID, pGroundItemInstance));

  0080c	83 c6 04	 add	 esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1017 :             _Loc                = _Find_lower_bound(_Keyval);

  0080f	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 473  : 	m_GroundItemInstanceMap.insert(TGroundItemInstanceMap::value_type(dwVirtualID, pGroundItemInstance));

  00815	89 b5 40 ff ff
	ff		 mov	 DWORD PTR __Scary$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1017 :             _Loc                = _Find_lower_bound(_Keyval);

  0081b	50		 push	 eax
  0081c	8d 45 bc	 lea	 eax, DWORD PTR $T20[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0081f	89 bd 30 ff ff
	ff		 mov	 DWORD PTR $T7[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1017 :             _Loc                = _Find_lower_bound(_Keyval);

  00825	50		 push	 eax
  00826	8b ce		 mov	 ecx, esi
  00828	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>
  0082d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00830	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00834	66 0f d6 45 c8	 movq	 QWORD PTR __Loc$25[ebp], xmm0

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00839	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0083d	75 08		 jne	 SHORT $LN76@CreateItem
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  0083f	8b 43 08	 mov	 eax, DWORD PTR _dwVirtualID$[ebx]
  00842	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00845	73 66		 jae	 SHORT $LN155@CreateItem
$LN76@CreateItem:

; 1648 :         if (max_size() == _Get_scary()->_Mysize) {

  00847	81 7e 04 aa aa
	aa 0a		 cmp	 DWORD PTR [esi+4], 178956970 ; 0aaaaaaaH
  0084e	0f 84 99 00 00
	00		 je	 $LN249@CreateItem
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1160 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00854	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR __Scary$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1023 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0085a	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1160 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0085c	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 808  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00862	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00869	6a 18		 push	 24			; 00000018H

; 1167 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0086b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00875	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0087a	8b 4b 08	 mov	 ecx, DWORD PTR _dwVirtualID$[ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0087d	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 810  :     }

  00880	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00887	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1042 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0088a	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR __Scary$1$[ebp]
  00890	50		 push	 eax
  00891	ff 75 cc	 push	 DWORD PTR __Loc$25[ebp+4]

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00894	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 1042 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00897	ff 75 c8	 push	 DWORD PTR __Loc$25[ebp]

; 831  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0089a	89 30		 mov	 DWORD PTR [eax], esi

; 832  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0089c	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 833  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0089f	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 834  :         this->_Ptr->_Color = _Red;

  008a2	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1042 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  008a8	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node
$LN155@CreateItem:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 476  : 	rkTextTail.RegisterItemTextTail(

  008ad	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  008b3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonTextTail@@@@0PAVCPythonTextTail@@A ; CSingleton<CPythonTextTail>::ms_singleton
  008b9	e8 00 00 00 00	 call	 ?GetName@CItemData@@QBEPBDXZ ; CItemData::GetName
  008be	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  008c1	51		 push	 ecx
  008c2	50		 push	 eax
  008c3	ff 73 08	 push	 DWORD PTR _dwVirtualID$[ebx]
  008c6	8b ce		 mov	 ecx, esi
  008c8	e8 00 00 00 00	 call	 ?RegisterItemTextTail@CPythonTextTail@@QAEXKPBDPAVCGraphicObjectInstance@@@Z ; CPythonTextTail::RegisterItemTextTail
$LN1@CreateItem:

; 480  : }

  008cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  008d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  008d7	59		 pop	 ecx
  008d8	5f		 pop	 edi
  008d9	5e		 pop	 esi
  008da	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008dd	33 cd		 xor	 ecx, ebp
  008df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008e4	8b e5		 mov	 esp, ebp
  008e6	5d		 pop	 ebp
  008e7	8b e3		 mov	 esp, ebx
  008e9	5b		 pop	 ebx
  008ea	c2 14 00	 ret	 20			; 00000014H
$LN249@CreateItem:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1649 :             _Throw_tree_length_error();

  008ed	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN244@CreateItem:
  008f2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z$0:
  00000	68 44 02 00 00	 push	 580			; 00000244H
  00005	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00011	83 c4 08	 add	 esp, 8
  00014	c3		 ret	 0
__unwindfunclet$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z$8:
  00015	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 8a f8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-264]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateItem@CPythonItem@@QAEXKKMMM_N@Z ENDP		; CPythonItem::CreateItem
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?SetOwnership@CPythonItem@@QAEXKPBD@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwVID$ = 8						; size = 4
_c_pszName$ = 12					; size = 4
?SetOwnership@CPythonItem@@QAEXKPBD@Z PROC		; CPythonItem::SetOwnership, COMDAT
; _this$ = ecx

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00009	8d 45 08	 lea	 eax, DWORD PTR _dwVID$[ebp]
  0000c	50		 push	 eax
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 484  : 	TGroundItemInstanceMap::iterator itor = m_GroundItemInstanceMap.find(dwVID);

  0000d	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00010	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001b	8b 55 fc	 mov	 edx, DWORD PTR __Loc$1[ebp+8]
  0001e	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00022	75 3a		 jne	 SHORT $LN1@SetOwnersh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  00024	8b 7d 08	 mov	 edi, DWORD PTR _dwVID$[ebp]
  00027	3b 7a 10	 cmp	 edi, DWORD PTR [edx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002a	72 32		 jb	 SHORT $LN1@SetOwnersh

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	39 16		 cmp	 DWORD PTR [esi], edx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 486  : 	if (m_GroundItemInstanceMap.end() == itor)

  0002e	74 2e		 je	 SHORT $LN1@SetOwnersh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00030	8b 75 0c	 mov	 esi, DWORD PTR _c_pszName$[ebp]
  00033	8b ce		 mov	 ecx, esi
  00035	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
$LL55@SetOwnersh:
  00038	8a 01		 mov	 al, BYTE PTR [ecx]
  0003a	41		 inc	 ecx
  0003b	84 c0		 test	 al, al
  0003d	75 f9		 jne	 SHORT $LL55@SetOwnersh
  0003f	2b cb		 sub	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1638 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00041	51		 push	 ecx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 490  : 	pGroundItemInstance->stOwnership.assign(c_pszName);

  00042	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1638 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00045	56		 push	 esi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 490  : 	pGroundItemInstance->stOwnership.assign(c_pszName);

  00046	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1638 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 493  : 	rkTextTail.SetItemTextTailOwner(dwVID, c_pszName);

  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonTextTail@@@@0PAVCPythonTextTail@@A ; CSingleton<CPythonTextTail>::ms_singleton
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 ?SetItemTextTailOwner@CPythonTextTail@@QAEXKPBD@Z ; CPythonTextTail::SetItemTextTailOwner
$LN1@SetOwnersh:

; 494  : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?SetOwnership@CPythonItem@@QAEXKPBD@Z ENDP		; CPythonItem::SetOwnership
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetOwnership@CPythonItem@@QAE_NKPAPBD@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwVID$ = 8						; size = 4
_c_pszName$ = 12					; size = 4
?GetOwnership@CPythonItem@@QAE_NKPAPBD@Z PROC		; CPythonItem::GetOwnership, COMDAT
; _this$ = ecx

; 497  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwVID$[ebp]
  0000a	50		 push	 eax
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 498  : 	TGroundItemInstanceMap::iterator itor = m_GroundItemInstanceMap.find(dwVID);

  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 2b		 jne	 SHORT $LN60@GetOwnersh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwVID$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 23		 jb	 SHORT $LN60@GetOwnersh

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 0e		 cmp	 DWORD PTR [esi], ecx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 500  : 	if (m_GroundItemInstanceMap.end() == itor)

  0002c	74 1f		 je	 SHORT $LN60@GetOwnersh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2356 :         return _Mypair._Myval2._Myptr();

  0002e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00031	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH

; 453  :         return _Myres > _Small_string_capacity;

  00037	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 445  :         if (_Large_mode_engaged()) {

  0003b	76 02		 jbe	 SHORT $LN53@GetOwnersh

; 446  :             _Result = _Unfancy(_Bx._Ptr);

  0003d	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN53@GetOwnersh:
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 504  : 	*c_pszName = pGroundItemInstance->stOwnership.c_str();

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _c_pszName$[ebp]
  00042	5e		 pop	 esi
  00043	89 08		 mov	 DWORD PTR [eax], ecx

; 505  : 
; 506  : 	return true;

  00045	b0 01		 mov	 al, 1

; 507  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN60@GetOwnersh:

; 501  : 		return false;

  0004d	32 c0		 xor	 al, al
  0004f	5e		 pop	 esi

; 507  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
?GetOwnership@CPythonItem@@QAE_NKPAPBD@Z ENDP		; CPythonItem::GetOwnership
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; _this$ = ecx

; 35   :     _Tree_unchecked_const_iterator() noexcept : _Ptr() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; _this$ = ecx

; 35   :     _Tree_unchecked_const_iterator() noexcept : _Ptr() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?DeleteItem@CPythonItem@@QAEXK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwVirtualID$ = 8					; size = 4
_pkData$ = 8						; size = 4
_pGroundItemInstance$1$ = 8				; size = 4
?DeleteItem@CPythonItem@@QAEXK@Z PROC			; CPythonItem::DeleteItem, COMDAT
; _this$ = ecx

; 525  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00009	8d 4d 08	 lea	 ecx, DWORD PTR _dwVirtualID$[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 525  : {

  0000c	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000d	51		 push	 ecx
  0000e	8d 4d f4	 lea	 ecx, DWORD PTR __Loc$1[ebp]
  00011	51		 push	 ecx
  00012	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00015	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001a	8b 7d fc	 mov	 edi, DWORD PTR __Loc$1[ebp+8]
  0001d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00021	75 5f		 jne	 SHORT $LN1@DeleteItem
  00023	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  00024	8b 5d 08	 mov	 ebx, DWORD PTR _dwVirtualID$[ebp]
  00027	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002a	72 55		 jb	 SHORT $LN128@DeleteItem

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	39 7e 04	 cmp	 DWORD PTR [esi+4], edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 527  : 	if (m_GroundItemInstanceMap.end() == itor)

  0002f	74 50		 je	 SHORT $LN128@DeleteItem

; 528  : 		return;
; 529  : 
; 530  : 	TGroundItemInstance * pGroundItemInstance = itor->second;

  00031	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 531  : 	pGroundItemInstance->Clear();

  00034	8b c8		 mov	 ecx, eax
  00036	89 45 08	 mov	 DWORD PTR _pGroundItemInstance$1$[ebp], eax
  00039	e8 00 00 00 00	 call	 ?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ ; CPythonItem::SGroundItemInstance::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0003e	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 532  : 	m_GroundItemInstancePool.Free(pGroundItemInstance);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pGroundItemInstance$1$[ebp]
  00044	89 4d 08	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00047	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  0004a	74 08		 je	 SHORT $LN54@DeleteItem

; 860  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0004c	89 08		 mov	 DWORD PTR [eax], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  0004e	83 46 20 04	 add	 DWORD PTR [esi+32], 4

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00052	eb 0d		 jmp	 SHORT $LN53@DeleteItem
$LN54@DeleteItem:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00054	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00057	51		 push	 ecx
  00058	50		 push	 eax
  00059	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0005c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
$LN53@DeleteItem:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1303 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00061	57		 push	 edi
  00062	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00065	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006a	6a 18		 push	 24			; 00000018H
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 536  : 	CPythonTextTail::Instance().DeleteItemTextTail(dwVirtualID);

  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonTextTail@@@@0PAVCPythonTextTail@@A ; CSingleton<CPythonTextTail>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00078	83 c4 08	 add	 esp, 8
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 536  : 	CPythonTextTail::Instance().DeleteItemTextTail(dwVirtualID);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ?DeleteItemTextTail@CPythonTextTail@@QAEXK@Z ; CPythonTextTail::DeleteItemTextTail
$LN128@DeleteItem:
  00081	5b		 pop	 ebx
$LN1@DeleteItem:
  00082	5f		 pop	 edi

; 537  : }

  00083	5e		 pop	 esi
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?DeleteItem@CPythonItem@@QAEXK@Z ENDP			; CPythonItem::DeleteItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?DISTANCE_APPROX@@YAHHH@Z
_TEXT	SEGMENT
?DISTANCE_APPROX@@YAHHH@Z PROC				; DISTANCE_APPROX, COMDAT
; _dx$ = ecx
; _dy$ = edx

; 605  : 	int min, max;
; 606  : 
; 607  : 	if (dx < 0)
; 608  : 		dx = -dx;
; 609  : 
; 610  : 	if (dy < 0)

  00000	8b c1		 mov	 eax, ecx
  00002	56		 push	 esi
  00003	8b f2		 mov	 esi, edx
  00005	99		 cdq
  00006	57		 push	 edi
  00007	8b f8		 mov	 edi, eax

; 611  : 		dy = -dy;
; 612  : 
; 613  : 	if (dx < dy)

  00009	8b c6		 mov	 eax, esi
  0000b	33 fa		 xor	 edi, edx
  0000d	2b fa		 sub	 edi, edx
  0000f	99		 cdq
  00010	8b c8		 mov	 ecx, eax
  00012	33 ca		 xor	 ecx, edx
  00014	2b ca		 sub	 ecx, edx
  00016	3b f9		 cmp	 edi, ecx
  00018	7d 04		 jge	 SHORT $LN4@DISTANCE_A

; 614  : 	{
; 615  : 		min = dx;

  0001a	8b f7		 mov	 esi, edi

; 616  : 		max = dy;
; 617  : 	}

  0001c	eb 04		 jmp	 SHORT $LN5@DISTANCE_A
$LN4@DISTANCE_A:

; 618  : 	else
; 619  : 	{
; 620  : 		min = dy;

  0001e	8b f1		 mov	 esi, ecx

; 621  : 		max = dx;

  00020	8b cf		 mov	 ecx, edi
$LN5@DISTANCE_A:

; 622  : 	}
; 623  : 
; 624  : 	// coefficients equivalent to ( 123/128 * max ) and ( 51/128 * min )
; 625  : 	return (((max << 8) + (max << 3) - (max << 4) - (max << 1) +

  00022	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00025	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00028	c1 e0 04	 shl	 eax, 4
  0002b	03 c1		 add	 eax, ecx
  0002d	c1 e1 04	 shl	 ecx, 4
  00030	03 c6		 add	 eax, esi
  00032	c1 e0 03	 shl	 eax, 3
  00035	2b c1		 sub	 eax, ecx
  00037	8b ce		 mov	 ecx, esi
  00039	c1 e1 05	 shl	 ecx, 5
  0003c	2b c1		 sub	 eax, ecx
  0003e	8d 0c 36	 lea	 ecx, DWORD PTR [esi+esi]
  00041	2b c1		 sub	 eax, ecx
  00043	2b c2		 sub	 eax, edx
  00045	5f		 pop	 edi
  00046	c1 f8 08	 sar	 eax, 8
  00049	5e		 pop	 esi

; 626  : 		(min << 7) - (min << 5) + (min << 3) - (min << 1)) >> 8);
; 627  : }

  0004a	c3		 ret	 0
?DISTANCE_APPROX@@YAHHH@Z ENDP				; DISTANCE_APPROX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetCloseItem@CPythonItem@@QAE_NABUD3DXVECTOR3@@PAKK@Z
_TEXT	SEGMENT
tv363 = -16						; size = 4
_dwCloseItemID$1$ = -12					; size = 4
_dwCloseItemDistance$1$ = -8				; size = 4
_i$ = -4						; size = 4
_c_rPixelPosition$ = 8					; size = 4
tv365 = 8						; size = 4
_pdwItemID$ = 12					; size = 4
_dwDistance$dead$ = 16					; size = 4
?GetCloseItem@CPythonItem@@QAE_NABUD3DXVECTOR3@@PAKK@Z PROC ; CPythonItem::GetCloseItem, COMDAT
; _this$ = ecx

; 630  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1142 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00009	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 631  : 	DWORD dwCloseItemID = 0;

  0000c	33 d2		 xor	 edx, edx

; 632  : 	DWORD dwCloseItemDistance = 0;

  0000e	33 c0		 xor	 eax, eax
  00010	89 55 f4	 mov	 DWORD PTR _dwCloseItemID$1$[ebp], edx

; 633  : 	int aproMin = 0;

  00013	33 db		 xor	 ebx, ebx
  00015	89 45 f8	 mov	 DWORD PTR _dwCloseItemDistance$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00018	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 636  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  0001a	89 75 fc	 mov	 DWORD PTR _i$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001d	3b f7		 cmp	 esi, edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 636  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  0001f	74 68		 je	 SHORT $LN7@GetCloseIt

; 637  : 	{
; 638  : 		TGroundItemInstance* pInstance = i->second;
; 639  : 
; 640  : 		int iDist = DISTANCE_APPROX((int)c_rPixelPosition.x - (int)pInstance->v3EndPosition.x, (int)c_rPixelPosition.y - (-(int)pInstance->v3EndPosition.y));

  00021	8b 45 08	 mov	 eax, DWORD PTR _c_rPixelPosition$[ebp]
  00024	f3 0f 2c 48 04	 cvttss2si ecx, DWORD PTR [eax+4]
  00029	f3 0f 2c 00	 cvttss2si eax, DWORD PTR [eax]
  0002d	89 4d f0	 mov	 DWORD PTR tv363[ebp], ecx
  00030	89 45 08	 mov	 DWORD PTR tv365[ebp], eax
$LL4@GetCloseIt:
  00033	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00036	f3 0f 2c 50 0c	 cvttss2si edx, DWORD PTR [eax+12]
  0003b	f3 0f 2c 40 08	 cvttss2si eax, DWORD PTR [eax+8]
  00040	03 d1		 add	 edx, ecx
  00042	8b 4d 08	 mov	 ecx, DWORD PTR tv365[ebp]
  00045	2b c8		 sub	 ecx, eax
  00047	e8 00 00 00 00	 call	 ?DISTANCE_APPROX@@YAHHH@Z ; DISTANCE_APPROX

; 641  : 		if (aproMin == 0)

  0004c	85 db		 test	 ebx, ebx
  0004e	74 04		 je	 SHORT $LN73@GetCloseIt

; 642  : 			aproMin = iDist;
; 643  : 		if (aproMin >= iDist) {

  00050	3b d8		 cmp	 ebx, eax
  00052	7c 0b		 jl	 SHORT $LN2@GetCloseIt
$LN73@GetCloseIt:

; 644  : 			aproMin = iDist;
; 645  : 			dwCloseItemID = i->first;

  00054	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00057	8b d8		 mov	 ebx, eax
  00059	89 4d f4	 mov	 DWORD PTR _dwCloseItemID$1$[ebp], ecx

; 646  : 			dwCloseItemDistance = iDist;

  0005c	89 45 f8	 mov	 DWORD PTR _dwCloseItemDistance$1$[ebp], eax
$LN2@GetCloseIt:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 198  :         _Mybase::operator++();

  0005f	8d 4d fc	 lea	 ecx, DWORD PTR _i$[ebp]
  00062	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  00067	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 636  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  0006a	8b 4d f0	 mov	 ecx, DWORD PTR tv363[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 232  :         return this->_Ptr == _Right._Ptr;

  0006d	3b f7		 cmp	 esi, edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 636  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  0006f	75 c2		 jne	 SHORT $LL4@GetCloseIt

; 647  : 		}
; 648  : 	}
; 649  : 
; 650  : 	if (dwCloseItemDistance > 300)

  00071	8b 45 f8	 mov	 eax, DWORD PTR _dwCloseItemDistance$1$[ebp]
  00074	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  00079	76 0b		 jbe	 SHORT $LN75@GetCloseIt

; 654  : 
; 655  : 	return true;
; 656  : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	32 c0		 xor	 al, al
  0007f	5b		 pop	 ebx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 0c 00	 ret	 12			; 0000000cH
$LN75@GetCloseIt:

; 647  : 		}
; 648  : 	}
; 649  : 
; 650  : 	if (dwCloseItemDistance > 300)

  00086	8b 55 f4	 mov	 edx, DWORD PTR _dwCloseItemID$1$[ebp]
$LN7@GetCloseIt:

; 651  : 		return false;
; 652  : 
; 653  : 	*pdwItemID = dwCloseItemID;

  00089	8b 45 0c	 mov	 eax, DWORD PTR _pdwItemID$[ebp]
  0008c	5f		 pop	 edi

; 654  : 
; 655  : 	return true;
; 656  : }

  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	89 10		 mov	 DWORD PTR [eax], edx
  00091	b0 01		 mov	 al, 1
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
?GetCloseItem@CPythonItem@@QAE_NABUD3DXVECTOR3@@PAKK@Z ENDP ; CPythonItem::GetCloseItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetGroundItemPosition@CPythonItem@@QAEHKPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwVirtualID$ = 8					; size = 4
_pPosition$ = 12					; size = 4
?GetGroundItemPosition@CPythonItem@@QAEHKPAUD3DXVECTOR3@@@Z PROC ; CPythonItem::GetGroundItemPosition, COMDAT
; _this$ = ecx

; 659  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwVirtualID$[ebp]
  0000a	50		 push	 eax
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 660  : 	TGroundItemInstanceMap::iterator itor = m_GroundItemInstanceMap.find(dwVirtualID);

  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 41		 jne	 SHORT $LN50@GetGroundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwVirtualID$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 39		 jb	 SHORT $LN50@GetGroundI

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 0e		 cmp	 DWORD PTR [esi], ecx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 661  : 	if (m_GroundItemInstanceMap.end() == itor)

  0002c	74 35		 je	 SHORT $LN50@GetGroundI

; 663  : 
; 664  : 	TGroundItemInstance * pInstance = itor->second;

  0002e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]

; 665  : 
; 666  : 	const D3DXVECTOR3& rkD3DVct3=pInstance->ThingInstance.GetPosition();

  00031	8d 49 3c	 lea	 ecx, DWORD PTR [ecx+60]
  00034	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition

; 667  : 
; 668  : 	pPosition->x=+rkD3DVct3.x;

  00039	8b 55 0c	 mov	 edx, DWORD PTR _pPosition$[ebp]
  0003c	5e		 pop	 esi
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	89 0a		 mov	 DWORD PTR [edx], ecx

; 669  : 	pPosition->y=-rkD3DVct3.y;

  00041	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00046	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0004d	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 670  : 	pPosition->z=+rkD3DVct3.z;

  00052	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00055	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 671  : 
; 672  : 	return TRUE;

  00058	b8 01 00 00 00	 mov	 eax, 1

; 673  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
$LN50@GetGroundI:

; 662  : 		return FALSE;

  00063	33 c0		 xor	 eax, eax
  00065	5e		 pop	 esi

; 673  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?GetGroundItemPosition@CPythonItem@@QAEHKPAUD3DXVECTOR3@@@Z ENDP ; CPythonItem::GetGroundItemPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?__Pick@CPythonItem@@IAEKABUtagPOINT@@@Z
_TEXT	SEGMENT
_fu$ = -16						; size = 4
_fv$ = -12						; size = 4
_ft$ = -8						; size = 4
_itor$ = -4						; size = 4
_c_rkPtMouse$ = 8					; size = 4
?__Pick@CPythonItem@@IAEKABUtagPOINT@@@Z PROC		; CPythonItem::__Pick, COMDAT
; _this$ = ecx

; 676  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1142 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0000a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000d	8b 30		 mov	 esi, DWORD PTR [eax]
  0000f	89 75 fc	 mov	 DWORD PTR _itor$[ebp], esi
  00012	3b f0		 cmp	 esi, eax
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 680  : 	for (; itor != m_GroundItemInstanceMap.end(); ++itor)

  00014	74 2b		 je	 SHORT $LN3@Pick
$LL4@Pick:

; 681  : 	{
; 682  : 		TGroundItemInstance * pInstance = itor->second;
; 683  : 
; 684  : 		if (pInstance->ThingInstance.Intersect(&fu, &fv, &ft))

  00016	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00019	8d 45 f8	 lea	 eax, DWORD PTR _ft$[ebp]
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR _fv$[ebp]
  00020	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00023	50		 push	 eax
  00024	8d 45 f0	 lea	 eax, DWORD PTR _fu$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?Intersect@CGraphicThingInstance@@QAE_NPAM00@Z ; CGraphicThingInstance::Intersect
  0002d	84 c0		 test	 al, al
  0002f	75 2b		 jne	 SHORT $LN59@Pick
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 198  :         _Mybase::operator++();

  00031	8d 4d fc	 lea	 ecx, DWORD PTR _itor$[ebp]
  00034	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  00039	8b 75 fc	 mov	 esi, DWORD PTR _itor$[ebp]
  0003c	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 680  : 	for (; itor != m_GroundItemInstanceMap.end(); ++itor)

  0003f	75 d5		 jne	 SHORT $LL4@Pick
$LN3@Pick:

; 687  : 		}
; 688  : 	}
; 689  : 
; 690  : 	CPythonTextTail& rkTextTailMgr=CPythonTextTail::Instance();
; 691  : 	return rkTextTailMgr.Pick(c_rkPtMouse.x, c_rkPtMouse.y);

  00041	8b 45 08	 mov	 eax, DWORD PTR _c_rkPtMouse$[ebp]
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonTextTail@@@@0PAVCPythonTextTail@@A ; CSingleton<CPythonTextTail>::ms_singleton
  0004a	ff 70 04	 push	 DWORD PTR [eax+4]
  0004d	ff 30		 push	 DWORD PTR [eax]
  0004f	e8 00 00 00 00	 call	 ?Pick@CPythonTextTail@@QAEHHH@Z ; CPythonTextTail::Pick
  00054	5f		 pop	 edi

; 692  : }

  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN59@Pick:

; 685  : 		{
; 686  : 			return itor->first;

  0005c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0005f	5f		 pop	 edi

; 692  : }

  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?__Pick@CPythonItem@@IAEKABUtagPOINT@@@Z ENDP		; CPythonItem::__Pick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetPickedItemID@CPythonItem@@QAE_NPAK@Z
_TEXT	SEGMENT
_pdwPickedItemID$ = 8					; size = 4
?GetPickedItemID@CPythonItem@@QAE_NPAK@Z PROC		; CPythonItem::GetPickedItemID, COMDAT
; _this$ = ecx

; 695  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 696  : 	if (INVALID_ID==m_dwPickedItemID)

  00003	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  00006	83 f9 ff	 cmp	 ecx, -1
  00009	75 06		 jne	 SHORT $LN2@GetPickedI

; 697  : 		return false;

  0000b	32 c0		 xor	 al, al

; 701  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
$LN2@GetPickedI:

; 698  : 
; 699  : 	*pdwPickedItemID=m_dwPickedItemID;

  00011	8b 45 08	 mov	 eax, DWORD PTR _pdwPickedItemID$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 700  : 	return true;

  00016	b0 01		 mov	 al, 1

; 701  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetPickedItemID@CPythonItem@@QAE_NPAK@Z ENDP		; CPythonItem::GetPickedItemID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetVirtualNumberOfGroundItem@CPythonItem@@QAEKK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwVID$ = 8						; size = 4
?GetVirtualNumberOfGroundItem@CPythonItem@@QAEKK@Z PROC	; CPythonItem::GetVirtualNumberOfGroundItem, COMDAT
; _this$ = ecx

; 704  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwVID$[ebp]
  0000a	50		 push	 eax
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 705  : 	TGroundItemInstanceMap::iterator itor = m_GroundItemInstanceMap.find(dwVID);

  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 19		 jne	 SHORT $LN51@GetVirtual
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwVID$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 11		 jb	 SHORT $LN51@GetVirtual

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.cpp

; 707  : 	if (itor == m_GroundItemInstanceMap.end())

  0002c	74 0d		 je	 SHORT $LN51@GetVirtual

; 709  : 	else
; 710  : 		return itor->second->dwVirtualNumber;

  0002e	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00031	5e		 pop	 esi
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 711  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN51@GetVirtual:

; 708  : 		return 0;

  0003b	33 c0		 xor	 eax, eax
  0003d	5e		 pop	 esi

; 711  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?GetVirtualNumberOfGroundItem@CPythonItem@@QAEKK@Z ENDP	; CPythonItem::GetVirtualNumberOfGroundItem
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPythonItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPythonItem@@UAEPAXI@Z PROC				; CPythonItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPythonItem@@UAE@XZ	; CPythonItem::~CPythonItem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 0c 01 00 00	 push	 268			; 0000010cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCPythonItem@@UAEPAXI@Z ENDP				; CPythonItem::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??1?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::~map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 777  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 18		 push	 24			; 00000018H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::~map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$make_pair@MH@std@@YA?AU?$pair@MH@0@$$QAM$$QAH@Z
_TEXT	SEGMENT
__Val2$ = 8						; size = 4
??$make_pair@MH@std@@YA?AU?$pair@MH@0@$$QAM$$QAH@Z PROC	; std::make_pair<float,int>, COMDAT
; ___$ReturnUdt$ = ecx
; __Val1$ = edx

; 578  :              && is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00003	8b 02		 mov	 eax, DWORD PTR [edx]
  00005	89 01		 mov	 DWORD PTR [ecx], eax
  00007	8b 45 08	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 579  :     // return pair composed from arguments
; 580  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 581  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  0000f	8b c1		 mov	 eax, ecx

; 582  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$make_pair@MH@std@@YA?AU?$pair@MH@0@$$QAM$$QAH@Z ENDP	; std::make_pair<float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
;	COMDAT ??$sort@PAU?$pair@MH@std@@@std@@YAXQAU?$pair@MH@0@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
??$sort@PAU?$pair@MH@std@@@std@@YAXQAU?$pair@MH@0@0@Z PROC ; std::sort<std::pair<float,int> *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 8407 : _CONSTEXPR20 void sort(const _RanIt _First, const _RanIt _Last) { // order [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 8403 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  00006	8b c2		 mov	 eax, edx
  00008	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000c	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000f	2b c1		 sub	 eax, ecx
  00011	c1 f8 03	 sar	 eax, 3
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >
  0001a	83 c4 08	 add	 esp, 8

; 8408 :     _STD sort(_First, _Last, less<>{});
; 8409 : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$sort@PAU?$pair@MH@std@@@std@@YAXQAU?$pair@MH@0@0@Z ENDP ; std::sort<std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$?0AAKAAPAUSGroundItemInstance@CPythonItem@@$0A@@?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@QAE@AAKAAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAKAAPAUSGroundItemInstance@CPythonItem@@$0A@@?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@QAE@AAKAAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>::pair<unsigned long const ,CPythonItem::SGroundItemInstance *><unsigned long &,CPythonItem::SGroundItemInstance * &,0>, COMDAT
; _this$ = ecx

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 275  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAKAAPAUSGroundItemInstance@CPythonItem@@$0A@@?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@QAE@AAKAAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>::pair<unsigned long const ,CPythonItem::SGroundItemInstance *><unsigned long &,CPythonItem::SGroundItemInstance * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
__Loc$2 = -36						; size = 12
$T3 = -24						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::insert<0,0>, COMDAT
; _this$ = ecx

; 1245 :     pair<iterator, bool> insert(value_type&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1017 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 0b		 jne	 SHORT $LN4@insert
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004e	72 04		 jb	 SHORT $LN4@insert
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00050	32 d2		 xor	 dl, dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1019 :                 return {_Loc._Bound, false};

  00052	eb 51		 jmp	 SHORT $LN88@insert
$LN4@insert:

; 1648 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0005b	74 64		 je	 SHORT $LN107@insert

; 1023 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1160 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 808  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00069	6a 18		 push	 24			; 00000018H

; 1167 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0007c	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0007f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1042 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00082	8b cf		 mov	 ecx, edi
  00084	50		 push	 eax
  00085	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp+4]

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00088	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1042 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008b	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp]

; 831  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0008e	89 30		 mov	 DWORD PTR [eax], esi

; 832  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00090	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 833  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00093	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 834  :         this->_Ptr->_Color = _Red;

  00096	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1042 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000a1	8b c8		 mov	 ecx, eax
  000a3	b2 01		 mov	 dl, 1
$LN88@insert:
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx
  000aa	88 50 04	 mov	 BYTE PTR [eax+4], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1248 :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN107@insert:

; 1649 :             _Throw_tree_length_error();

  000c1	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN105@insert:
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::insert<0,0>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@V21@@Z
_TEXT	SEGMENT
__Successor$1 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@V21@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,0>, COMDAT
; _this$ = ecx

; 1335 :     iterator erase(iterator _Where) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1301 :         _Unchecked_const_iterator _Successor = _Where;

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Where$[ebp]

; 1335 :     iterator erase(iterator _Where) noexcept /* strengthened */ {

  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1301 :         _Unchecked_const_iterator _Successor = _Where;

  0000b	89 75 fc	 mov	 DWORD PTR __Successor$1[ebp], esi

; 1302 :         ++_Successor; // save successor iterator for return

  0000e	8d 4d fc	 lea	 ecx, DWORD PTR __Successor$1[ebp]
  00011	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 1303 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00016	56		 push	 esi
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001e	6a 18		 push	 24			; 00000018H
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00029	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR __Successor$1[ebp]

; 1336 :         const auto _Scary = _Get_scary();
; 1337 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1338 :         _STL_VERIFY(_Where._Getcont() == _Scary, "map/set erase iterator from incorrect container");
; 1339 :         _STL_VERIFY(!_Where._Ptr->_Isnil, "cannot erase map/set end() iterator");
; 1340 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1341 :         return iterator(_Erase_unchecked(_Where._Unwrapped()), _Scary);

  0002f	5f		 pop	 edi

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 1336 :         const auto _Scary = _Get_scary();
; 1337 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1338 :         _STL_VERIFY(_Where._Getcont() == _Scary, "map/set erase iterator from incorrect container");
; 1339 :         _STL_VERIFY(!_Where._Ptr->_Isnil, "cannot erase map/set end() iterator");
; 1340 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1341 :         return iterator(_Erase_unchecked(_Where._Unwrapped()), _Scary);

  00032	5e		 pop	 esi

; 1342 :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@V21@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?GetCapacity@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEKXZ
_TEXT	SEGMENT
?GetCapacity@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEKXZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::GetCapacity, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 92   : 		}

  00009	c3		 ret	 0
?GetCapacity@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEKXZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::GetCapacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?Free@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Free@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPAUSGroundItemInstance@CPythonItem@@@Z PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::Free, COMDAT
; _this$ = ecx

; 77   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00003	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  00006	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00009	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  0000c	74 0d		 je	 SHORT $LN6@Free

; 860  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _pkData$[ebp]
  00011	89 02		 mov	 DWORD PTR [edx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00013	83 41 14 04	 add	 DWORD PTR [ecx+20], 4
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 83   : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN6@Free:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0001b	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0001e	51		 push	 ecx
  0001f	52		 push	 edx
  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 83   : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?Free@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ
_TEXT	SEGMENT
_pkNewData$2 = -16					; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::Alloc, COMDAT
; _this$ = ecx

; 63   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1910 :         return _My_data._Myfirst == _My_data._Mylast;

  00027	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002a	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  0002d	0f 85 9d 00 00
	00		 jne	 $LN2@Alloc

; 66   : 				T* pkNewData=new T;

  00033	68 44 02 00 00	 push	 580			; 00000244H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	8b f8		 mov	 edi, eax
  0003f	83 c4 04	 add	 esp, 4
  00042	89 7d f0	 mov	 DWORD PTR $T3[ebp], edi
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\UserInterface\PythonItem.h

; 71   : 			SGroundItemInstance() {}

  0004c	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0004f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7SGroundItemInstance@CPythonItem@@6B@
  00055	e8 00 00 00 00	 call	 ??0CGraphicThingInstance@@QAE@XZ ; CGraphicThingInstance::CGraphicThingInstance
  0005a	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  0005d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00064	0f 11 87 2c 02
	00 00		 movups	 XMMWORD PTR [edi+556], xmm0

; 860  :         _My_data._Mysize = 0;

  0006b	c7 87 3c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+572], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 67   : 				m_kVct_pkData.push_back(pkNewData);

  00075	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 861  :         _My_data._Myres  = _Small_string_capacity;

  00078	c7 87 40 02 00
	00 0f 00 00 00	 mov	 DWORD PTR [edi+576], 15	; 0000000fH

; 862  :         _My_data._Activate_SSO_buffer();
; 863  : 
; 864  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 865  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00082	c6 87 2c 02 00
	00 00		 mov	 BYTE PTR [edi+556], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00089	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  0008c	89 7d f0	 mov	 DWORD PTR _pkNewData$2[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0008f	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00092	74 1c		 je	 SHORT $LN37@Alloc

; 860  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00094	89 38		 mov	 DWORD PTR [eax], edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 69   : 				return pkNewData;

  00096	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 869  :         ++_Mylast;

  00098	83 46 08 04	 add	 DWORD PTR [esi+8], 4
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  0009c	ff 46 20	 inc	 DWORD PTR [esi+32]

; 75   : 		}

  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN37@Alloc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000b0	8d 55 f0	 lea	 edx, DWORD PTR _pkNewData$2[ebp]
  000b3	52		 push	 edx
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  000ba	ff 46 20	 inc	 DWORD PTR [esi+32]

; 69   : 				return pkNewData;

  000bd	8b c7		 mov	 eax, edi

; 75   : 		}

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
$LN2@Alloc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1989 :         return _My_data._Mylast[-1];

  000d0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  000d3	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1759 :         --_Mylast;

  000d6	83 c1 fc	 add	 ecx, -4			; fffffffcH
  000d9	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 75   : 		}

  000dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e6	59		 pop	 ecx
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ$0:
  00000	68 44 02 00 00	 push	 580			; 00000244H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::Alloc
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?Clear@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ
_TEXT	SEGMENT
?Clear@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::Clear, COMDAT
; _this$ = ecx

; 33   : 		{			

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 50   : 			for (auto v : m_kVct_pkData)

  00005	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  00008	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 14		 je	 SHORT $LN5@Clear
  0000f	90		 npad	 1
$LL6@Clear:

; 111  : 			delete pkData;

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN4@Clear
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	6a 01		 push	 1
  0001a	ff 10		 call	 DWORD PTR [eax]
$LN4@Clear:

; 50   : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4
  0001f	3b f3		 cmp	 esi, ebx
  00021	75 ed		 jne	 SHORT $LL6@Clear
$LN5@Clear:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00029	74 03		 je	 SHORT $LN12@Clear

; 1813 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1814 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1815 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1816 :             return;
; 1817 :         }
; 1818 : 
; 1819 :         _My_data._Orphan_all();
; 1820 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1821 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1822 :         _Mylast = _Myfirst;

  0002b	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN12@Clear:

; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00031	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00034	74 03		 je	 SHORT $LN16@Clear

; 1813 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1814 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1815 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1816 :             return;
; 1817 :         }
; 1818 : 
; 1819 :         _My_data._Orphan_all();
; 1820 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1821 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1822 :         _Mylast = _Myfirst;

  00036	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN16@Clear:
  00039	5f		 pop	 edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 35   : 		}

  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	c3		 ret	 0
?Clear@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?SetName@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szName$dead$ = 8					; size = 4
?SetName@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPBD@Z PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::SetName, COMDAT
; _this$dead$ = ecx

; 30   : 		}

  00000	c2 04 00	 ret	 4
?SetName@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPBD@Z ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::SetName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAE@XZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::~CDynamicPool<CPythonItem::SGroundItemInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 19   : 			assert(m_kVct_pkData.empty());
; 20   : //#ifdef _DEBUG
; 21   : //			char szText[256];
; 22   : //			sprintf(szText, "--------------------------------------------------------------------- %s Pool Capacity %d\n", typeid(T).name(), m_uUsedCapacity);
; 23   : //			OutputDebugString(szText);
; 24   : //			printf(szText);			
; 25   : //#endif
; 26   : 		}

  00003	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
  0000c	e8 00 00 00 00	 call	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
??1?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAE@XZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::~CDynamicPool<CPythonItem::SGroundItemInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
;	COMDAT ??0?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAE@XZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::CDynamicPool<CPythonItem::SGroundItemInstance>, COMDAT
; _this$ = ecx

; 12   : 		{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@

; 16   : 		}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002b	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 14   : 			m_uInitCapacity=0;

  00032	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 15   : 			m_uUsedCapacity=0;

  00039	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 16   : 		}

  00040	c3		 ret	 0
??0?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAE@XZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::CDynamicPool<CPythonItem::SGroundItemInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 35   :     _Tree_unchecked_const_iterator() noexcept : _Ptr() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++, COMDAT
; _this$ = ecx

; 281  :     _Tree_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 198  :         _Mybase::operator++();

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 282  :         _Mybase::operator++();
; 283  :         return *this;

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 284  :     }

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator->, COMDAT
; _this$ = ecx

; 185  :         return this->_Ptr->_Myval;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 278  :         return pointer_traits<pointer>::pointer_to(**this);
; 279  :     }

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator==, COMDAT
; _this$ = ecx

; 227  :     _NODISCARD bool operator==(const _Tree_const_iterator& _Right) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 228  : #if _ITERATOR_DEBUG_LEVEL == 2
; 229  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");
; 230  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 231  : 
; 232  :         return this->_Ptr == _Right._Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 233  :     }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@ABK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::find, COMDAT
; _this$ = ecx

; 1393 :     _NODISCARD iterator find(const key_type& _Keyval) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8b 75 0c	 mov	 esi, DWORD PTR __Keyval$[ebp]
  0000a	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]

; 1393 :     _NODISCARD iterator find(const key_type& _Keyval) {

  0000d	57		 push	 edi

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	56		 push	 esi
  0000f	50		 push	 eax

; 1393 :     _NODISCARD iterator find(const key_type& _Keyval) {

  00010	8b f9		 mov	 edi, ecx

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00012	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00017	8b 55 fc	 mov	 edx, DWORD PTR __Loc$1[ebp+8]
  0001a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0001e	75 14		 jne	 SHORT $LN4@find
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00025	72 0d		 jb	 SHORT $LN4@find

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	5f		 pop	 edi

; 1394 :         return iterator(_Find(_Keyval), _Get_scary());
; 1395 :     }

  0002b	5e		 pop	 esi

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1394 :         return iterator(_Find(_Keyval), _Get_scary());
; 1395 :     }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN4@find:

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00034	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1389 :         return _Get_scary()->_Myhead;

  00037	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00039	5f		 pop	 edi

; 1394 :         return iterator(_Find(_Keyval), _Get_scary());
; 1395 :     }

  0003a	5e		 pop	 esi

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0003b	89 08		 mov	 DWORD PTR [eax], ecx

; 1394 :         return iterator(_Find(_Keyval), _Get_scary());
; 1395 :     }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::clear, COMDAT
; _this$ = ecx

; 1370 :     void clear() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1371 :         const auto _Scary = _Get_scary();
; 1372 :         _Scary->_Orphan_ptr(nullptr);
; 1373 :         auto _Head = _Scary->_Myhead;

  00004	8b 37		 mov	 esi, DWORD PTR [edi]

; 1374 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00006	ff 76 04	 push	 DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >

; 1375 :         _Head->_Parent  = _Head;

  0000f	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1376 :         _Head->_Left    = _Head;

  00012	89 36		 mov	 DWORD PTR [esi], esi

; 1377 :         _Head->_Right   = _Head;

  00014	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1378 :         _Scary->_Mysize = 0;

  00017	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1379 :     }

  00020	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::size, COMDAT
; _this$ = ecx

; 1209 :         return _Get_scary()->_Mysize;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1210 :     }

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::end, COMDAT
; _this$ = ecx

; 1150 :     _NODISCARD iterator end() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1151 :         const auto _Scary = _Get_scary();
; 1152 :         return iterator(_Scary->_Myhead, _Scary);
; 1153 :     }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::begin, COMDAT
; _this$ = ecx

; 1140 :     _NODISCARD iterator begin() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1141 :         const auto _Scary = _Get_scary();
; 1142 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1143 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >, COMDAT
; _this$ = ecx

; 1095 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 777  :         _Erase_tree(_Al, _Myhead->_Parent);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 18		 push	 24			; 00000018H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1102 :     }

  0001b	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\map
;	COMDAT ??0?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >, COMDAT
; _this$ = ecx

; 106  :     map() : _Mybase(key_compare()) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00007	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\map

; 106  :     map() : _Mybase(key_compare()) {}

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00019	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00021	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00023	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00026	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00029	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1957 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0002f	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\map

; 106  :     map() : _Mybase(key_compare()) {}

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??0?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCPythonItem@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCPythonItem@@@@UAE@XZ PROC		; CSingleton<CPythonItem>::~CSingleton<CPythonItem>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonItem@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonItem@@@@0PAVCPythonItem@@A, 0 ; CSingleton<CPythonItem>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCPythonItem@@@@UAE@XZ ENDP		; CSingleton<CPythonItem>::~CSingleton<CPythonItem>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??0?$CSingleton@VCPythonItem@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CSingleton@VCPythonItem@@@@QAE@XZ PROC		; CSingleton<CPythonItem>::CSingleton<CPythonItem>, COMDAT
; _this$ = ecx

; 12   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonItem@@@@6B@

; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 
; 15   : 		ms_singleton = (T*) ((int) this + offset);
; 16   : 	} 

  00006	8b c1		 mov	 eax, ecx
  00008	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonItem@@@@0PAVCPythonItem@@A, ecx ; CSingleton<CPythonItem>::ms_singleton
  0000e	c3		 ret	 0
??0?$CSingleton@VCPythonItem@@@@QAE@XZ ENDP		; CSingleton<CPythonItem>::CSingleton<CPythonItem>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??1?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::~vector<CItemData *,std::allocator<CItemData *> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2090 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2091 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2092 :             _ASAN_VECTOR_REMOVE;
; 2093 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN19@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN18@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN19@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2095 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2096 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2097 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 835  :     }

  0004a	c3		 ret	 0
$LN18@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	e8 00 00 00 00	 call	 __invoke_watson
$LN27@vector:
  0005a	cc		 int	 3
??1?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::~vector<CItemData *,std::allocator<CItemData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??0?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::vector<CItemData *,std::allocator<CItemData *> >, COMDAT
; _this$ = ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 671  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 672  :     }

  00006	8b c1		 mov	 eax, ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 671  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 672  :     }

  00016	c3		 ret	 0
??0?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::vector<CItemData *,std::allocator<CItemData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ?Instance@?$CSingleton@VCSoundManager@@@@SAAAVCSoundManager@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCSoundManager@@@@SAAAVCSoundManager@@XZ PROC ; CSingleton<CSoundManager>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCSoundManager@@@@SAAAVCSoundManager@@XZ ENDP ; CSingleton<CSoundManager>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___param0$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
;	COMDAT ??_G?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   : 		{

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 19   : 			assert(m_kVct_pkData.empty());
; 20   : //#ifdef _DEBUG
; 21   : //			char szText[256];
; 22   : //			sprintf(szText, "--------------------------------------------------------------------- %s Pool Capacity %d\n", typeid(T).name(), m_uUsedCapacity);
; 23   : //			OutputDebugString(szText);
; 24   : //			printf(szText);			
; 25   : //#endif
; 26   : 		}

  00006	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
  0000f	e8 00 00 00 00	 call	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
  00014	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00017	e8 00 00 00 00	 call	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
  0001c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00020	74 0b		 je	 SHORT $LN10@scalar
  00022	6a 24		 push	 36			; 00000024H
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_G?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonItem@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonItem@@@@UAEPAXI@Z PROC		; CSingleton<CPythonItem>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{ 

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  0000a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonItem@@@@0PAVCPythonItem@@A, 0 ; CSingleton<CPythonItem>::ms_singleton
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonItem@@@@6B@
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonItem@@@@UAEPAXI@Z ENDP		; CSingleton<CPythonItem>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___param0$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$?0MH$0A@@?$pair@MH@std@@QAE@$$QAM$$QAH@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0MH$0A@@?$pair@MH@std@@QAE@$$QAM$$QAH@Z PROC	; std::pair<float,int>::pair<float,int><float,int,0>, COMDAT
; _this$ = ecx

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 275  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0MH$0A@@?$pair@MH@std@@QAE@$$QAM$$QAH@Z ENDP	; std::pair<float,int>::pair<float,int><float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
;	COMDAT ??$sort@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXQAU?$pair@MH@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
??$sort@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXQAU?$pair@MH@0@0U?$less@X@0@@Z PROC ; std::sort<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 8399 : _CONSTEXPR20 void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred) { // order [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 8400 :     _STD _Adl_verify_range(_First, _Last);
; 8401 :     const auto _UFirst = _STD _Get_unwrapped(_First);
; 8402 :     const auto _ULast  = _STD _Get_unwrapped(_Last);
; 8403 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  00004	ff 75 08	 push	 DWORD PTR __Pred$[ebp]
  00007	8b c2		 mov	 eax, edx
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 03	 sar	 eax, 3
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >
  00014	83 c4 08	 add	 esp, 8

; 8404 : }

  00017	59		 pop	 ecx
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$sort@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXQAU?$pair@MH@0@0U?$less@X@0@@Z ENDP ; std::sort<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAU?$pair@MH@std@@@std@@YA?A_TABQAU?$pair@MH@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAU?$pair@MH@std@@@std@@YA?A_TABQAU?$pair@MH@0@@Z PROC ; std::_Get_unwrapped<std::pair<float,int> * const &>, COMDAT
; __It$ = ecx

; 1380 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1381 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1382 :         return _It + 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1383 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1384 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1385 :     } else {
; 1386 :         return static_cast<_Iter&&>(_It);
; 1387 :     }
; 1388 : }

  00002	c3		 ret	 0
??$_Get_unwrapped@ABQAU?$pair@MH@std@@@std@@YA?A_TABQAU?$pair@MH@0@@Z ENDP ; std::_Get_unwrapped<std::pair<float,int> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Pass_fn@U?$less@X@std@@@std@@YA?A_PAAU?$less@X@0@@Z
_TEXT	SEGMENT
??$_Pass_fn@U?$less@X@std@@@std@@YA?A_PAAU?$less@X@0@@Z PROC ; std::_Pass_fn<std::less<void> >, COMDAT
; __Func$ = ecx

; 772  :     constexpr bool _Pass_by_value = conjunction_v<bool_constant<sizeof(_Fn) <= sizeof(void*)>,
; 773  :         is_trivially_copy_constructible<_Fn>, is_trivially_destructible<_Fn>>;
; 774  :     if constexpr (_Pass_by_value) {
; 775  :         return _Func;

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 776  :     } else {
; 777  :         return _Ref_fn<_Fn>{_Func}; // pass functor by "reference"
; 778  :     }
; 779  : }

  00002	c3		 ret	 0
??$_Pass_fn@U?$less@X@std@@@std@@YA?A_PAAU?$less@X@0@@Z ENDP ; std::_Pass_fn<std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@AAPAUSGroundItemInstance@CPythonItem@@@std@@YAAAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAUSGroundItemInstance@CPythonItem@@@std@@YAAAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z PROC ; std::forward<CPythonItem::SGroundItemInstance * &>, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@AAPAUSGroundItemInstance@CPythonItem@@@std@@YAAAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ENDP ; std::forward<CPythonItem::SGroundItemInstance * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$move@AAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z
_TEXT	SEGMENT
??$move@AAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z PROC ; std::move<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> &>, COMDAT
; __Arg$ = ecx

; 1513 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1514 : }

  00002	c3		 ret	 0
??$move@AAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ENDP ; std::move<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
__Loc$ = -36						; size = 12
$T2 = -24						; size = 12
$T3 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Emplace<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 1010 :     pair<_Nodeptr, bool> _Emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1011 :         using _In_place_key_extractor = typename _Traits::template _In_place_key_extractor<_Valtys...>;
; 1012 :         const auto _Scary             = _Get_scary();
; 1013 :         _Tree_find_result<_Nodeptr> _Loc;
; 1014 :         _Nodeptr _Inserted;
; 1015 :         if constexpr (!_Multi && _In_place_key_extractor::_Extractable) {
; 1016 :             const auto& _Keyval = _In_place_key_extractor::_Extract(_Vals...);
; 1017 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR _<_Vals_0>$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$[ebp], xmm0

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 24		 jne	 SHORT $LN2@Emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004e	72 1d		 jb	 SHORT $LN2@Emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00050	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00053	89 08		 mov	 DWORD PTR [eax], ecx
  00055	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1043 :     }

  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
$LN2@Emplace:

; 1648 :         if (max_size() == _Get_scary()->_Mysize) {

  0006d	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  00074	74 63		 je	 SHORT $LN92@Emplace

; 1018 :             if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1019 :                 return {_Loc._Bound, false};
; 1020 :             }
; 1021 : 
; 1022 :             _Check_grow_by_1();
; 1023 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00076	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1160 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00078	89 7d ec	 mov	 DWORD PTR $T3[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 808  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00082	6a 18		 push	 24			; 00000018H

; 1167 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00084	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  0008b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00090	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00092	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00095	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00098	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1042 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009b	8b cf		 mov	 ecx, edi
  0009d	50		 push	 eax
  0009e	ff 75 e0	 push	 DWORD PTR __Loc$[ebp+4]

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000a1	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1042 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000a4	ff 75 dc	 push	 DWORD PTR __Loc$[ebp]

; 831  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000a7	89 30		 mov	 DWORD PTR [eax], esi

; 832  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a9	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 833  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000ac	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 834  :         this->_Ptr->_Color = _Red;

  000af	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1042 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000b5	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000ba	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000bd	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1042 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000bf	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000c1	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1043 :     }

  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 08 00	 ret	 8
$LN92@Emplace:

; 1649 :             _Throw_tree_length_error();

  000d9	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN90@Emplace:
  000de	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Emplace<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@AB_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool const &,0>, COMDAT
; _this$ = ecx

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 275  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$_Find@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z
_TEXT	SEGMENT
__Loc$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??$_Find@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find<unsigned long>, COMDAT
; _this$ = ecx

; 1383 :     _NODISCARD _Nodeptr _Find(const _Other& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1384 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00008	8b 7d 08	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0000b	8d 45 f4	 lea	 eax, DWORD PTR __Loc$[ebp]
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	8b f1		 mov	 esi, ecx
  00012	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00017	8b 45 fc	 mov	 eax, DWORD PTR __Loc$[ebp+8]
  0001a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001e	75 07		 jne	 SHORT $LN2@Find
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  00020	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00022	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00025	73 02		 jae	 SHORT $LN1@Find
$LN2@Find:

; 1385 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1386 :             return _Loc._Bound;
; 1387 :         }
; 1388 : 
; 1389 :         return _Get_scary()->_Myhead;

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
$LN1@Find:
  00029	5f		 pop	 edi

; 1390 :     }

  0002a	5e		 pop	 esi
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??$_Find@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 767  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 768  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN51@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 769  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 768  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN51@Erase_tree:
  00035	5e		 pop	 esi

; 770  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 771  :         }
; 772  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 775  :     void _Erase_head(_Alnode& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 776  :         this->_Orphan_all();
; 777  :         _Erase_tree(_Al, _Myhead->_Parent);

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	ff 70 04	 push	 DWORD PTR [eax+4]
  0000b	ff 75 08	 push	 DWORD PTR __Al$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00013	6a 18		 push	 24			; 00000018H
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
  0001f	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 779  :     }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@AAU32@@Z
_TEXT	SEGMENT
?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> *>::pointer_to, COMDAT
; __Val$ = ecx

; 528  :         return _STD addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 529  :     }

  00002	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEAAPAUSGroundItemInstance@CPythonItem@@XZ
_TEXT	SEGMENT
?back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEAAPAUSGroundItemInstance@CPythonItem@@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::back, COMDAT
; _this$ = ecx

; 1984 :         auto& _My_data = _Mypair._Myval2;
; 1985 : #if _MSVC_STL_HARDENING_VECTOR || _ITERATOR_DEBUG_LEVEL != 0
; 1986 :         _STL_VERIFY(_My_data._Myfirst != _My_data._Mylast, "back() called on empty vector");
; 1987 : #endif
; 1988 : 
; 1989 :         return _My_data._Mylast[-1];

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e8 04	 sub	 eax, 4

; 1990 :     }

  00006	c3		 ret	 0
?back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEAAPAUSGroundItemInstance@CPythonItem@@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::size, COMDAT
; _this$ = ecx

; 1914 :         auto& _My_data = _Mypair._Myval2;
; 1915 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1916 :     }

  00008	c3		 ret	 0
?size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?empty@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBE_NXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::empty, COMDAT
; _this$ = ecx

; 1909 :         auto& _My_data = _Mypair._Myval2;
; 1910 :         return _My_data._Myfirst == _My_data._Mylast;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00005	0f 94 c0	 sete	 al

; 1911 :     }

  00008	c3		 ret	 0
?empty@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?pop_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::pop_back, COMDAT
; _this$ = ecx

; 1749 :         auto& _My_data   = _Mypair._Myval2;
; 1750 :         pointer& _Mylast = _My_data._Mylast;
; 1751 : 
; 1752 : #if _MSVC_STL_HARDENING_VECTOR || _ITERATOR_DEBUG_LEVEL != 0
; 1753 :         _STL_VERIFY(_My_data._Myfirst != _Mylast, "pop_back() called on empty vector");
; 1754 : #endif
; 1755 : 
; 1756 :         _Orphan_range(_Mylast - 1, _Mylast);
; 1757 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));
; 1758 :         _ASAN_VECTOR_MODIFY(-1);
; 1759 :         --_Mylast;

  00000	83 41 04 fc	 add	 DWORD PTR [ecx+4], -4	; fffffffcH

; 1760 :     }

  00004	c3		 ret	 0
?pop_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?push_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXABQAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXABQAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::push_back, COMDAT
; _this$ = ecx

; 932  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 844  :         if (_Mylast != _My_data._Myend) {

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00009	74 0f		 je	 SHORT $LN4@push_back

; 860  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00012	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 933  :         _Emplace_one_at_back(_Val);
; 934  :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN4@push_back:

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0001a	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>

; 933  :         _Emplace_one_at_back(_Val);
; 934  :     }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?push_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXABQAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2090 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2091 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2092 :             _ASAN_VECTOR_REMOVE;
; 2093 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN19@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN18@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN19@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2095 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2096 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2097 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 835  :     }

  0004a	c3		 ret	 0
$LN18@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	e8 00 00 00 00	 call	 __invoke_watson
$LN27@vector:
  0005a	cc		 int	 3
??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??0?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 671  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 672  :     }

  00006	8b c1		 mov	 eax, ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 671  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 672  :     }

  00016	c3		 ret	 0
??0?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?Destroy@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ
_TEXT	SEGMENT
?Destroy@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::Destroy, COMDAT
; _this$ = ecx

; 38   : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 39   : /*
; 40   : #ifdef _DEBUG
; 41   : 			if (!m_kVct_pkData.empty())
; 42   : 			{
; 43   : 				char szText[256];
; 44   : 				sprintf(szText, "--------------------------------------------------------------------- %s Pool Destroy\n", typeid(T).name());
; 45   : 				OutputDebugString(szText);
; 46   : 				printf(szText);
; 47   : 			}
; 48   : #endif			
; 49   : */
; 50   : 			for (auto v : m_kVct_pkData)

  00005	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  00008	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 14		 je	 SHORT $LN3@Destroy
  0000f	90		 npad	 1
$LL4@Destroy:

; 111  : 			delete pkData;

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN2@Destroy
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	6a 01		 push	 1
  0001a	ff 10		 call	 DWORD PTR [eax]
$LN2@Destroy:

; 39   : /*
; 40   : #ifdef _DEBUG
; 41   : 			if (!m_kVct_pkData.empty())
; 42   : 			{
; 43   : 				char szText[256];
; 44   : 				sprintf(szText, "--------------------------------------------------------------------- %s Pool Destroy\n", typeid(T).name());
; 45   : 				OutputDebugString(szText);
; 46   : 				printf(szText);
; 47   : 			}
; 48   : #endif			
; 49   : */
; 50   : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4
  0001f	3b f3		 cmp	 esi, ebx
  00021	75 ed		 jne	 SHORT $LL4@Destroy
$LN3@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00029	74 03		 je	 SHORT $LN10@Destroy

; 1813 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1814 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1815 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1816 :             return;
; 1817 :         }
; 1818 : 
; 1819 :         _My_data._Orphan_all();
; 1820 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1821 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1822 :         _Mylast = _Myfirst;

  0002b	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN10@Destroy:

; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00031	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00034	74 03		 je	 SHORT $LN14@Destroy

; 1813 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1814 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1815 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1816 :             return;
; 1817 :         }
; 1818 : 
; 1819 :         _My_data._Orphan_all();
; 1820 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1821 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1822 :         _Mylast = _Myfirst;

  00036	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN14@Destroy:
  00039	5f		 pop	 edi
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h

; 54   : 		}

  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	c3		 ret	 0
?Destroy@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 38   :         this->_Adopt(_Plist);
; 39   :     }

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Unwrapped, COMDAT
; _this$ = ecx

; 305  :     _NODISCARD _Tree_unchecked_iterator<_Mytree> _Unwrapped() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 306  :         return _Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree*>(this->_Getcont()));
; 307  :     }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*, COMDAT
; _this$ = ecx

; 185  :         return this->_Ptr->_Myval;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 274  :         return const_cast<reference>(_Mybase::operator*());
; 275  :     }

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++, COMDAT
; _this$ = ecx

; 192  :     _Tree_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 193  : #if _ITERATOR_DEBUG_LEVEL == 2
; 194  :         _STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 195  :         _STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 196  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 197  : 
; 198  :         _Mybase::operator++();

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 199  :         return *this;

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 200  :     }

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Orphan_ptr, COMDAT
; _this$dead$ = ecx

; 739  : #if _ITERATOR_DEBUG_LEVEL == 2
; 740  :         _Lockit _Lock(_LOCK_DEBUG);
; 741  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;
; 742  :         while (*_Pnext) {
; 743  :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;
; 744  :             if (_Pnextptr == _Myhead || (_Ptr != nullptr && _Pnextptr != _Ptr)) {
; 745  :                 _Pnext = &(*_Pnext)->_Mynextiter;
; 746  :             } else { // orphan the iterator
; 747  :                 (*_Pnext)->_Myproxy = nullptr;
; 748  :                 *_Pnext             = (*_Pnext)->_Mynextiter;
; 749  :             }
; 750  :         }
; 751  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 / _ITERATOR_DEBUG_LEVEL != 2 vvv
; 752  :         (void) _Ptr;
; 753  : #endif // ^^^ _ITERATOR_DEBUG_LEVEL != 2 ^^^
; 754  :     }

  00000	c2 04 00	 ret	 4
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Orphan_ptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1987 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00000	8b c1		 mov	 eax, ecx

; 1988 :     }

  00002	c3		 ret	 0
?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1983 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00000	8b c1		 mov	 eax, ecx

; 1984 :     }

  00002	c3		 ret	 0
?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1975 :         return _Mypair._Myval2._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1976 :     }

  00002	c3		 ret	 0
?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
__Successor$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Erase_unchecked, COMDAT
; _this$ = ecx

; 1299 :     _Nodeptr _Erase_unchecked(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1300 :         const auto _Scary                    = _Get_scary();
; 1301 :         _Unchecked_const_iterator _Successor = _Where;

  00005	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	89 75 fc	 mov	 DWORD PTR __Successor$[ebp], esi

; 1302 :         ++_Successor; // save successor iterator for return

  0000e	8d 4d fc	 lea	 ecx, DWORD PTR __Successor$[ebp]
  00011	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 1303 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00016	56		 push	 esi
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001e	6a 18		 push	 24			; 00000018H
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1306 :         return _Successor._Ptr; // return successor nodeptr

  00026	8b 45 fc	 mov	 eax, DWORD PTR __Successor$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00029	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1306 :         return _Successor._Ptr; // return successor nodeptr

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1307 :     }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Erase_unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z
_TEXT	SEGMENT
__Parg$dead$ = 8					; size = 4
??0?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >, COMDAT
; _this$ = ecx

; 904  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t{}, _Parg, _Zero_then_variadic_args_t{}) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00003	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0001a	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0001c	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0001f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00022	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1957 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00028	89 06		 mov	 DWORD PTR [esi], eax

; 905  :         _Alloc_sentinel_and_proxy();
; 906  :     }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	c2 04 00	 ret	 4
??0?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEXXZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Tidy, COMDAT
; _this$ = ecx

; 2081 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2082 :         auto& _Al         = _Getal();
; 2083 :         auto& _My_data    = _Mypair._Myval2;
; 2084 :         pointer& _Myfirst = _My_data._Myfirst;
; 2085 :         pointer& _Mylast  = _My_data._Mylast;
; 2086 :         pointer& _Myend   = _My_data._Myend;
; 2087 : 
; 2088 :         _My_data._Orphan_all();
; 2089 : 
; 2090 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN2@Tidy

; 2091 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2092 :             _ASAN_VECTOR_REMOVE;
; 2093 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN16@Tidy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN15@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN16@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2095 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2096 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2097 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 2099 :     }

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN15@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	e8 00 00 00 00	 call	 __invoke_watson
$LN23@Tidy:
  0005a	cc		 int	 3
?_Tidy@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEXXZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___param0$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Adl_verify_range@PAU?$pair@MH@std@@PAU12@@std@@YAXABQAU?$pair@MH@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@PAU?$pair@MH@std@@PAU12@@std@@YAXABQAU?$pair@MH@0@0@Z PROC ; std::_Adl_verify_range<std::pair<float,int> *,std::pair<float,int> *>, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1353 :     // check that [_First, _Last) forms an iterator range
; 1354 :     if constexpr (is_pointer_v<_Iter> && is_pointer_v<_Sentinel>) {
; 1355 : #if _ITERATOR_DEBUG_LEVEL != 0
; 1356 :         _STL_VERIFY(_First <= _Last, "transposed pointer range");
; 1357 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1358 :     } else if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1359 :         _Verify_range(_First, _Last);
; 1360 :     }
; 1361 : }

  00000	c2 00 00	 ret	 0
??$_Adl_verify_range@PAU?$pair@MH@std@@PAU12@@std@@YAXABQAU?$pair@MH@0@0@Z ENDP ; std::_Adl_verify_range<std::pair<float,int> *,std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -16						; size = 8
__Mid$2 = -8						; size = 8
tv312 = -4						; size = 4
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 1
??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z PROC ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 8369 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b da		 mov	 ebx, edx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 8370 :     // order [_First, _Last)
; 8371 :     for (;;) {
; 8372 :         if (_Last - _First <= _ISORT_MAX) { // small

  0000d	8b c3		 mov	 eax, ebx
  0000f	2b c7		 sub	 eax, edi
  00011	83 e0 f8	 and	 eax, -8			; fffffff8H
  00014	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00019	8b 45 0c	 mov	 eax, DWORD PTR __Pred$[ebp]
  0001c	7e 67		 jle	 SHORT $LN26@Sort_unche
  0001e	8b 75 08	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL4@Sort_unche:

; 8374 :             return;
; 8375 :         }
; 8376 : 
; 8377 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00021	50		 push	 eax
  00022	85 f6		 test	 esi, esi
  00024	7e 73		 jle	 SHORT $LN27@Sort_unche

; 8379 :             _STD _Sort_heap_unchecked(_First, _Last, _Pred);
; 8380 :             return;
; 8381 :         }
; 8382 : 
; 8383 :         // divide and conquer by quicksort
; 8384 :         auto _Mid = _STD _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  00026	53		 push	 ebx
  00027	8b d7		 mov	 edx, edi
  00029	8d 4d f8	 lea	 ecx, DWORD PTR __Mid$2[ebp]
  0002c	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MH@std@@PAU12@@0@PAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::pair<float,int> *,std::less<void> >

; 8385 : 
; 8386 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 8387 : 
; 8388 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00031	8b 55 f8	 mov	 edx, DWORD PTR __Mid$2[ebp]
  00034	8b c6		 mov	 eax, esi
  00036	c1 f8 02	 sar	 eax, 2
  00039	8b cb		 mov	 ecx, ebx
  0003b	2b 4d fc	 sub	 ecx, DWORD PTR __Mid$2[ebp+4]
  0003e	83 c4 08	 add	 esp, 8
  00041	d1 fe		 sar	 esi, 1
  00043	83 e1 f8	 and	 ecx, -8			; fffffff8H
  00046	03 f0		 add	 esi, eax
  00048	8b c2		 mov	 eax, edx
  0004a	2b c7		 sub	 eax, edi
  0004c	83 e0 f8	 and	 eax, -8			; fffffff8H
  0004f	3b c1		 cmp	 eax, ecx
  00051	8b 45 0c	 mov	 eax, DWORD PTR __Pred$[ebp]
  00054	50		 push	 eax
  00055	56		 push	 esi
  00056	7d 0c		 jge	 SHORT $LN7@Sort_unche

; 8389 :             _STD _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  00058	8b cf		 mov	 ecx, edi
  0005a	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >

; 8390 :             _First = _Mid.second;

  0005f	8b 7d fc	 mov	 edi, DWORD PTR __Mid$2[ebp+4]

; 8391 :         } else { // loop on first half

  00062	eb 0d		 jmp	 SHORT $LN36@Sort_unche
$LN7@Sort_unche:

; 8392 :             _STD _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  00064	8b 4d fc	 mov	 ecx, DWORD PTR __Mid$2[ebp+4]
  00067	8b d3		 mov	 edx, ebx
  00069	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >

; 8393 :             _Last = _Mid.first;

  0006e	8b 5d f8	 mov	 ebx, DWORD PTR __Mid$2[ebp]
$LN36@Sort_unche:

; 8370 :     // order [_First, _Last)
; 8371 :     for (;;) {
; 8372 :         if (_Last - _First <= _ISORT_MAX) { // small

  00071	8b c3		 mov	 eax, ebx
  00073	83 c4 08	 add	 esp, 8
  00076	2b c7		 sub	 eax, edi
  00078	83 e0 f8	 and	 eax, -8			; fffffff8H
  0007b	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00080	8b 45 0c	 mov	 eax, DWORD PTR __Pred$[ebp]
  00083	7f 9c		 jg	 SHORT $LL4@Sort_unche
$LN26@Sort_unche:

; 8373 :             _STD _Insertion_sort_unchecked(_First, _Last, _Pred);

  00085	50		 push	 eax
  00086	8b d3		 mov	 edx, ebx
  00088	8b cf		 mov	 ecx, edi
  0008a	e8 00 00 00 00	 call	 ??$_Insertion_sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAPAU?$pair@MH@0@QAU10@0U?$less@X@0@@Z ; std::_Insertion_sort_unchecked<std::pair<float,int> *,std::less<void> >
  0008f	83 c4 04	 add	 esp, 4
$LN12@Sort_unche:

; 8394 :         }
; 8395 :     }
; 8396 : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
$LN27@Sort_unche:

; 8378 :             _STD _Make_heap_unchecked(_First, _Last, _Pred);

  00099	8b d3		 mov	 edx, ebx
  0009b	8b cf		 mov	 ecx, edi
  0009d	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Make_heap_unchecked<std::pair<float,int> *,std::less<void> >

; 7148 :     for (; _Last - _First >= 2; --_Last) {

  000a2	8b d3		 mov	 edx, ebx

; 8378 :             _STD _Make_heap_unchecked(_First, _Last, _Pred);

  000a4	83 c4 04	 add	 esp, 4

; 7148 :     for (; _Last - _First >= 2; --_Last) {

  000a7	2b d7		 sub	 edx, edi
  000a9	8b c2		 mov	 eax, edx
  000ab	83 e0 f8	 and	 eax, -8			; fffffff8H
  000ae	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b1	7c df		 jl	 SHORT $LN12@Sort_unche

; 8378 :             _STD _Make_heap_unchecked(_First, _Last, _Pred);

  000b3	83 c3 f8	 add	 ebx, -8			; fffffff8H
  000b6	83 c2 f8	 add	 edx, -8			; fffffff8H
  000b9	89 55 fc	 mov	 DWORD PTR tv312[ebp], edx
  000bc	0f 1f 40 00	 npad	 4
$LL13@Sort_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 93   :     _STD _Pop_heap_hole_by_index(

  000c2	8b f2		 mov	 esi, edx

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  000c4	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 93   :     _STD _Pop_heap_hole_by_index(

  000c7	ff 75 0c	 push	 DWORD PTR __Pred$[ebp]

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  000ca	89 45 f0	 mov	 DWORD PTR __Val$1[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  000cd	8b 07		 mov	 eax, DWORD PTR [edi]
  000cf	89 03		 mov	 DWORD PTR [ebx], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  000d1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000d4	89 44 3a 04	 mov	 DWORD PTR [edx+edi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  000d8	8d 45 f0	 lea	 eax, DWORD PTR __Val$1[ebp]
  000db	50		 push	 eax

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  000dc	89 4d f4	 mov	 DWORD PTR __Val$1[ebp+4], ecx

; 93   :     _STD _Pop_heap_hole_by_index(

  000df	33 d2		 xor	 edx, edx
  000e1	c1 fe 03	 sar	 esi, 3
  000e4	8b cf		 mov	 ecx, edi
  000e6	56		 push	 esi
  000e7	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 7148 :     for (; _Last - _First >= 2; --_Last) {

  000ec	8b 55 fc	 mov	 edx, DWORD PTR tv312[ebp]
  000ef	8d 5b f8	 lea	 ebx, DWORD PTR [ebx-8]
  000f2	83 ea 08	 sub	 edx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 7148 :     for (; _Last - _First >= 2; --_Last) {

  000f8	89 55 fc	 mov	 DWORD PTR tv312[ebp], edx
  000fb	83 fe 02	 cmp	 esi, 2
  000fe	7d c0		 jge	 SHORT $LL13@Sort_unche

; 8394 :         }
; 8395 :     }
; 8396 : }

  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ENDP ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1628 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1629 :         const auto _Scary = _Get_scary();
; 1630 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1631 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1632 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1633 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1634 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1635 :                 _Result._Location._Child = _Tree_child::_Right;
; 1636 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1637 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1638 :                 _Result._Location._Child = _Tree_child::_Left;
; 1639 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1640 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1631 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1632 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1641 :             }
; 1642 :         }
; 1643 : 
; 1644 :         return _Result;
; 1645 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z
_TEXT	SEGMENT
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Lower_bound_duplicate<unsigned long>, COMDAT
; _this$dead$ = ecx

; 1623 :     bool _Lower_bound_duplicate(const _Nodeptr _Bound, const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Bound$[ebp]
  00006	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0000a	75 10		 jne	 SHORT $LN3@Lower_boun
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2380 :         return _Left < _Right;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00014	72 06		 jb	 SHORT $LN3@Lower_boun
  00016	b0 01		 mov	 al, 1

; 1625 :     }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
$LN3@Lower_boun:

; 1624 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001c	32 c0		 xor	 al, al

; 1625 :     }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
??$_Lower_bound_duplicate@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Lower_bound_duplicate<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > ><std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 829  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1160 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00029	8b 45 08	 mov	 eax, DWORD PTR __Al_$[ebp]
  0002c	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 808  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00035	6a 18		 push	 24			; 00000018H

; 1167 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00037	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 136  :         return ::operator new(_Bytes);

  0003e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00043	8b 4d 10	 mov	 ecx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00046	83 c4 04	 add	 esp, 4

; 1168 :         _Ptr = _Al.allocate(1);

  00049	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 830  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00051	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 831  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00054	8b 4d 0c	 mov	 ecx, DWORD PTR __Myhead$[ebp]
  00057	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0005a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx

; 832  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0005f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00062	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 833  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00065	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00068	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 834  :         this->_Ptr->_Color = _Red;

  0006b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0006e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 835  :         this->_Ptr->_Isnil = false;

  00072	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00075	c6 40 0d 00	 mov	 BYTE PTR [eax+13], 0

; 836  :     }

  00079	8b c6		 mov	 eax, esi
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5e		 pop	 esi
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > ><std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$?0AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &,bool,0>, COMDAT
; _this$ = ecx

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 275  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$?0PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool,0>, COMDAT
; _this$ = ecx

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 275  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > > >, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@0@Z
_TEXT	SEGMENT
??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@0@Z PROC ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>, COMDAT
; __Val$ = ecx
; __New_val$ = edx

; 772  :     // assign _New_val to _Val, return previous _Val
; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00002	8b 12		 mov	 edx, DWORD PTR [edx]
  00004	89 11		 mov	 DWORD PTR [ecx], edx

; 775  :     return _Old_val;
; 776  : }

  00006	c3		 ret	 0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@0@Z ENDP ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 383  :     }

  0000b	c3		 ret	 0
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 376  :     }

  0000b	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$addressof@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z
_TEXT	SEGMENT
??$addressof@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z PROC ; std::addressof<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; __Val$ = ecx

; 1525 :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 1526 : }

  00002	c3		 ret	 0
??$addressof@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Unfancy@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z PROC ; std::_Unfancy<CPythonItem::SGroundItemInstance *>, COMDAT
; __Ptr$ = ecx

; 69   :     return _Ptr;

  00000	8b c1		 mov	 eax, ecx

; 70   : }

  00002	c3		 ret	 0
??$_Unfancy@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z ENDP ; std::_Unfancy<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$destroy@PAUSGroundItemInstance@CPythonItem@@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
??$destroy@PAUSGroundItemInstance@CPythonItem@@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::destroy<CPythonItem::SGroundItemInstance *>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 738  : #if _HAS_CXX20
; 739  :         _STD destroy_at(_Ptr);
; 740  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 741  :         _Ptr->~_Uty();
; 742  : #endif // ^^^ !_HAS_CXX20 ^^^
; 743  :     }

  00000	c2 00 00	 ret	 0
??$destroy@PAUSGroundItemInstance@CPythonItem@@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::destroy<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??$_Emplace_one_at_back@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_one_at_back@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_one_at_back<CPythonItem::SGroundItemInstance * const &>, COMDAT
; _this$ = ecx

; 839  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 840  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 841  :         auto& _My_data   = _Mypair._Myval2;
; 842  :         pointer& _Mylast = _My_data._Mylast;
; 843  : 
; 844  :         if (_Mylast != _My_data._Myend) {

  00005	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00008	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0000b	74 14		 je	 SHORT $LN2@Emplace_on

; 860  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;

  00014	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 869  :         ++_Mylast;

  00017	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 849  :     }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@Emplace_on:

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  00024	51		 push	 ecx
  00025	8b ca		 mov	 ecx, edx
  00027	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>

; 849  :     }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??$_Emplace_one_at_back@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_one_at_back<CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > const >, COMDAT
; __Val$ = ecx

; 1525 :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 1526 : }

  00002	c3		 ret	 0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; __Val$ = ecx

; 1525 :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 1526 : }

  00002	c3		 ret	 0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
_<_Val2_0>$dead$ = 16					; size = 4
??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1><std::less<unsigned long> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1536 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1536 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1><std::less<unsigned long> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCItemData@@@std@@@std@@YAXPAPAVCItemData@@QAPAV1@AAV?$allocator@PAVCItemData@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@PAVCItemData@@@std@@@std@@YAXPAPAVCItemData@@QAPAV1@AAV?$allocator@PAVCItemData@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CItemData *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1099 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1100 :     using _Ty = typename _Alloc::value_type;
; 1101 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1102 :         for (; _First != _Last; ++_First) {
; 1103 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1104 :         }
; 1105 :     }
; 1106 : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCItemData@@@std@@@std@@YAXPAPAVCItemData@@QAPAV1@AAV?$allocator@PAVCItemData@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CItemData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Release, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00003	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1164 :     }

  0000a	c3		 ret	 0
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1172 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN17@Tree_temp_

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN17@Tree_temp_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 848  :     }

  00012	c3		 ret	 0
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Extract@?$_In_place_key_extract_map_impl@KU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@@Z
_TEXT	SEGMENT
?_Extract@?$_In_place_key_extract_map_impl@KU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@@Z PROC ; std::_In_place_key_extract_map_impl<unsigned long,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >::_Extract, COMDAT
; __Val$ = ecx

; 2175 :         return _Val.first;

  00000	8b c1		 mov	 eax, ecx

; 2176 :     }

  00002	c3		 ret	 0
?_Extract@?$_In_place_key_extract_map_impl@KU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@@Z ENDP ; std::_In_place_key_extract_map_impl<unsigned long,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal, COMDAT
; _this$ = ecx

; 2227 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 2228 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEXPAPAUSGroundItemInstance@CPythonItem@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEXPAPAUSGroundItemInstance@CPythonItem@@0@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 2223 :     _CONSTEXPR20 void _Orphan_range(pointer, pointer) const {}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEXPAPAUSGroundItemInstance@CPythonItem@@0@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Tidy@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Tidy, COMDAT
; _this$ = ecx

; 2081 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2082 :         auto& _Al         = _Getal();
; 2083 :         auto& _My_data    = _Mypair._Myval2;
; 2084 :         pointer& _Myfirst = _My_data._Myfirst;
; 2085 :         pointer& _Mylast  = _My_data._Mylast;
; 2086 :         pointer& _Myend   = _My_data._Myend;
; 2087 : 
; 2088 :         _My_data._Orphan_all();
; 2089 : 
; 2090 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN2@Tidy

; 2091 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2092 :             _ASAN_VECTOR_REMOVE;
; 2093 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN16@Tidy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN15@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN16@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2095 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2096 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2097 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 2099 :     }

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN15@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	e8 00 00 00 00	 call	 __invoke_watson
$LN23@Tidy:
  0005a	cc		 int	 3
?_Tidy@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Unchecked_end@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ
_TEXT	SEGMENT
?_Unchecked_end@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1901 :         return _Unfancy_maybe_null(_Mypair._Myval2._Mylast);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1902 :     }

  00003	c3		 ret	 0
?_Unchecked_end@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ
_TEXT	SEGMENT
?_Unchecked_begin@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1893 :         return _Unfancy_maybe_null(_Mypair._Myval2._Myfirst);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1894 :     }

  00002	c3		 ret	 0
?_Unchecked_begin@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?clear@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::clear, COMDAT
; _this$ = ecx

; 1808 :         auto& _My_data    = _Mypair._Myval2;
; 1809 :         pointer& _Myfirst = _My_data._Myfirst;
; 1810 :         pointer& _Mylast  = _My_data._Mylast;
; 1811 : 
; 1812 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00005	74 03		 je	 SHORT $LN1@clear

; 1813 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1814 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1815 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1816 :             return;
; 1817 :         }
; 1818 : 
; 1819 :         _My_data._Orphan_all();
; 1820 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1821 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1822 :         _Mylast = _Myfirst;

  00007	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN1@clear:

; 1823 :     }

  0000a	c3		 ret	 0
?clear@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@KAXPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
?Delete@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@KAXPAUSGroundItemInstance@CPythonItem@@@Z PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::Delete, COMDAT
; _pkData$ = ecx

; 111  : 			delete pkData;

  00000	85 c9		 test	 ecx, ecx
  00002	74 06		 je	 SHORT $LN3@Delete
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	6a 01		 push	 1
  00008	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 112  : 		}

  0000a	c3		 ret	 0
?Delete@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@KAXPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1539 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1540 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 49   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN21@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 62   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 476  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN10@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 477  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL9@operator
$LN10@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 62   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*, COMDAT
; _this$ = ecx

; 179  : #if _ITERATOR_DEBUG_LEVEL == 2
; 180  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());
; 181  :         _STL_VERIFY(_Mycont, "cannot dereference value-initialized map/set iterator");
; 182  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");
; 183  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 184  : 
; 185  :         return this->_Ptr->_Myval;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 186  :     }

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 669  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 670  :         ++_Mysize;
; 671  :         const auto _Head  = _Myhead;
; 672  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 673  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 674  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 675  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 676  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 735  :         return _Newnode;
; 736  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 677  :             _Newnode->_Color = _Black; // the root is black
; 678  :             return _Newnode;
; 679  :         }
; 680  : 
; 681  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 682  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 683  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 684  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 685  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 686  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 687  :             }
; 688  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 689  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 690  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 691  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 692  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 693  :             }
; 694  :         }
; 695  : 
; 696  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 697  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 698  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 699  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 700  :                     _Pnode->_Parent->_Color          = _Black;
; 701  :                     _Parent_sibling->_Color          = _Black;
; 702  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 703  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 704  :                 } else { // parent's sibling has red and black children
; 705  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 485  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 706  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 485  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 486  : 
; 487  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 488  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 492  : 
; 493  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 494  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 495  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 496  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 497  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 498  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 499  :         }
; 500  : 
; 501  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 502  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 707  :                         _Lrotate(_Pnode);
; 708  :                     }
; 709  : 
; 710  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 711  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 712  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 506  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 507  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 508  : 
; 509  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 510  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 514  : 
; 515  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 516  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 521  :         }
; 522  : 
; 523  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 713  :                 }
; 714  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 517  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 518  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 521  :         }
; 522  : 
; 523  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 713  :                 }
; 714  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 520  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 521  :         }
; 522  : 
; 523  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 713  :                 }
; 714  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 715  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 716  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 693  :             }
; 694  :         }
; 695  : 
; 696  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 717  :                     _Pnode->_Parent->_Color          = _Black;
; 718  :                     _Parent_sibling->_Color          = _Black;
; 719  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 720  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 721  :                 } else { // parent's sibling has red and black children
; 722  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 507  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 723  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 507  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 508  : 
; 509  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 510  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 514  : 
; 515  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 516  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 517  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 518  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 519  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 520  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 521  :         }
; 522  : 
; 523  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 524  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 724  :                         _Rrotate(_Pnode);
; 725  :                     }
; 726  : 
; 727  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 728  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 729  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 484  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 485  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 486  : 
; 487  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 488  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 492  : 
; 493  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 494  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 495  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 496  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 497  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 498  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 499  :         }
; 500  : 
; 501  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 693  :             }
; 694  :         }
; 695  : 
; 696  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 730  :                 }
; 731  :             }
; 732  :         }
; 733  : 
; 734  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 735  :         return _Newnode;
; 736  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1039 = -16						; size = 4
tv1073 = -12						; size = 4
tv1093 = -12						; size = 4
$T1 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract, COMDAT
; _this$ = ecx

; 527  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 528  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 529  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00017	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 530  : 
; 531  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 532  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 533  :         _Nodeptr _Pnode = _Erasednode;
; 534  : 
; 535  :         if (_Pnode->_Left->_Isnil) {

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 18		 jne	 SHORT $LN94@Extract

; 536  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 537  :         } else if (_Pnode->_Right->_Isnil) {

  0002a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002e	74 04		 je	 SHORT $LN7@Extract

; 538  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00030	8b f8		 mov	 edi, eax

; 539  :         } else { // two subtrees, must lift successor node to replace erased

  00032	eb 0e		 jmp	 SHORT $LN94@Extract
$LN7@Extract:

; 540  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00034	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 541  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00037	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  0003a	3b d1		 cmp	 edx, ecx

; 542  :         }
; 543  : 
; 544  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0003c	0f 85 91 00 00
	00		 jne	 $LN9@Extract
$LN94@Extract:

; 545  :             _Fixnodeparent = _Erasednode->_Parent;
; 546  :             if (!_Fixnode->_Isnil) {

  00042	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00046	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00049	75 03		 jne	 SHORT $LN11@Extract

; 547  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 548  :             }
; 549  : 
; 550  :             if (_Myhead->_Parent == _Erasednode) {

  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00053	75 05		 jne	 SHORT $LN12@Extract

; 551  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00058	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 552  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0005a	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005c	75 04		 jne	 SHORT $LN14@Extract

; 553  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005e	89 3e		 mov	 DWORD PTR [esi], edi

; 554  :             } else {

  00060	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 555  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00062	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 556  :             }
; 557  : 
; 558  :             if (_Myhead->_Left == _Erasednode) {

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	39 08		 cmp	 DWORD PTR [eax], ecx
  00069	75 28		 jne	 SHORT $LN16@Extract

; 559  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006b	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006f	74 04		 je	 SHORT $LN42@Extract
  00071	8b d6		 mov	 edx, esi
  00073	eb 1c		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 476  :         while (!_Pnode->_Left->_Isnil) {

  00075	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 559  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00077	8b d7		 mov	 edx, edi

; 476  :         while (!_Pnode->_Left->_Isnil) {

  00079	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007d	75 0f		 jne	 SHORT $LN49@Extract
  0007f	90		 npad	 1
$LL48@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 477  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL48@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN49@Extract:
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN43@Extract:

; 559  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00091	89 10		 mov	 DWORD PTR [eax], edx
$LN16@Extract:

; 560  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 561  :             }
; 562  : 
; 563  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 13		 mov	 edx, DWORD PTR [ebx]
  00095	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  00098	75 34		 jne	 SHORT $LN17@Extract

; 564  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0d		 je	 SHORT $LN44@Extract

; 565  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 566  :             }
; 567  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a0	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000a3	8b ce		 mov	 ecx, esi
  000a5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000a8	e9 94 00 00 00	 jmp	 $LN58@Extract
$LN44@Extract:

; 468  :         while (!_Pnode->_Right->_Isnil) {

  000ad	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 564  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b0	8b cf		 mov	 ecx, edi

; 468  :         while (!_Pnode->_Right->_Isnil) {

  000b2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b6	75 13		 jne	 SHORT $LN54@Extract
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL53@Extract:

; 469  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL53@Extract
$LN54@Extract:

; 564  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN17@Extract:

; 565  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 566  :             }
; 567  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000d1	eb 6e		 jmp	 SHORT $LN58@Extract
$LN9@Extract:

; 568  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 569  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	89 02		 mov	 DWORD PTR [edx], eax

; 570  : 
; 571  :             if (_Pnode == _Erasednode->_Right) {

  000da	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000dd	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  000e0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000e3	75 04		 jne	 SHORT $LN18@Extract

; 572  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e5	8b f2		 mov	 esi, edx

; 573  :             } else { // successor further down, link in place of erased

  000e7	eb 1f		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 574  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 575  :                 if (!_Fixnode->_Isnil) {

  000e9	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ed	8b 30		 mov	 esi, DWORD PTR [eax]
  000ef	75 03		 jne	 SHORT $LN20@Extract

; 576  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f1	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 577  :                 }
; 578  : 
; 579  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f4	89 3e		 mov	 DWORD PTR [esi], edi

; 580  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 581  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ff	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00102	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00105	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN19@Extract:

; 582  :             }
; 583  : 
; 584  :             if (_Myhead->_Parent == _Erasednode) {

  00108	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0010d	75 05		 jne	 SHORT $LN21@Extract

; 585  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00112	eb 0e		 jmp	 SHORT $LN141@Extract
$LN21@Extract:

; 586  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00114	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00117	39 08		 cmp	 DWORD PTR [eax], ecx
  00119	75 04		 jne	 SHORT $LN23@Extract

; 587  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011b	89 10		 mov	 DWORD PTR [eax], edx

; 588  :             } else {

  0011d	eb 03		 jmp	 SHORT $LN141@Extract
$LN23@Extract:

; 589  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011f	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN141@Extract:

; 590  :             }
; 591  : 
; 592  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012d	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 140  :     _Left    = _STD move(_Right);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00132	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00135	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00138	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 141  :     _Right   = _STD move(_Tmp);

  0013b	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0013e	88 48 0c	 mov	 BYTE PTR [eax+12], cl
$LN58@Extract:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 596  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00141	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00145	0f 85 ba 01 00
	00		 jne	 $LN25@Extract

; 597  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0014b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014d	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00150	0f 84 a8 01 00
	00		 je	 $LN3@Extract
  00156	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  0015a	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  0015d	0f 85 9b 01 00
	00		 jne	 $LN3@Extract
$LL4@Extract:

; 598  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00163	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00165	3b f9		 cmp	 edi, ecx
  00167	0f 85 be 00 00
	00		 jne	 $LN26@Extract

; 599  :                     _Pnode = _Fixnodeparent->_Right;

  0016d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 600  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  00170	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00174	75 54		 jne	 SHORT $LN95@Extract

; 601  :                         _Pnode->_Color         = _Black;

  00176	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 484  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  0017a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 602  :                         _Fixnodeparent->_Color = _Red;

  0017d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 485  :         _Wherenode->_Right = _Pnode->_Left;

  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 486  : 
; 487  :         if (!_Pnode->_Left->_Isnil) {

  00186	8b 01		 mov	 eax, DWORD PTR [ecx]
  00188	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0018c	75 03		 jne	 SHORT $LN61@Extract

; 488  :             _Pnode->_Left->_Parent = _Wherenode;

  0018e	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN61@Extract:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Parent = _Wherenode->_Parent;

  00191	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00194	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00197	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 492  : 
; 493  :         if (_Wherenode == _Myhead->_Parent) {

  0019a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019c	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0019f	75 0c		 jne	 SHORT $LN62@Extract

; 494  :             _Myhead->_Parent = _Pnode;

  001a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 499  :         }
; 500  : 
; 501  :         _Pnode->_Left       = _Wherenode;

  001a4	89 31		 mov	 DWORD PTR [ecx], esi

; 502  :         _Wherenode->_Parent = _Pnode;

  001a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 603  :                         _Lrotate(_Fixnodeparent);
; 604  :                         _Pnode = _Fixnodeparent->_Right;

  001a8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ab	eb 20		 jmp	 SHORT $LN87@Extract
$LN62@Extract:

; 495  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ad	8b 02		 mov	 eax, DWORD PTR [edx]
  001af	3b 30		 cmp	 esi, DWORD PTR [eax]
  001b1	75 0b		 jne	 SHORT $LN64@Extract

; 496  :             _Wherenode->_Parent->_Left = _Pnode;

  001b3	89 08		 mov	 DWORD PTR [eax], ecx

; 499  :         }
; 500  : 
; 501  :         _Pnode->_Left       = _Wherenode;

  001b5	89 31		 mov	 DWORD PTR [ecx], esi

; 502  :         _Wherenode->_Parent = _Pnode;

  001b7	89 0a		 mov	 DWORD PTR [edx], ecx

; 603  :                         _Lrotate(_Fixnodeparent);
; 604  :                         _Pnode = _Fixnodeparent->_Right;

  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	eb 0f		 jmp	 SHORT $LN87@Extract
$LN64@Extract:

; 498  :             _Wherenode->_Parent->_Right = _Pnode;

  001be	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 499  :         }
; 500  : 
; 501  :         _Pnode->_Left       = _Wherenode;

  001c1	89 31		 mov	 DWORD PTR [ecx], esi

; 502  :         _Wherenode->_Parent = _Pnode;

  001c3	89 0a		 mov	 DWORD PTR [edx], ecx

; 603  :                         _Lrotate(_Fixnodeparent);
; 604  :                         _Pnode = _Fixnodeparent->_Right;

  001c5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c8	eb 03		 jmp	 SHORT $LN87@Extract
$LN95@Extract:
  001ca	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN87@Extract:

; 605  :                     }
; 606  : 
; 607  :                     if (_Pnode->_Isnil) {

  001cd	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d1	0f 85 d0 00 00
	00		 jne	 $LN2@Extract

; 608  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 609  :                     } else if (_Pnode->_Left->_Color == _Black
; 610  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001dd	75 0d		 jne	 SHORT $LN97@Extract
  001df	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e6	0f 84 b4 00 00
	00		 je	 $LN142@Extract
$LN97@Extract:

; 611  :                         _Pnode->_Color = _Red;
; 612  :                         _Fixnode       = _Fixnodeparent;
; 613  :                     } else { // must rearrange right subtree
; 614  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  001f2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f6	75 15		 jne	 SHORT $LN33@Extract

; 615  :                             _Pnode->_Left->_Color = _Black;

  001f8	8b 01		 mov	 eax, DWORD PTR [ecx]

; 616  :                             _Pnode->_Color        = _Red;
; 617  :                             _Rrotate(_Pnode);

  001fa	51		 push	 ecx
  001fb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001ff	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00203	8b cb		 mov	 ecx, ebx
  00205	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Rrotate

; 618  :                             _Pnode = _Fixnodeparent->_Right;

  0020a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 619  :                         }
; 620  : 
; 621  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0020d	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00210	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 622  :                         _Fixnodeparent->_Color = _Black;

  00213	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 623  :                         _Pnode->_Right->_Color = _Black;

  00217	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 624  :                         _Lrotate(_Fixnodeparent);

  0021a	8b cb		 mov	 ecx, ebx
  0021c	56		 push	 esi
  0021d	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00221	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Lrotate

; 625  :                         break; // tree now recolored/rebalanced

  00226	e9 d3 00 00 00	 jmp	 $LN3@Extract
$LN26@Extract:

; 626  :                     }
; 627  :                 } else { // fixup right subtree
; 628  :                     _Pnode = _Fixnodeparent->_Left;
; 629  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0022b	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0022f	75 55		 jne	 SHORT $LN96@Extract

; 630  :                         _Pnode->_Color         = _Black;

  00231	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 506  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 631  :                         _Fixnodeparent->_Color = _Red;

  00237	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 507  :         _Wherenode->_Left = _Pnode->_Right;

  0023b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0023e	89 06		 mov	 DWORD PTR [esi], eax

; 508  : 
; 509  :         if (!_Pnode->_Right->_Isnil) {

  00240	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00243	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00247	75 03		 jne	 SHORT $LN69@Extract

; 510  :             _Pnode->_Right->_Parent = _Wherenode;

  00249	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN69@Extract:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Parent = _Wherenode->_Parent;

  0024c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0024f	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00252	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 514  : 
; 515  :         if (_Wherenode == _Myhead->_Parent) {

  00255	8b 03		 mov	 eax, DWORD PTR [ebx]
  00257	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0025a	75 0c		 jne	 SHORT $LN70@Extract

; 516  :             _Myhead->_Parent = _Pnode;

  0025c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 521  :         }
; 522  : 
; 523  :         _Pnode->_Right      = _Wherenode;

  0025f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 524  :         _Wherenode->_Parent = _Pnode;

  00262	89 0a		 mov	 DWORD PTR [edx], ecx

; 632  :                         _Rrotate(_Fixnodeparent);
; 633  :                         _Pnode = _Fixnodeparent->_Left;

  00264	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00266	eb 21		 jmp	 SHORT $LN86@Extract
$LN70@Extract:

; 517  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00268	8b 02		 mov	 eax, DWORD PTR [edx]
  0026a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0026d	75 0c		 jne	 SHORT $LN72@Extract

; 518  :             _Wherenode->_Parent->_Right = _Pnode;

  0026f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 521  :         }
; 522  : 
; 523  :         _Pnode->_Right      = _Wherenode;

  00272	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 524  :         _Wherenode->_Parent = _Pnode;

  00275	89 0a		 mov	 DWORD PTR [edx], ecx

; 632  :                         _Rrotate(_Fixnodeparent);
; 633  :                         _Pnode = _Fixnodeparent->_Left;

  00277	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00279	eb 0e		 jmp	 SHORT $LN86@Extract
$LN72@Extract:

; 520  :             _Wherenode->_Parent->_Left = _Pnode;

  0027b	89 08		 mov	 DWORD PTR [eax], ecx

; 521  :         }
; 522  : 
; 523  :         _Pnode->_Right      = _Wherenode;

  0027d	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 524  :         _Wherenode->_Parent = _Pnode;

  00280	89 0a		 mov	 DWORD PTR [edx], ecx

; 632  :                         _Rrotate(_Fixnodeparent);
; 633  :                         _Pnode = _Fixnodeparent->_Left;

  00282	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00284	eb 03		 jmp	 SHORT $LN86@Extract
$LN96@Extract:
  00286	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN86@Extract:

; 634  :                     }
; 635  : 
; 636  :                     if (_Pnode->_Isnil) {

  00289	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0028d	75 18		 jne	 SHORT $LN2@Extract

; 637  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 638  :                     } else if (_Pnode->_Right->_Color == _Black
; 639  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  0028f	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00292	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00296	75 2c		 jne	 SHORT $LN98@Extract
  00298	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0029e	75 24		 jne	 SHORT $LN98@Extract
$LN142@Extract:

; 597  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002a0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002a3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a9	8b 4d f4	 mov	 ecx, DWORD PTR tv1093[ebp]
  002ac	8b f9		 mov	 edi, ecx
  002ae	8b 32		 mov	 esi, DWORD PTR [edx]
  002b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002b3	74 49		 je	 SHORT $LN3@Extract
  002b5	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  002b9	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  002bc	0f 84 a1 fe ff
	ff		 je	 $LL4@Extract
  002c2	eb 3a		 jmp	 SHORT $LN3@Extract
$LN98@Extract:

; 640  :                         _Pnode->_Color = _Red;
; 641  :                         _Fixnode       = _Fixnodeparent;
; 642  :                     } else { // must rearrange left subtree
; 643  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002c4	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ca	75 17		 jne	 SHORT $LN101@Extract

; 644  :                             _Pnode->_Right->_Color = _Black;

  002cc	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 645  :                             _Pnode->_Color         = _Red;
; 646  :                             _Lrotate(_Pnode);

  002d0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002d3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  002d7	51		 push	 ecx
  002d8	8b cb		 mov	 ecx, ebx
  002da	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Lrotate

; 647  :                             _Pnode = _Fixnodeparent->_Left;

  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	eb 03		 jmp	 SHORT $LN39@Extract
$LN101@Extract:

; 640  :                         _Pnode->_Color = _Red;
; 641  :                         _Fixnode       = _Fixnodeparent;
; 642  :                     } else { // must rearrange left subtree
; 643  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e3	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN39@Extract:

; 648  :                         }
; 649  : 
; 650  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002e6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002e9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 651  :                         _Fixnodeparent->_Color = _Black;

  002ec	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 652  :                         _Pnode->_Left->_Color  = _Black;

  002f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 653  :                         _Rrotate(_Fixnodeparent);

  002f2	8b cb		 mov	 ecx, ebx
  002f4	56		 push	 esi
  002f5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002f9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Rrotate
$LN3@Extract:

; 654  :                         break; // tree now recolored/rebalanced
; 655  :                     }
; 656  :                 }
; 657  :             }
; 658  : 
; 659  :             _Fixnode->_Color = _Black; // stopping node is black

  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00301	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 660  :         }
; 661  : 
; 662  :         if (0 < _Mysize) {

  00305	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00308	85 c9		 test	 ecx, ecx
  0030a	74 04		 je	 SHORT $LN40@Extract

; 663  :             --_Mysize;

  0030c	49		 dec	 ecx
  0030d	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 664  :         }
; 665  : 
; 666  :         return _Erasednode;
; 667  :     }

  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1953 :     void _Alloc_sentinel_and_proxy() {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00001	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 1953 :     void _Alloc_sentinel_and_proxy() {

  00003	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000d	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0000f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00012	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00015	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1954 :         const auto _Scary = _Get_scary();
; 1955 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());
; 1956 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);
; 1957 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0001b	89 06		 mov	 DWORD PTR [esi], eax
  0001d	5e		 pop	 esi

; 1958 :         _Proxy._Release();
; 1959 :     }

  0001e	c3		 ret	 0
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Alloc_sentinel_and_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1648 :         if (max_size() == _Get_scary()->_Mysize) {

  00000	81 79 04 aa aa
	aa 0a		 cmp	 DWORD PTR [ecx+4], 178956970 ; 0aaaaaaaH
  00007	0f 84 00 00 00
	00		 je	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error

; 1649 :             _Throw_tree_length_error();
; 1650 :         }
; 1651 :     }

  0000d	c3		 ret	 0
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CItemData *> >::_Vector_val<std::_Simple_types<CItemData *> >, COMDAT
; _this$ = ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CItemData *> >::_Vector_val<std::_Simple_types<CItemData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Getal@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEAAV?$allocator@PAVCItemData@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEAAV?$allocator@PAVCItemData@@@2@XZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Getal, COMDAT
; _this$ = ecx

; 2227 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 2228 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEAAV?$allocator@PAVCItemData@@@2@XZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?deallocate@?$allocator@PAVCItemData@@@std@@QAEXQAPAVCItemData@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVCItemData@@@std@@QAEXQAPAVCItemData@@I@Z PROC ; std::allocator<CItemData *>::deallocate, COMDAT
; _this$dead$ = ecx

; 982  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 983  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 984  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00010	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00016	72 12		 jb	 SHORT $LN12@deallocate

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00018	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00020	83 c0 fc	 add	 eax, -4			; fffffffcH
  00023	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00026	77 10		 ja	 SHORT $LN11@deallocate

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00028	8b c2		 mov	 eax, edx
$LN12@deallocate:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00031	83 c4 08	 add	 esp, 8

; 986  :     }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN11@deallocate:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 __invoke_watson
$LN15@deallocate:
  00047	cc		 int	 3
?deallocate@?$allocator@PAVCItemData@@@std@@QAEXQAPAVCItemData@@I@Z ENDP ; std::allocator<CItemData *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??0?$allocator@PAVCItemData@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCItemData@@@std@@QAE@XZ PROC		; std::allocator<CItemData *>::allocator<CItemData *>, COMDAT
; _this$ = ecx

; 974  :     constexpr allocator() noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAVCItemData@@@std@@QAE@XZ ENDP		; std::allocator<CItemData *>::allocator<CItemData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 1172 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN11@Tree_temp_

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN11@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAPAU?$pair@MH@0@QAU10@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -24						; size = 8
__Last$1$ = -16						; size = 4
tv755 = -12						; size = 4
__First$1$ = -8						; size = 4
__Mid$1$ = -4						; size = 4
__Pred$ = 8						; size = 1
??$_Insertion_sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAPAU?$pair@MH@0@QAU10@0U?$less@X@0@@Z PROC ; std::_Insertion_sort_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 8241 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	8b c2		 mov	 eax, edx
  00008	8b d1		 mov	 edx, ecx
  0000a	89 45 f0	 mov	 DWORD PTR __Last$1$[ebp], eax
  0000d	89 55 f8	 mov	 DWORD PTR __First$1$[ebp], edx
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 8242 :     // insertion sort [_First, _Last)
; 8243 :     if (_First != _Last) {

  00013	3b d0		 cmp	 edx, eax
  00015	0f 84 08 01 00
	00		 je	 $LN3@Insertion_

; 8244 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  0001b	8d 4a 08	 lea	 ecx, DWORD PTR [edx+8]
  0001e	89 4d fc	 mov	 DWORD PTR __Mid$1$[ebp], ecx
  00021	3b c8		 cmp	 ecx, eax
  00023	0f 84 fa 00 00
	00		 je	 $LN3@Insertion_
  00029	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  0002c	89 45 f4	 mov	 DWORD PTR tv755[ebp], eax
  0002f	8b f0		 mov	 esi, eax
$LL4@Insertion_:

; 8246 :             _Iter_value_t<_BidIt> _Val(_STD move(*_Mid));

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00035	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8246 :             _Iter_value_t<_BidIt> _Val(_STD move(*_Mid));

  00039	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  0003c	89 45 e8	 mov	 DWORD PTR __Val$1[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0003f	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR __Val$1[ebp]
  00044	0f 2f c1	 comiss	 xmm0, xmm1
  00047	76 04		 jbe	 SHORT $LN23@Insertion_
  00049	0c ff		 or	 al, 255			; 000000ffH
  0004b	eb 33		 jmp	 SHORT $LN14@Insertion_
$LN23@Insertion_:
  0004d	0f 2f c8	 comiss	 xmm1, xmm0
  00050	76 04		 jbe	 SHORT $LN21@Insertion_
  00052	b0 01		 mov	 al, 1
  00054	eb 0f		 jmp	 SHORT $LN20@Insertion_
$LN21@Insertion_:
  00056	0f 2e c8	 ucomiss xmm1, xmm0
  00059	9f		 lahf
  0005a	f6 c4 44	 test	 ah, 68			; 00000044H
  0005d	7a 04		 jp	 SHORT $LN19@Insertion_
  0005f	32 c0		 xor	 al, al
  00061	eb 02		 jmp	 SHORT $LN20@Insertion_
$LN19@Insertion_:
  00063	b0 80		 mov	 al, 128			; 00000080H
$LN20@Insertion_:
  00065	8b 75 f4	 mov	 esi, DWORD PTR tv755[ebp]

; 51   :         return _Val._Value == 0;

  00068	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0006a	75 14		 jne	 SHORT $LN14@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0006c	3b 1e		 cmp	 ebx, DWORD PTR [esi]
  0006e	74 0d		 je	 SHORT $LN33@Insertion_
$LN32@Insertion_:
  00070	b8 01 00 00 00	 mov	 eax, 1
  00075	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  0007a	0f 4c c1	 cmovl	 eax, ecx
$LN33@Insertion_:
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Mid$1$[ebp]
$LN14@Insertion_:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00080	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8248 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  00082	75 2b		 jne	 SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 5194 :     while (_First != _Last) {

  00084	8b 7d f8	 mov	 edi, DWORD PTR __First$1$[ebp]
  00087	3b cf		 cmp	 ecx, edi
  00089	74 1e		 je	 SHORT $LN42@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8249 :                 _STD _Move_backward_unchecked(_First, _Mid, ++_Hole);

  0008b	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0008e	66 90		 npad	 2
$LL89@Insertion_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00090	8b 42 f4	 mov	 eax, DWORD PTR [edx-12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 5195 :         *--_Dest = _STD move(*--_Last);

  00093	8b ca		 mov	 ecx, edx
  00095	83 ea 08	 sub	 edx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00098	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  0009b	8b 02		 mov	 eax, DWORD PTR [edx]
  0009d	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 5194 :     while (_First != _Last) {

  0009f	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  000a2	3b c7		 cmp	 eax, edi
  000a4	75 ea		 jne	 SHORT $LL89@Insertion_
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __Mid$1$[ebp]
$LN42@Insertion_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  000a9	89 1e		 mov	 DWORD PTR [esi], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8251 :             } else { // look for insertion point after first

  000ab	8b d7		 mov	 edx, edi
  000ad	eb 5f		 jmp	 SHORT $LN100@Insertion_
$LN9@Insertion_:

; 8252 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  000af	8b d1		 mov	 edx, ecx
$LL7@Insertion_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000b1	f3 0f 10 42 f8	 movss	 xmm0, DWORD PTR [edx-8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8252 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  000b6	83 ea 08	 sub	 edx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000b9	0f 2f c1	 comiss	 xmm0, xmm1
  000bc	76 04		 jbe	 SHORT $LN61@Insertion_
  000be	0c ff		 or	 al, 255			; 000000ffH
  000c0	eb 2e		 jmp	 SHORT $LN71@Insertion_
$LN61@Insertion_:
  000c2	0f 2f c8	 comiss	 xmm1, xmm0
  000c5	76 04		 jbe	 SHORT $LN59@Insertion_
  000c7	b0 01		 mov	 al, 1
  000c9	eb 0f		 jmp	 SHORT $LN58@Insertion_
$LN59@Insertion_:
  000cb	0f 2e c8	 ucomiss xmm1, xmm0
  000ce	9f		 lahf
  000cf	f6 c4 44	 test	 ah, 68			; 00000044H
  000d2	7a 04		 jp	 SHORT $LN57@Insertion_
  000d4	32 c0		 xor	 al, al
  000d6	eb 02		 jmp	 SHORT $LN58@Insertion_
$LN57@Insertion_:
  000d8	b0 80		 mov	 al, 128			; 00000080H
$LN58@Insertion_:

; 51   :         return _Val._Value == 0;

  000da	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  000dc	75 12		 jne	 SHORT $LN71@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000de	3b 5a 04	 cmp	 ebx, DWORD PTR [edx+4]
  000e1	74 0d		 je	 SHORT $LN71@Insertion_
$LN70@Insertion_:
  000e3	b8 01 00 00 00	 mov	 eax, 1
  000e8	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  000ed	0f 4c c1	 cmovl	 eax, ecx
$LN71@Insertion_:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  000f0	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8252 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  000f2	75 0e		 jne	 SHORT $LN6@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  000f4	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  000f8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000fb	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8252 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  000fe	8b fa		 mov	 edi, edx
  00100	eb af		 jmp	 SHORT $LL7@Insertion_
$LN6@Insertion_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  00102	8b 55 f8	 mov	 edx, DWORD PTR __First$1$[ebp]
  00105	8b 4d fc	 mov	 ecx, DWORD PTR __Mid$1$[ebp]
  00108	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0010b	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
$LN100@Insertion_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8244 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  0010e	8b 45 f0	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00111	83 c1 08	 add	 ecx, 8
  00114	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1
  00118	89 4d fc	 mov	 DWORD PTR __Mid$1$[ebp], ecx
  0011b	3b c8		 cmp	 ecx, eax
  0011d	0f 85 0e ff ff
	ff		 jne	 $LL4@Insertion_
$LN3@Insertion_:

; 8253 :                     *_Hole = _STD move(*_Prev); // move hole down
; 8254 :                 }
; 8255 : 
; 8256 :                 *_Hole = _STD move(_Val); // insert element in hole
; 8257 :             }
; 8258 :         }
; 8259 :     }
; 8260 : 
; 8261 :     return _Last;
; 8262 : }

  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c3		 ret	 0
??$_Insertion_sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAPAU?$pair@MH@0@QAU10@0U?$less@X@0@@Z ENDP ; std::_Insertion_sort_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
;	COMDAT ??$?RMM@_Synth_three_way@std@@SA?A_PABM0@Z
_TEXT	SEGMENT
??$?RMM@_Synth_three_way@std@@SA?A_PABM0@Z PROC		; std::_Synth_three_way::operator()<float,float>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 352  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 353  :             return _Left <=> _Right;

  00000	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00004	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00008	0f 2f c1	 comiss	 xmm0, xmm1
  0000b	76 03		 jbe	 SHORT $LN7@operator
  0000d	0c ff		 or	 al, 255			; 000000ffH

; 354  :         } else {
; 355  :             if (_Left < _Right) {
; 356  :                 return weak_ordering::less;
; 357  :             } else if (_Right < _Left) {
; 358  :                 return weak_ordering::greater;
; 359  :             } else {
; 360  :                 return weak_ordering::equivalent;
; 361  :             }
; 362  :         }
; 363  :     }

  0000f	c3		 ret	 0
$LN7@operator:

; 352  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 353  :             return _Left <=> _Right;

  00010	0f 2f c8	 comiss	 xmm1, xmm0
  00013	76 03		 jbe	 SHORT $LN5@operator
  00015	b0 01		 mov	 al, 1

; 354  :         } else {
; 355  :             if (_Left < _Right) {
; 356  :                 return weak_ordering::less;
; 357  :             } else if (_Right < _Left) {
; 358  :                 return weak_ordering::greater;
; 359  :             } else {
; 360  :                 return weak_ordering::equivalent;
; 361  :             }
; 362  :         }
; 363  :     }

  00017	c3		 ret	 0
$LN5@operator:

; 352  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 353  :             return _Left <=> _Right;

  00018	0f 2e c8	 ucomiss xmm1, xmm0
  0001b	9f		 lahf
  0001c	f6 c4 44	 test	 ah, 68			; 00000044H
  0001f	7a 03		 jp	 SHORT $LN3@operator
  00021	32 c0		 xor	 al, al

; 354  :         } else {
; 355  :             if (_Left < _Right) {
; 356  :                 return weak_ordering::less;
; 357  :             } else if (_Right < _Left) {
; 358  :                 return weak_ordering::greater;
; 359  :             } else {
; 360  :                 return weak_ordering::equivalent;
; 361  :             }
; 362  :         }
; 363  :     }

  00023	c3		 ret	 0
$LN3@operator:

; 352  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 353  :             return _Left <=> _Right;

  00024	b0 80		 mov	 al, 128			; 00000080H

; 354  :         } else {
; 355  :             if (_Left < _Right) {
; 356  :                 return weak_ordering::less;
; 357  :             } else if (_Right < _Left) {
; 358  :                 return weak_ordering::greater;
; 359  :             } else {
; 360  :                 return weak_ordering::equivalent;
; 361  :             }
; 362  :         }
; 363  :     }

  00026	c3		 ret	 0
??$?RMM@_Synth_three_way@std@@SA?A_PABM0@Z ENDP		; std::_Synth_three_way::operator()<float,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
;	COMDAT ??$?RHH@_Synth_three_way@std@@SA?A_PABH0@Z
_TEXT	SEGMENT
??$?RHH@_Synth_three_way@std@@SA?A_PABH0@Z PROC		; std::_Synth_three_way::operator()<int,int>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 352  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 353  :             return _Left <=> _Right;

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00004	75 03		 jne	 SHORT $LN5@operator
  00006	32 c0		 xor	 al, al

; 354  :         } else {
; 355  :             if (_Left < _Right) {
; 356  :                 return weak_ordering::less;
; 357  :             } else if (_Right < _Left) {
; 358  :                 return weak_ordering::greater;
; 359  :             } else {
; 360  :                 return weak_ordering::equivalent;
; 361  :             }
; 362  :         }
; 363  :     }

  00008	c3		 ret	 0
$LN5@operator:
  00009	56		 push	 esi

; 352  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 353  :             return _Left <=> _Right;

  0000a	be 01 00 00 00	 mov	 esi, 1
  0000f	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00014	0f 4d c6	 cmovge	 eax, esi
  00017	5e		 pop	 esi

; 354  :         } else {
; 355  :             if (_Left < _Right) {
; 356  :                 return weak_ordering::less;
; 357  :             } else if (_Right < _Left) {
; 358  :                 return weak_ordering::greater;
; 359  :             } else {
; 360  :                 return weak_ordering::equivalent;
; 361  :             }
; 362  :         }
; 363  :     }

  00018	c3		 ret	 0
??$?RHH@_Synth_three_way@std@@SA?A_PABH0@Z ENDP		; std::_Synth_three_way::operator()<int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Make_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -24						; size = 8
__Bottom$1$ = -16					; size = 4
__Val$1$ = -12						; size = 4
__Hole$1$ = -8						; size = 4
__Max_sequence_non_leaf$1$ = -4				; size = 4
__Pred$ = 8						; size = 1
??$_Make_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z PROC ; std::_Make_heap_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 121  : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b c2		 mov	 eax, edx
  0000a	8b f1		 mov	 esi, ecx

; 122  :     // make [_First, _Last) into a heap
; 123  :     using _Diff   = _Iter_diff_t<_RanIt>;
; 124  :     _Diff _Bottom = _Last - _First;

  0000c	2b c6		 sub	 eax, esi
  0000e	c1 f8 03	 sar	 eax, 3

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00011	8b d0		 mov	 edx, eax
  00013	89 45 f0	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  00016	d1 fa		 sar	 edx, 1
  00018	57		 push	 edi
  00019	85 d2		 test	 edx, edx
  0001b	0f 8e 3c 01 00
	00		 jle	 $LN3@Make_heap_
  00021	48		 dec	 eax
  00022	d1 f8		 sar	 eax, 1
  00024	89 45 fc	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
$LL4@Make_heap_:

; 128  :         _Iter_value_t<_RanIt> _Val(_STD move(*(_First + _Hole)));

  00027	8b 44 d6 f8	 mov	 eax, DWORD PTR [esi+edx*8-8]
  0002b	4a		 dec	 edx
  0002c	89 45 e8	 mov	 DWORD PTR __Val$1[ebp], eax

; 129  :         _STD _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  0002f	8b da		 mov	 ebx, edx

; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00031	8b 45 fc	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  00034	8b ca		 mov	 ecx, edx

; 126  :         // reheap top half, bottom to top
; 127  :         --_Hole;

  00036	89 55 f8	 mov	 DWORD PTR __Hole$1$[ebp], edx

; 128  :         _Iter_value_t<_RanIt> _Val(_STD move(*(_First + _Hole)));

  00039	8b 7c d6 04	 mov	 edi, DWORD PTR [esi+edx*8+4]
  0003d	89 7d f4	 mov	 DWORD PTR __Val$1$[ebp], edi

; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00040	3b d0		 cmp	 edx, eax
  00042	0f 8d 7e 00 00
	00		 jge	 $LN8@Make_heap_
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@Make_heap_:

; 70   :         _Idx = 2 * _Idx + 2;

  00050	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00053	f3 0f 10 4c fe
	10		 movss	 xmm1, DWORD PTR [esi+edi*8+16]
  00059	f3 0f 10 44 fe
	08		 movss	 xmm0, DWORD PTR [esi+edi*8+8]
  0005f	0f 2f c1	 comiss	 xmm0, xmm1
  00062	76 05		 jbe	 SHORT $LN23@Make_heap_
  00064	80 c9 ff	 or	 cl, 255			; 000000ffH
  00067	eb 33		 jmp	 SHORT $LN33@Make_heap_
$LN23@Make_heap_:
  00069	0f 2f c8	 comiss	 xmm1, xmm0
  0006c	76 04		 jbe	 SHORT $LN21@Make_heap_
  0006e	b1 01		 mov	 cl, 1
  00070	eb 0f		 jmp	 SHORT $LN20@Make_heap_
$LN21@Make_heap_:
  00072	0f 2e c8	 ucomiss xmm1, xmm0
  00075	9f		 lahf
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN19@Make_heap_
  0007b	32 c9		 xor	 cl, cl
  0007d	eb 02		 jmp	 SHORT $LN20@Make_heap_
$LN19@Make_heap_:
  0007f	b1 80		 mov	 cl, 128			; 00000080H
$LN20@Make_heap_:

; 51   :         return _Val._Value == 0;

  00081	84 c9		 test	 cl, cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00083	75 17		 jne	 SHORT $LN33@Make_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00085	8b 44 fe 14	 mov	 eax, DWORD PTR [esi+edi*8+20]
  00089	3b 44 fe 0c	 cmp	 eax, DWORD PTR [esi+edi*8+12]
  0008d	74 0d		 je	 SHORT $LN33@Make_heap_
$LN32@Make_heap_:
  0008f	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00094	b8 01 00 00 00	 mov	 eax, 1
  00099	0f 4d c8	 cmovge	 ecx, eax
$LN33@Make_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0009c	33 c0		 xor	 eax, eax
  0009e	80 f9 ff	 cmp	 cl, -1
  000a1	0f 95 c0	 setne	 al
  000a4	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  000a7	03 cf		 add	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  000a9	8b 04 ce	 mov	 eax, DWORD PTR [esi+ecx*8]
  000ac	89 04 de	 mov	 DWORD PTR [esi+ebx*8], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  000af	8b 44 ce 04	 mov	 eax, DWORD PTR [esi+ecx*8+4]
  000b3	89 44 de 04	 mov	 DWORD PTR [esi+ebx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 75   :         _Hole             = _Idx;

  000b7	8b d9		 mov	 ebx, ecx
  000b9	8b 45 fc	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  000bc	3b c8		 cmp	 ecx, eax
  000be	7c 90		 jl	 SHORT $LL7@Make_heap_
  000c0	8b 55 f8	 mov	 edx, DWORD PTR __Hole$1$[ebp]
  000c3	8b 7d f4	 mov	 edi, DWORD PTR __Val$1$[ebp]
$LN8@Make_heap_:

; 76   :     }
; 77   : 
; 78   :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  000c6	3b d8		 cmp	 ebx, eax
  000c8	75 1c		 jne	 SHORT $LN10@Make_heap_
  000ca	8b 4d f0	 mov	 ecx, DWORD PTR __Bottom$1$[ebp]
  000cd	f6 c1 01	 test	 cl, 1
  000d0	75 14		 jne	 SHORT $LN10@Make_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  000d2	8b 44 ce f8	 mov	 eax, DWORD PTR [esi+ecx*8-8]
  000d6	89 04 de	 mov	 DWORD PTR [esi+ebx*8], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  000d9	8b 44 ce fc	 mov	 eax, DWORD PTR [esi+ecx*8-4]
  000dd	89 44 de 04	 mov	 DWORD PTR [esi+ebx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 80   :         _Hole             = _Bottom - 1;

  000e1	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  000e4	8b d8		 mov	 ebx, eax
$LN10@Make_heap_:

; 27   :         _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  000e6	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR __Val$1[ebp]
  000eb	3b d3		 cmp	 edx, ebx
  000ed	7d 5d		 jge	 SHORT $LN99@Make_heap_
  000ef	90		 npad	 1
$LL49@Make_heap_:

; 26   :     for (_Diff _Idx                                                         = (_Hole - 1) >> 1; // shift for codegen

  000f0	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  000f3	d1 f9		 sar	 ecx, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000f5	f3 0f 10 04 ce	 movss	 xmm0, DWORD PTR [esi+ecx*8]
  000fa	0f 2f c8	 comiss	 xmm1, xmm0
  000fd	76 04		 jbe	 SHORT $LN62@Make_heap_
  000ff	0c ff		 or	 al, 255			; 000000ffH
  00101	eb 32		 jmp	 SHORT $LN53@Make_heap_
$LN62@Make_heap_:
  00103	0f 2f c1	 comiss	 xmm0, xmm1
  00106	76 04		 jbe	 SHORT $LN60@Make_heap_
  00108	b0 01		 mov	 al, 1
  0010a	eb 0f		 jmp	 SHORT $LN59@Make_heap_
$LN60@Make_heap_:
  0010c	0f 2e c1	 ucomiss xmm0, xmm1
  0010f	9f		 lahf
  00110	f6 c4 44	 test	 ah, 68			; 00000044H
  00113	7a 04		 jp	 SHORT $LN58@Make_heap_
  00115	32 c0		 xor	 al, al
  00117	eb 02		 jmp	 SHORT $LN59@Make_heap_
$LN58@Make_heap_:
  00119	b0 80		 mov	 al, 128			; 00000080H
$LN59@Make_heap_:

; 51   :         return _Val._Value == 0;

  0011b	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0011d	75 16		 jne	 SHORT $LN53@Make_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0011f	39 7c ce 04	 cmp	 DWORD PTR [esi+ecx*8+4], edi
  00123	74 0d		 je	 SHORT $LN72@Make_heap_
$LN71@Make_heap_:
  00125	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0012a	ba 01 00 00 00	 mov	 edx, 1
  0012f	0f 4d c2	 cmovge	 eax, edx
$LN72@Make_heap_:
  00132	8b 55 f8	 mov	 edx, DWORD PTR __Hole$1$[ebp]
$LN53@Make_heap_:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00135	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 27   :         _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00137	75 13		 jne	 SHORT $LN99@Make_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00139	f3 0f 11 04 de	 movss	 DWORD PTR [esi+ebx*8], xmm0

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  0013e	8b 44 ce 04	 mov	 eax, DWORD PTR [esi+ecx*8+4]
  00142	89 44 de 04	 mov	 DWORD PTR [esi+ebx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 30   :         _Hole             = _Idx;

  00146	8b d9		 mov	 ebx, ecx
  00148	3b d1		 cmp	 edx, ecx
  0014a	7c a4		 jl	 SHORT $LL49@Make_heap_
$LN99@Make_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0014c	f3 0f 11 0c de	 movss	 DWORD PTR [esi+ebx*8], xmm1

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  00151	89 7c de 04	 mov	 DWORD PTR [esi+ebx*8+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00155	85 d2		 test	 edx, edx
  00157	0f 8f ca fe ff
	ff		 jg	 $LL4@Make_heap_
$LN3@Make_heap_:

; 130  :     }
; 131  : }

  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	5b		 pop	 ebx
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c3		 ret	 0
??$_Make_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ENDP ; std::_Make_heap_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -16						; size = 8
tv290 = -8						; size = 4
__Pred$ = 8						; size = 1
??$_Sort_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z PROC ; std::_Sort_heap_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7146 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b fa		 mov	 edi, edx

; 7148 :     for (; _Last - _First >= 2; --_Last) {

  0000d	2b d3		 sub	 edx, ebx
  0000f	8b c2		 mov	 eax, edx
  00011	83 e0 f8	 and	 eax, -8			; fffffff8H
  00014	83 f8 10	 cmp	 eax, 16			; 00000010H
  00017	7c 49		 jl	 SHORT $LN3@Sort_heap_
  00019	83 c7 f8	 add	 edi, -8			; fffffff8H
  0001c	83 c2 f8	 add	 edx, -8			; fffffff8H
  0001f	89 55 f8	 mov	 DWORD PTR tv290[ebp], edx
$LL4@Sort_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  00022	8b 07		 mov	 eax, DWORD PTR [edi]

; 93   :     _STD _Pop_heap_hole_by_index(

  00024	8b f2		 mov	 esi, edx

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  00026	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 93   :     _STD _Pop_heap_hole_by_index(

  00029	ff 75 08	 push	 DWORD PTR __Pred$[ebp]

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  0002c	89 45 f0	 mov	 DWORD PTR __Val$1[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0002f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00031	89 07		 mov	 DWORD PTR [edi], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  00033	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00036	89 44 1a 04	 mov	 DWORD PTR [edx+ebx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  0003a	8d 45 f0	 lea	 eax, DWORD PTR __Val$1[ebp]
  0003d	50		 push	 eax

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  0003e	89 4d f4	 mov	 DWORD PTR __Val$1[ebp+4], ecx

; 93   :     _STD _Pop_heap_hole_by_index(

  00041	33 d2		 xor	 edx, edx
  00043	c1 fe 03	 sar	 esi, 3
  00046	8b cb		 mov	 ecx, ebx
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 7148 :     for (; _Last - _First >= 2; --_Last) {

  0004e	8b 55 f8	 mov	 edx, DWORD PTR tv290[ebp]
  00051	8d 7f f8	 lea	 edi, DWORD PTR [edi-8]
  00054	83 ea 08	 sub	 edx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 7148 :     for (; _Last - _First >= 2; --_Last) {

  0005a	89 55 f8	 mov	 DWORD PTR tv290[ebp], edx
  0005d	83 fe 02	 cmp	 esi, 2
  00060	7d c0		 jge	 SHORT $LL4@Sort_heap_
$LN3@Sort_heap_:

; 7149 :         _STD _Pop_heap_unchecked(_First, _Last, _Pred);
; 7150 :     }
; 7151 : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
??$_Sort_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ENDP ; std::_Sort_heap_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MH@std@@PAU12@@0@PAU?$pair@MH@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$1$ = -20					; size = 4
tv1141 = -16						; size = 4
__Pfirst$1$ = -12					; size = 4
__Gfirst$1$ = -12					; size = 4
__First$1$ = -8						; size = 4
__Glast$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 1
__Plast$1$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MH@std@@PAU12@@0@PAU?$pair@MH@0@0U?$less@X@0@@Z PROC ; std::_Partition_by_median_guess_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 8298 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	89 4d ec	 mov	 DWORD PTR ___$ReturnUdt$1$[ebp], ecx

; 8299 :     // partition [_First, _Last)
; 8300 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000e	8b c1		 mov	 eax, ecx
  00010	57		 push	 edi
  00011	8b fa		 mov	 edi, edx

; 8301 :     _STD _Guess_median_unchecked(_First, _Mid, _STD _Prev_iter(_Last), _Pred);

  00013	83 c1 f8	 add	 ecx, -8			; fffffff8H
  00016	2b c7		 sub	 eax, edi
  00018	89 7d f8	 mov	 DWORD PTR __First$1$[ebp], edi
  0001b	c1 f8 04	 sar	 eax, 4
  0001e	8d 14 c7	 lea	 edx, DWORD PTR [edi+eax*8]

; 8284 :     const _Diff _Count = _Last - _First;

  00021	8b c1		 mov	 eax, ecx
  00023	2b c7		 sub	 eax, edi

; 8299 :     // partition [_First, _Last)
; 8300 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00025	89 55 f4	 mov	 DWORD PTR __Pfirst$1$[ebp], edx

; 8284 :     const _Diff _Count = _Last - _First;

  00028	c1 f8 03	 sar	 eax, 3

; 8285 :     if (40 < _Count) { // Tukey's ninther

  0002b	83 f8 28	 cmp	 eax, 40			; 00000028H
  0002e	7e 60		 jle	 SHORT $LN346@Partition_

; 8286 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 8287 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 8288 :         _STD _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00030	8b 4d f8	 mov	 ecx, DWORD PTR __First$1$[ebp]
  00033	40		 inc	 eax
  00034	c1 f8 03	 sar	 eax, 3
  00037	8b d8		 mov	 ebx, eax
  00039	c1 e3 04	 shl	 ebx, 4
  0003c	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]
  00043	8b 45 f8	 mov	 eax, DWORD PTR __First$1$[ebp]
  00046	8d 14 3e	 lea	 edx, DWORD PTR [esi+edi]
  00049	03 c3		 add	 eax, ebx
  0004b	8b 7d 0c	 mov	 edi, DWORD PTR __Pred$[ebp]
  0004e	57		 push	 edi
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 8289 :         _STD _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00055	8b 55 f4	 mov	 edx, DWORD PTR __Pfirst$1$[ebp]
  00058	8b ca		 mov	 ecx, edx
  0005a	57		 push	 edi
  0005b	2b ce		 sub	 ecx, esi
  0005d	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 8290 :         _STD _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  00066	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  00069	83 c0 f8	 add	 eax, -8			; fffffff8H
  0006c	8b d0		 mov	 edx, eax
  0006e	57		 push	 edi
  0006f	50		 push	 eax
  00070	2b c3		 sub	 eax, ebx
  00072	2b d6		 sub	 edx, esi
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 8291 :         _STD _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  0007b	57		 push	 edi
  0007c	8b 7d f8	 mov	 edi, DWORD PTR __First$1$[ebp]
  0007f	52		 push	 edx
  00080	8b 55 f4	 mov	 edx, DWORD PTR __Pfirst$1$[ebp]
  00083	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  00086	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
  0008b	83 c4 20	 add	 esp, 32			; 00000020H

; 8292 :     } else {

  0008e	eb 0e		 jmp	 SHORT $LN347@Partition_
$LN346@Partition_:

; 8293 :         _STD _Med3_unchecked(_First, _Mid, _Last, _Pred);

  00090	ff 75 0c	 push	 DWORD PTR __Pred$[ebp]
  00093	51		 push	 ecx
  00094	8b cf		 mov	 ecx, edi
  00096	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
  0009b	83 c4 08	 add	 esp, 8
$LN347@Partition_:

; 8302 :     _RanIt _Pfirst = _Mid;
; 8303 :     _RanIt _Plast  = _STD _Next_iter(_Pfirst);

  0009e	8d 5a 08	 lea	 ebx, DWORD PTR [edx+8]
  000a1	89 5d 0c	 mov	 DWORD PTR __Plast$1$[ebp], ebx

; 8306 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  000a4	3b fa		 cmp	 edi, edx
  000a6	0f 83 97 00 00
	00		 jae	 $LN351@Partition_
  000ac	8b 5d f8	 mov	 ebx, DWORD PTR __First$1$[ebp]
  000af	90		 npad	 1
$LL2@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000b0	f3 0f 10 42 f8	 movss	 xmm0, DWORD PTR [edx-8]
  000b5	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  000b9	0f 2f c8	 comiss	 xmm1, xmm0
  000bc	76 04		 jbe	 SHORT $LN232@Partition_
  000be	0c ff		 or	 al, 255			; 000000ffH
  000c0	eb 31		 jmp	 SHORT $LN242@Partition_
$LN232@Partition_:
  000c2	0f 2f c1	 comiss	 xmm0, xmm1
  000c5	76 04		 jbe	 SHORT $LN230@Partition_
  000c7	b0 01		 mov	 al, 1
  000c9	eb 0f		 jmp	 SHORT $LN229@Partition_
$LN230@Partition_:
  000cb	0f 2e c1	 ucomiss xmm0, xmm1
  000ce	9f		 lahf
  000cf	f6 c4 44	 test	 ah, 68			; 00000044H
  000d2	7a 04		 jp	 SHORT $LN228@Partition_
  000d4	32 c0		 xor	 al, al
  000d6	eb 02		 jmp	 SHORT $LN229@Partition_
$LN228@Partition_:
  000d8	b0 80		 mov	 al, 128			; 00000080H
$LN229@Partition_:

; 51   :         return _Val._Value == 0;

  000da	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  000dc	75 15		 jne	 SHORT $LN242@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000de	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000e1	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  000e4	74 0d		 je	 SHORT $LN242@Partition_
$LN241@Partition_:
  000e6	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000eb	b9 01 00 00 00	 mov	 ecx, 1
  000f0	0f 4d c1	 cmovge	 eax, ecx
$LN242@Partition_:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  000f3	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8306 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  000f5	74 49		 je	 SHORT $LN387@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000f7	0f 2f c1	 comiss	 xmm0, xmm1
  000fa	76 04		 jbe	 SHORT $LN288@Partition_
  000fc	0c ff		 or	 al, 255			; 000000ffH
  000fe	eb 31		 jmp	 SHORT $LN298@Partition_
$LN288@Partition_:
  00100	0f 2f c8	 comiss	 xmm1, xmm0
  00103	76 04		 jbe	 SHORT $LN286@Partition_
  00105	b0 01		 mov	 al, 1
  00107	eb 0f		 jmp	 SHORT $LN285@Partition_
$LN286@Partition_:
  00109	0f 2e c8	 ucomiss xmm1, xmm0
  0010c	9f		 lahf
  0010d	f6 c4 44	 test	 ah, 68			; 00000044H
  00110	7a 04		 jp	 SHORT $LN284@Partition_
  00112	32 c0		 xor	 al, al
  00114	eb 02		 jmp	 SHORT $LN285@Partition_
$LN284@Partition_:
  00116	b0 80		 mov	 al, 128			; 00000080H
$LN285@Partition_:

; 51   :         return _Val._Value == 0;

  00118	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0011a	75 15		 jne	 SHORT $LN298@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0011c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0011f	3b 4a fc	 cmp	 ecx, DWORD PTR [edx-4]
  00122	74 0d		 je	 SHORT $LN298@Partition_
$LN297@Partition_:
  00124	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00129	b9 01 00 00 00	 mov	 ecx, 1
  0012e	0f 4d c1	 cmovge	 eax, ecx
$LN298@Partition_:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00131	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8306 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  00133	74 0b		 je	 SHORT $LN387@Partition_

; 8307 :         --_Pfirst;

  00135	83 c2 f8	 add	 edx, -8			; fffffff8H
  00138	3b da		 cmp	 ebx, edx
  0013a	0f 82 70 ff ff
	ff		 jb	 $LL2@Partition_
$LN387@Partition_:
  00140	8b 5d 0c	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
$LN351@Partition_:

; 8310 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00143	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  00146	3b d8		 cmp	 ebx, eax
  00148	0f 83 9a 00 00
	00		 jae	 $LN5@Partition_
  0014e	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
$LL4@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00152	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00156	0f 2f c8	 comiss	 xmm1, xmm0
  00159	76 04		 jbe	 SHORT $LN260@Partition_
  0015b	0c ff		 or	 al, 255			; 000000ffH
  0015d	eb 31		 jmp	 SHORT $LN270@Partition_
$LN260@Partition_:
  0015f	0f 2f c1	 comiss	 xmm0, xmm1
  00162	76 04		 jbe	 SHORT $LN258@Partition_
  00164	b0 01		 mov	 al, 1
  00166	eb 0f		 jmp	 SHORT $LN257@Partition_
$LN258@Partition_:
  00168	0f 2e c1	 ucomiss xmm0, xmm1
  0016b	9f		 lahf
  0016c	f6 c4 44	 test	 ah, 68			; 00000044H
  0016f	7a 04		 jp	 SHORT $LN256@Partition_
  00171	32 c0		 xor	 al, al
  00173	eb 02		 jmp	 SHORT $LN257@Partition_
$LN256@Partition_:
  00175	b0 80		 mov	 al, 128			; 00000080H
$LN257@Partition_:

; 51   :         return _Val._Value == 0;

  00177	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00179	75 15		 jne	 SHORT $LN270@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0017b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0017e	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00181	74 0d		 je	 SHORT $LN270@Partition_
$LN269@Partition_:
  00183	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00188	b9 01 00 00 00	 mov	 ecx, 1
  0018d	0f 4d c1	 cmovge	 eax, ecx
$LN270@Partition_:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00190	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8310 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00192	74 4e		 je	 SHORT $LN394@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00194	0f 2f c1	 comiss	 xmm0, xmm1
  00197	76 04		 jbe	 SHORT $LN316@Partition_
  00199	0c ff		 or	 al, 255			; 000000ffH
  0019b	eb 31		 jmp	 SHORT $LN326@Partition_
$LN316@Partition_:
  0019d	0f 2f c8	 comiss	 xmm1, xmm0
  001a0	76 04		 jbe	 SHORT $LN314@Partition_
  001a2	b0 01		 mov	 al, 1
  001a4	eb 0f		 jmp	 SHORT $LN313@Partition_
$LN314@Partition_:
  001a6	0f 2e c8	 ucomiss xmm1, xmm0
  001a9	9f		 lahf
  001aa	f6 c4 44	 test	 ah, 68			; 00000044H
  001ad	7a 04		 jp	 SHORT $LN312@Partition_
  001af	32 c0		 xor	 al, al
  001b1	eb 02		 jmp	 SHORT $LN313@Partition_
$LN312@Partition_:
  001b3	b0 80		 mov	 al, 128			; 00000080H
$LN313@Partition_:

; 51   :         return _Val._Value == 0;

  001b5	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  001b7	75 15		 jne	 SHORT $LN326@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 4b 04	 cmp	 ecx, DWORD PTR [ebx+4]
  001bf	74 0d		 je	 SHORT $LN326@Partition_
$LN325@Partition_:
  001c1	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  001c6	b9 01 00 00 00	 mov	 ecx, 1
  001cb	0f 4d c1	 cmovge	 eax, ecx
$LN326@Partition_:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  001ce	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8310 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  001d0	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  001d3	74 10		 je	 SHORT $LN388@Partition_

; 8311 :         ++_Plast;

  001d5	83 c3 08	 add	 ebx, 8
  001d8	3b d8		 cmp	 ebx, eax
  001da	0f 82 72 ff ff
	ff		 jb	 $LL4@Partition_

; 8310 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  001e0	eb 03		 jmp	 SHORT $LN388@Partition_
$LN394@Partition_:
  001e2	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
$LN388@Partition_:
  001e5	89 5d 0c	 mov	 DWORD PTR __Plast$1$[ebp], ebx
$LN5@Partition_:

; 8312 :     }
; 8313 : 
; 8314 :     _RanIt _Gfirst = _Plast;

  001e8	8b fb		 mov	 edi, ebx

; 8315 :     _RanIt _Glast  = _Pfirst;

  001ea	89 55 fc	 mov	 DWORD PTR __Glast$1$[ebp], edx
$LN449@Partition_:

; 8318 :         for (; _Gfirst < _Last; ++_Gfirst) {

  001ed	89 7d f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
$LL8@Partition_:
  001f0	3b f8		 cmp	 edi, eax
  001f2	0f 83 bf 00 00
	00		 jae	 $LN355@Partition_
  001f8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL11@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00200	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00204	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  00208	0f 2f c8	 comiss	 xmm1, xmm0
  0020b	76 04		 jbe	 SHORT $LN152@Partition_
  0020d	0c ff		 or	 al, 255			; 000000ffH
  0020f	eb 31		 jmp	 SHORT $LN162@Partition_
$LN152@Partition_:
  00211	0f 2f c1	 comiss	 xmm0, xmm1
  00214	76 04		 jbe	 SHORT $LN150@Partition_
  00216	b0 01		 mov	 al, 1
  00218	eb 0f		 jmp	 SHORT $LN149@Partition_
$LN150@Partition_:
  0021a	0f 2e c1	 ucomiss xmm0, xmm1
  0021d	9f		 lahf
  0021e	f6 c4 44	 test	 ah, 68			; 00000044H
  00221	7a 04		 jp	 SHORT $LN148@Partition_
  00223	32 c0		 xor	 al, al
  00225	eb 02		 jmp	 SHORT $LN149@Partition_
$LN148@Partition_:
  00227	b0 80		 mov	 al, 128			; 00000080H
$LN149@Partition_:

; 51   :         return _Val._Value == 0;

  00229	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0022b	75 15		 jne	 SHORT $LN162@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0022d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00230	3b 4f 04	 cmp	 ecx, DWORD PTR [edi+4]
  00233	74 0d		 je	 SHORT $LN162@Partition_
$LN161@Partition_:
  00235	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0023a	b9 01 00 00 00	 mov	 ecx, 1
  0023f	0f 4d c1	 cmovge	 eax, ecx
$LN162@Partition_:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00242	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8319 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  00244	74 5d		 je	 SHORT $LN9@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00246	0f 2f c1	 comiss	 xmm0, xmm1
  00249	76 04		 jbe	 SHORT $LN204@Partition_
  0024b	0c ff		 or	 al, 255			; 000000ffH
  0024d	eb 31		 jmp	 SHORT $LN214@Partition_
$LN204@Partition_:
  0024f	0f 2f c8	 comiss	 xmm1, xmm0
  00252	76 04		 jbe	 SHORT $LN202@Partition_
  00254	b0 01		 mov	 al, 1
  00256	eb 0f		 jmp	 SHORT $LN201@Partition_
$LN202@Partition_:
  00258	0f 2e c8	 ucomiss xmm1, xmm0
  0025b	9f		 lahf
  0025c	f6 c4 44	 test	 ah, 68			; 00000044H
  0025f	7a 04		 jp	 SHORT $LN200@Partition_
  00261	32 c0		 xor	 al, al
  00263	eb 02		 jmp	 SHORT $LN201@Partition_
$LN200@Partition_:
  00265	b0 80		 mov	 al, 128			; 00000080H
$LN201@Partition_:

; 51   :         return _Val._Value == 0;

  00267	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00269	75 15		 jne	 SHORT $LN214@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0026b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0026e	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00271	74 0d		 je	 SHORT $LN214@Partition_
$LN213@Partition_:
  00273	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00278	b9 01 00 00 00	 mov	 ecx, 1
  0027d	0f 4d c1	 cmovge	 eax, ecx
$LN214@Partition_:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00280	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8321 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  00282	74 2d		 je	 SHORT $LN389@Partition_

; 8322 :                 break;
; 8323 :             } else if (_Plast != _Gfirst) {

  00284	3b df		 cmp	 ebx, edi
  00286	74 18		 je	 SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00288	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]

; 140  :     _Left    = _STD move(_Right);

  0028c	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1
  00290	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 141  :     _Right   = _STD move(_Tmp);

  00293	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00297	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 140  :     _Left    = _STD move(_Right);

  0029a	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 141  :     _Right   = _STD move(_Tmp);

  0029d	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8318 :         for (; _Gfirst < _Last; ++_Gfirst) {

  002a0	83 c3 08	 add	 ebx, 8
$LN9@Partition_:
  002a3	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  002a6	83 c7 08	 add	 edi, 8
  002a9	3b f8		 cmp	 edi, eax
  002ab	0f 82 4f ff ff
	ff		 jb	 $LL11@Partition_
$LN389@Partition_:
  002b1	89 5d 0c	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  002b4	89 7d f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
$LN355@Partition_:

; 8331 :         for (; _First < _Glast; --_Glast) {

  002b7	8b 5d fc	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  002ba	8b 45 f8	 mov	 eax, DWORD PTR __First$1$[ebp]
  002bd	3b d8		 cmp	 ebx, eax
  002bf	0f 86 c9 00 00
	00		 jbe	 $LN448@Partition_
  002c5	8d 73 fc	 lea	 esi, DWORD PTR [ebx-4]
  002c8	bf 01 00 00 00	 mov	 edi, 1
  002cd	0f 1f 00	 npad	 3
$LL14@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  002d0	f3 0f 10 4e fc	 movss	 xmm1, DWORD PTR [esi-4]
  002d5	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  002d9	0f 2f c1	 comiss	 xmm0, xmm1
  002dc	76 04		 jbe	 SHORT $LN45@Partition_
  002de	0c ff		 or	 al, 255			; 000000ffH
  002e0	eb 2e		 jmp	 SHORT $LN36@Partition_
$LN45@Partition_:
  002e2	0f 2f c8	 comiss	 xmm1, xmm0
  002e5	76 04		 jbe	 SHORT $LN43@Partition_
  002e7	b0 01		 mov	 al, 1
  002e9	eb 0f		 jmp	 SHORT $LN42@Partition_
$LN43@Partition_:
  002eb	0f 2e c8	 ucomiss xmm1, xmm0
  002ee	9f		 lahf
  002ef	f6 c4 44	 test	 ah, 68			; 00000044H
  002f2	7a 04		 jp	 SHORT $LN41@Partition_
  002f4	32 c0		 xor	 al, al
  002f6	eb 02		 jmp	 SHORT $LN42@Partition_
$LN41@Partition_:
  002f8	b0 80		 mov	 al, 128			; 00000080H
$LN42@Partition_:

; 51   :         return _Val._Value == 0;

  002fa	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  002fc	75 12		 jne	 SHORT $LN36@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  002fe	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00300	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00303	74 08		 je	 SHORT $LN55@Partition_
$LN54@Partition_:
  00305	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0030a	0f 4d c7	 cmovge	 eax, edi
$LN55@Partition_:
  0030d	8b 5d fc	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
$LN36@Partition_:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00310	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8333 :             if (_DEBUG_LT_PRED(_Pred, *_Glast_prev, *_Pfirst)) {

  00312	74 5c		 je	 SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00314	0f 2f c8	 comiss	 xmm1, xmm0
  00317	76 04		 jbe	 SHORT $LN73@Partition_
  00319	0c ff		 or	 al, 255			; 000000ffH
  0031b	eb 2b		 jmp	 SHORT $LN83@Partition_
$LN73@Partition_:
  0031d	0f 2f c1	 comiss	 xmm0, xmm1
  00320	76 04		 jbe	 SHORT $LN71@Partition_
  00322	b0 01		 mov	 al, 1
  00324	eb 0f		 jmp	 SHORT $LN70@Partition_
$LN71@Partition_:
  00326	0f 2e c1	 ucomiss xmm0, xmm1
  00329	9f		 lahf
  0032a	f6 c4 44	 test	 ah, 68			; 00000044H
  0032d	7a 04		 jp	 SHORT $LN69@Partition_
  0032f	32 c0		 xor	 al, al
  00331	eb 02		 jmp	 SHORT $LN70@Partition_
$LN69@Partition_:
  00333	b0 80		 mov	 al, 128			; 00000080H
$LN70@Partition_:

; 51   :         return _Val._Value == 0;

  00335	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00337	75 0f		 jne	 SHORT $LN83@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00339	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0033c	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  0033e	74 08		 je	 SHORT $LN83@Partition_
$LN82@Partition_:
  00340	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00345	0f 4d c7	 cmovge	 eax, edi
$LN83@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8335 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  00348	8b 5d fc	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  0034b	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8335 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  0034d	74 37		 je	 SHORT $LN391@Partition_

; 8336 :                 break;
; 8337 :             } else if (--_Pfirst != _Glast_prev) {

  0034f	83 ea 08	 sub	 edx, 8
  00352	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00355	3b d0		 cmp	 edx, eax
  00357	74 17		 je	 SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00359	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]

; 140  :     _Left    = _STD move(_Right);

  0035d	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1
  00361	8b 06		 mov	 eax, DWORD PTR [esi]

; 141  :     _Right   = _STD move(_Tmp);

  00363	f3 0f 11 46 fc	 movss	 DWORD PTR [esi-4], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00368	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 140  :     _Left    = _STD move(_Right);

  0036b	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 141  :     _Right   = _STD move(_Tmp);

  0036e	89 0e		 mov	 DWORD PTR [esi], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8331 :         for (; _First < _Glast; --_Glast) {

  00370	8b 45 f8	 mov	 eax, DWORD PTR __First$1$[ebp]
  00373	83 eb 08	 sub	 ebx, 8
  00376	83 ee 08	 sub	 esi, 8
  00379	89 5d fc	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  0037c	3b c3		 cmp	 eax, ebx
  0037e	0f 82 4c ff ff
	ff		 jb	 $LL14@Partition_

; 8335 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  00384	eb 03		 jmp	 SHORT $LN390@Partition_
$LN391@Partition_:
  00386	8b 45 f8	 mov	 eax, DWORD PTR __First$1$[ebp]
$LN390@Partition_:
  00389	8b 7d f4	 mov	 edi, DWORD PTR __Gfirst$1$[ebp]

; 8338 :                 swap(*_Pfirst, *_Glast_prev); // intentional ADL
; 8339 :             }
; 8340 :         }
; 8341 : 
; 8342 :         if (_Glast == _First && _Gfirst == _Last) {

  0038c	3b d8		 cmp	 ebx, eax
$LN448@Partition_:
  0038e	75 54		 jne	 SHORT $LN27@Partition_
  00390	3b 7d 08	 cmp	 edi, DWORD PTR __Last$[ebp]
  00393	0f 84 c7 00 00
	00		 je	 $LN357@Partition_

; 8344 :         }
; 8345 : 
; 8346 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 8347 :             if (_Plast != _Gfirst) {

  00399	8b 5d 0c	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
  0039c	3b df		 cmp	 ebx, edi
  0039e	74 18		 je	 SHORT $LN374@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 140  :     _Left    = _STD move(_Right);

  003a0	8b 03		 mov	 eax, DWORD PTR [ebx]
  003a2	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  003a6	89 02		 mov	 DWORD PTR [edx], eax
  003a8	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 141  :     _Right   = _STD move(_Tmp);

  003ab	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  003af	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 140  :     _Left    = _STD move(_Right);

  003b2	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 141  :     _Right   = _STD move(_Tmp);

  003b5	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN374@Partition_:

; 140  :     _Left    = _STD move(_Right);

  003b8	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8351 :             ++_Plast;

  003ba	83 c3 08	 add	 ebx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  003bd	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]

; 140  :     _Left    = _STD move(_Right);

  003c1	89 02		 mov	 DWORD PTR [edx], eax
  003c3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 141  :     _Right   = _STD move(_Tmp);

  003c6	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  003ca	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 140  :     _Left    = _STD move(_Right);

  003cd	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8353 :             ++_Pfirst;

  003d0	83 c2 08	 add	 edx, 8

; 8354 :             ++_Gfirst;

  003d3	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  003d6	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8354 :             ++_Gfirst;

  003d9	83 c7 08	 add	 edi, 8
  003dc	89 5d 0c	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  003df	e9 09 fe ff ff	 jmp	 $LN449@Partition_
$LN27@Partition_:

; 8355 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  003e4	83 c3 f8	 add	 ebx, -8			; fffffff8H
  003e7	89 5d fc	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  003ea	3b 7d 08	 cmp	 edi, DWORD PTR __Last$[ebp]
  003ed	75 48		 jne	 SHORT $LN30@Partition_

; 8356 :             if (--_Glast != --_Pfirst) {

  003ef	83 ea 08	 sub	 edx, 8
  003f2	3b da		 cmp	 ebx, edx
  003f4	74 18		 je	 SHORT $LN375@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 140  :     _Left    = _STD move(_Right);

  003f6	8b 02		 mov	 eax, DWORD PTR [edx]
  003f8	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  003fc	89 03		 mov	 DWORD PTR [ebx], eax
  003fe	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 141  :     _Right   = _STD move(_Tmp);

  00401	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00405	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 140  :     _Left    = _STD move(_Right);

  00408	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 141  :     _Right   = _STD move(_Tmp);

  0040b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN375@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8360 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  0040e	8b 5d 0c	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00411	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8360 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00415	83 eb 08	 sub	 ebx, 8
  00418	89 5d 0c	 mov	 DWORD PTR __Plast$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 140  :     _Left    = _STD move(_Right);

  0041b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0041d	89 02		 mov	 DWORD PTR [edx], eax
  0041f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 141  :     _Right   = _STD move(_Tmp);

  00422	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00426	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 140  :     _Left    = _STD move(_Right);

  00429	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8361 :         } else {

  0042c	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  0042f	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8361 :         } else {

  00432	e9 b9 fd ff ff	 jmp	 $LL8@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 140  :     _Left    = _STD move(_Right);

  00437	8b 03		 mov	 eax, DWORD PTR [ebx]
  00439	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  0043d	89 07		 mov	 DWORD PTR [edi], eax
  0043f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 141  :     _Right   = _STD move(_Tmp);

  00442	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00446	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 140  :     _Left    = _STD move(_Right);

  00449	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8363 :             ++_Gfirst;

  0044c	83 c7 08	 add	 edi, 8
  0044f	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  00452	89 5d fc	 mov	 DWORD PTR __Glast$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  00455	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  00458	8b 5d 0c	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
  0045b	e9 8d fd ff ff	 jmp	 $LN449@Partition_
$LN357@Partition_:

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00460	8b 4d ec	 mov	 ecx, DWORD PTR ___$ReturnUdt$1$[ebp]
  00463	8b 45 0c	 mov	 eax, DWORD PTR __Plast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8343 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00466	5f		 pop	 edi
  00467	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00468	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8343 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  0046b	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0046d	89 11		 mov	 DWORD PTR [ecx], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8343 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  0046f	5b		 pop	 ebx

; 8364 :         }
; 8365 :     }
; 8366 : }

  00470	8b e5		 mov	 esp, ebp
  00472	5d		 pop	 ebp
  00473	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MH@std@@PAU12@@0@PAU?$pair@MH@0@0U?$less@X@0@@Z ENDP ; std::_Partition_by_median_guess_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\map
;	COMDAT ??$_Kfn@$$CBKPAUSGroundItemInstance@CPythonItem@@@?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
??$_Kfn@$$CBKPAUSGroundItemInstance@CPythonItem@@@?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0>::_Kfn<unsigned long const ,CPythonItem::SGroundItemInstance *>, COMDAT
; __Val$ = ecx

; 67   :         return _Val.first;

  00000	8b c1		 mov	 eax, ecx

; 68   :     }

  00002	c3		 ret	 0
??$_Kfn@$$CBKPAUSGroundItemInstance@CPythonItem@@@?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0>::_Kfn<unsigned long const ,CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$construct@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@$$QAU31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::construct<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 728  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000b	89 0a		 mov	 DWORD PTR [edx], ecx
  0000d	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 734  :     }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$construct@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::construct<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 470  : #if _HAS_CXX20
; 471  :     if (_STD is_constant_evaluated()) {
; 472  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 473  :     } else
; 474  : #endif // _HAS_CXX20
; 475  :     {
; 476  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 477  :     }
; 478  : }

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
??$destroy@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::destroy<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 738  : #if _HAS_CXX20
; 739  :         _STD destroy_at(_Ptr);
; 740  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 741  :         _Ptr->~_Uty();
; 742  : #endif // ^^^ !_HAS_CXX20 ^^^
; 743  :     }

  00000	c2 00 00	 ret	 0
??$destroy@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::destroy<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>, COMDAT
; __Obj$dead$ = ecx

; 321  :     if constexpr (is_array_v<_Ty>) {
; 322  :         _STD _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 323  :     } else {
; 324  :         _Obj.~_Ty();
; 325  :     }
; 326  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$destroy_at@PAUSGroundItemInstance@CPythonItem@@@std@@YAXQAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
??$destroy_at@PAUSGroundItemInstance@CPythonItem@@@std@@YAXQAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::destroy_at<CPythonItem::SGroundItemInstance *>, COMDAT
; __Location$dead$ = ecx

; 331  : #if _HAS_CXX20
; 332  :     if constexpr (is_array_v<_Ty>) {
; 333  :         _STD _Destroy_range(_STD begin(*_Location), _STD end(*_Location));
; 334  :     } else
; 335  : #endif // _HAS_CXX20
; 336  :     {
; 337  :         _Location->~_Ty();
; 338  :     }
; 339  : }

  00000	c2 00 00	 ret	 0
??$destroy_at@PAUSGroundItemInstance@CPythonItem@@@std@@YAXQAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::destroy_at<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@ABQAUSGroundItemInstance@CPythonItem@@@std@@YAABQAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z
_TEXT	SEGMENT
??$forward@ABQAUSGroundItemInstance@CPythonItem@@@std@@YAABQAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z PROC ; std::forward<CPythonItem::SGroundItemInstance * const &>, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@ABQAUSGroundItemInstance@CPythonItem@@@std@@YAABQAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z ENDP ; std::forward<CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back_with_unused_capacity<CPythonItem::SGroundItemInstance * const &>, COMDAT
; _this$ = ecx

; 852  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 853  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 854  :         auto& _My_data   = _Mypair._Myval2;
; 855  :         pointer& _Mylast = _My_data._Mylast;
; 856  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 857  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 858  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 859  :             _ASAN_VECTOR_MODIFY(1);
; 860  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 02		 mov	 DWORD PTR [edx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;

  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 869  :         ++_Mylast;

  00010	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  00013	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 870  : 
; 871  :         return _Result;
; 872  :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back_with_unused_capacity<CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv685 = -8						; size = 4
tv687 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN131@Emplace_re

; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 2011 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 2012 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 fc fc ff
	ff ff		 mov	 DWORD PTR tv687[ebp], -4 ; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN129@Emplace_re
$LN8@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2015 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 cd 00 00
	00		 ja	 $LN132@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 fc	 mov	 DWORD PTR tv687[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN25@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN129@Emplace_re
$LN25@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN129@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 900  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 901  :         _Constructed_first = _Newvec + _Whereoff;
; 902  : 
; 903  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d f8	 mov	 DWORD PTR tv685[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b da		 cmp	 ebx, edx
  000b2	75 04		 jne	 SHORT $LN3@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1992 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b4	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 909  :         } else { // provide basic guarantee

  000b6	eb 16		 jmp	 SHORT $LN59@Emplace_re
$LN3@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1992 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b8	57		 push	 edi
  000b9	8b d3		 mov	 edx, ebx
  000bb	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 912  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c0	8b 45 f8	 mov	 eax, DWORD PTR tv685[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1992 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000c3	83 c4 04	 add	 esp, 4

; 1985 :     const auto _ULast = _STD _Get_unwrapped(_Last);

  000c6	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 912  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c9	83 c0 04	 add	 eax, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1992 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cc	8b cb		 mov	 ecx, ebx
$LN59@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2064 :         pointer& _Mylast  = _My_data._Mylast;

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>

; 2065 :         pointer& _Myend   = _My_data._Myend;
; 2066 : 
; 2067 :         _My_data._Orphan_all();
; 2068 : 
; 2069 :         if (_Myfirst) { // destroy and deallocate old array

  000d4	8b 06		 mov	 eax, DWORD PTR [esi]
  000d6	83 c4 04	 add	 esp, 4
  000d9	85 c0		 test	 eax, eax
  000db	74 2c		 je	 SHORT $LN76@Emplace_re

; 2070 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2071 :             _ASAN_VECTOR_REMOVE;
; 2072 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000dd	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e0	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e2	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000e5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000eb	72 12		 jb	 SHORT $LN84@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ed	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f0	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f3	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f5	83 c0 fc	 add	 eax, -4			; fffffffcH
  000f8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fb	77 2b		 ja	 SHORT $LN83@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000fd	8b c2		 mov	 eax, edx
$LN84@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000ff	51		 push	 ecx
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00106	83 c4 08	 add	 esp, 8
$LN76@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2076 :         _Mylast  = _Newvec + _Newsize;

  00109	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  0010c	89 3e		 mov	 DWORD PTR [esi], edi
  0010e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 913  :         }
; 914  : 
; 915  :         _Guard._New_begin = nullptr;
; 916  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 917  :         return _Newvec + _Whereoff;

  00111	8b 45 f8	 mov	 eax, DWORD PTR tv685[ebp]

; 2076 :         _Mylast  = _Newvec + _Newsize;

  00114	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2077 :         _Myend   = _Newvec + _Newcapacity;

  00117	8b 4d fc	 mov	 ecx, DWORD PTR tv687[ebp]
  0011a	03 cf		 add	 ecx, edi

; 918  :     }

  0011c	5f		 pop	 edi

; 2077 :         _Myend   = _Newvec + _Newcapacity;

  0011d	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 918  :     }

  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c2 08 00	 ret	 8
$LN83@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00128	6a 00		 push	 0
  0012a	6a 00		 push	 0
  0012c	6a 00		 push	 0
  0012e	6a 00		 push	 0
  00130	6a 00		 push	 0
  00132	e8 00 00 00 00	 call	 __invoke_watson
$LN131@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 888  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@CAXXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Xlength
$LN132@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN128@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::nullptr_t>, COMDAT
; __Val$ = ecx
; __New_val$ = edx

; 772  :     // assign _New_val to _Val, return previous _Val
; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00002	8b 12		 mov	 edx, DWORD PTR [edx]
  00004	89 11		 mov	 DWORD PTR [ecx], edx

; 775  :     return _Old_val;
; 776  : }

  00006	c3		 ret	 0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1099 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1100 :     using _Ty = typename _Alloc::value_type;
; 1101 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1102 :         for (; _First != _Last; ++_First) {
; 1103 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1104 :         }
; 1105 :     }
; 1106 : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Unfancy_maybe_null@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy_maybe_null@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z PROC ; std::_Unfancy_maybe_null<CPythonItem::SGroundItemInstance *>, COMDAT
; __Ptr$ = ecx

; 80   :     return _Ptr;

  00000	8b c1		 mov	 eax, ecx

; 81   : }

  00002	c3		 ret	 0
??$_Unfancy_maybe_null@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z ENDP ; std::_Unfancy_maybe_null<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; __Al$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000a	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0000c	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0000f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00012	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 350  :         _Pnode->_Isnil = true;
; 351  :         return _Pnode;
; 352  :     }

  00018	c3		 ret	 0
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 1172 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1173 :             _Al.deallocate(_Ptr, 1);
; 1174 :         }
; 1175 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 808  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1160 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00029	8b 45 08	 mov	 eax, DWORD PTR __Al_$[ebp]
  0002c	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 808  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00035	6a 18		 push	 24			; 00000018H

; 1167 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00037	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 136  :         return ::operator new(_Bytes);

  0003e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1168 :         _Ptr = _Al.allocate(1);

  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 136  :         return ::operator new(_Bytes);

  00046	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree

; 810  :     }

  00049	8b c6		 mov	 eax, esi
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	5e		 pop	 esi
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1539 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1540 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?deallocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEXQAPAUSGroundItemInstance@CPythonItem@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEXQAPAUSGroundItemInstance@CPythonItem@@I@Z PROC ; std::allocator<CPythonItem::SGroundItemInstance *>::deallocate, COMDAT
; _this$dead$ = ecx

; 982  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 983  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 984  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00010	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00016	72 12		 jb	 SHORT $LN12@deallocate

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00018	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00020	83 c0 fc	 add	 eax, -4			; fffffffcH
  00023	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00026	77 10		 ja	 SHORT $LN11@deallocate

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00028	8b c2		 mov	 eax, edx
$LN12@deallocate:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00031	83 c4 08	 add	 esp, 8

; 986  :     }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN11@deallocate:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 __invoke_watson
$LN15@deallocate:
  00047	cc		 int	 3
?deallocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEXQAPAUSGroundItemInstance@CPythonItem@@I@Z ENDP ; std::allocator<CPythonItem::SGroundItemInstance *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??0?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAE@XZ PROC ; std::allocator<CPythonItem::SGroundItemInstance *>::allocator<CPythonItem::SGroundItemInstance *>, COMDAT
; _this$ = ecx

; 974  :     constexpr allocator() noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAE@XZ ENDP ; std::allocator<CPythonItem::SGroundItemInstance *>::allocator<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 505  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 506  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 507  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 508  : 
; 509  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 510  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 514  : 
; 515  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 516  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 521  :         }
; 522  : 
; 523  :         _Pnode->_Right      = _Wherenode;
; 524  :         _Wherenode->_Parent = _Pnode;
; 525  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 517  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 518  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 521  :         }
; 522  : 
; 523  :         _Pnode->_Right      = _Wherenode;
; 524  :         _Wherenode->_Parent = _Pnode;
; 525  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 519  :         } else {
; 520  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 521  :         }
; 522  : 
; 523  :         _Pnode->_Right      = _Wherenode;
; 524  :         _Wherenode->_Parent = _Pnode;
; 525  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 483  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 484  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 485  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 486  : 
; 487  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 488  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 492  : 
; 493  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 494  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 499  :         }
; 500  : 
; 501  :         _Pnode->_Left       = _Wherenode;
; 502  :         _Wherenode->_Parent = _Pnode;
; 503  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 495  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 496  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 499  :         }
; 500  : 
; 501  :         _Pnode->_Left       = _Wherenode;
; 502  :         _Wherenode->_Parent = _Pnode;
; 503  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 497  :         } else {
; 498  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 499  :         }
; 500  : 
; 501  :         _Pnode->_Left       = _Wherenode;
; 502  :         _Wherenode->_Parent = _Pnode;
; 503  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Min, COMDAT
; __Pnode$ = ecx

; 476  :         while (!_Pnode->_Left->_Isnil) {

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00006	75 0d		 jne	 SHORT $LN10@Min
$LL2@Min:
  00008	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 477  :             _Pnode = _Pnode->_Left;

  0000a	8b c2		 mov	 eax, edx
  0000c	8b d1		 mov	 edx, ecx
  0000e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00012	74 f4		 je	 SHORT $LL2@Min

; 481  :     }

  00014	c3		 ret	 0
$LN10@Min:

; 478  :         }
; 479  : 
; 480  :         return _Pnode;

  00015	8b c1		 mov	 eax, ecx

; 481  :     }

  00017	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Max, COMDAT
; __Pnode$ = ecx

; 468  :         while (!_Pnode->_Right->_Isnil) {

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00007	75 13		 jne	 SHORT $LN10@Max
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Max:

; 469  :             _Pnode = _Pnode->_Right;

  00010	8b c2		 mov	 eax, edx
  00012	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00015	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max

; 473  :     }

  0001b	c3		 ret	 0
$LN10@Max:

; 470  :         }
; 471  : 
; 472  :         return _Pnode;

  0001c	8b c1		 mov	 eax, ecx

; 473  :     }

  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::deallocate, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 289  :         ::operator delete(_Ptr, _Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8

; 715  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 716  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 717  :         if (_STD is_constant_evaluated()) {
; 718  :             _Al.deallocate(_Ptr, _Count);
; 719  :         } else
; 720  : #endif // _HAS_CXX20
; 721  :         {
; 722  :             (void) _Al;
; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);
; 724  :         }
; 725  :     }

  0000b	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABU?$less@K@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABU?$less@K@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1971 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1972 :     }

  00002	c3		 ret	 0
?_Getcomp@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABU?$less@K@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::max_size, COMDAT
; _this$dead$ = ecx

; 1213 :         return (_STD min)(

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1214 :             static_cast<size_type>(_STD _Max_limit<difference_type>()), _Alnode_traits::max_size(_Getal()));
; 1215 :     }

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCItemData@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCItemData@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1539 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1540 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCItemData@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$move@AAU?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z
_TEXT	SEGMENT
??$move@AAU?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z PROC ; std::move<std::pair<float,int> &>, COMDAT
; __Arg$ = ecx

; 1513 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1514 : }

  00002	c3		 ret	 0
??$move@AAU?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z ENDP ; std::move<std::pair<float,int> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$?RAAU?$pair@MH@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MH@1@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RAAU?$pair@MH@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MH@1@0@Z PROC ; std::less<void>::operator()<std::pair<float,int> &,std::pair<float,int> &>, COMDAT
; _this$dead$ = ecx

; 2389 :         -> decltype(static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00009	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000d	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00011	0f 2f c1	 comiss	 xmm0, xmm1
  00014	76 0b		 jbe	 SHORT $LN12@operator
  00016	0c ff		 or	 al, 255			; 000000ffH

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00018	3c ff		 cmp	 al, -1
  0001a	0f 94 c0	 sete	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2391 :     }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
$LN12@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00021	0f 2f c8	 comiss	 xmm1, xmm0
  00024	76 04		 jbe	 SHORT $LN10@operator
  00026	b0 01		 mov	 al, 1
  00028	eb 0f		 jmp	 SHORT $LN9@operator
$LN10@operator:
  0002a	0f 2e c8	 ucomiss xmm1, xmm0
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 04		 jp	 SHORT $LN8@operator
  00033	32 c0		 xor	 al, al
  00035	eb 02		 jmp	 SHORT $LN9@operator
$LN8@operator:
  00037	b0 80		 mov	 al, 128			; 00000080H
$LN9@operator:

; 51   :         return _Val._Value == 0;

  00039	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0003b	75 20		 jne	 SHORT $LN22@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0003d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00040	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00043	75 09		 jne	 SHORT $LN21@operator

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00045	3c ff		 cmp	 al, -1
  00047	0f 94 c0	 sete	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2391 :     }

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN21@operator:
  0004e	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0004f	be 01 00 00 00	 mov	 esi, 1
  00054	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00059	0f 4d c6	 cmovge	 eax, esi
  0005c	5e		 pop	 esi
$LN22@operator:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  0005d	3c ff		 cmp	 al, -1
  0005f	0f 94 c0	 sete	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits

; 2391 :     }

  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
??$?RAAU?$pair@MH@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MH@1@0@Z ENDP ; std::less<void>::operator()<std::pair<float,int> &,std::pair<float,int> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAU?$pair@MH@std@@PAU12@@std@@YAPAU?$pair@MH@0@PAU10@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAU?$pair@MH@std@@PAU12@@std@@YAPAU?$pair@MH@0@PAU10@00@Z PROC ; std::_Move_backward_unchecked<std::pair<float,int> *,std::pair<float,int> *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5182 : _CONSTEXPR20 _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5194 :     while (_First != _Last) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b d6		 cmp	 edx, esi
  0000b	74 18		 je	 SHORT $LN3@Move_backw
  0000d	0f 1f 00	 npad	 3
$LL10@Move_backw:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00010	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 5195 :         *--_Dest = _STD move(*--_Last);

  00013	83 ea 08	 sub	 edx, 8
  00016	83 e8 08	 sub	 eax, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00019	89 08		 mov	 DWORD PTR [eax], ecx

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  0001b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0001e	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 5194 :     while (_First != _Last) {

  00021	3b d6		 cmp	 edx, esi
  00023	75 eb		 jne	 SHORT $LL10@Move_backw
$LN3@Move_backw:
  00025	5e		 pop	 esi

; 5196 :     }
; 5197 : 
; 5198 :     return _Dest;
; 5199 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move_backward_unchecked@PAU?$pair@MH@std@@PAU12@@std@@YAPAU?$pair@MH@0@PAU10@00@Z ENDP ; std::_Move_backward_unchecked<std::pair<float,int> *,std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$?4U?$pair@MH@std@@$0A@@?$pair@MH@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?4U?$pair@MH@std@@$0A@@?$pair@MH@std@@QAEAAU01@$$QAU01@@Z PROC ; std::pair<float,int>::operator=<std::pair<float,int>,0>, COMDAT
; _this$ = ecx

; 364  :         noexcept(conjunction_v<is_nothrow_move_assignable<_Ty1>, is_nothrow_move_assignable<_Ty2>>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 367  :         return *this;

  00010	8b c1		 mov	 eax, ecx

; 368  :     }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??$?4U?$pair@MH@std@@$0A@@?$pair@MH@std@@QAEAAU01@$$QAU01@@Z ENDP ; std::pair<float,int>::operator=<std::pair<float,int>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
__Max_sequence_non_leaf$1$ = -8				; size = 4
__Top$1$ = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z PROC ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 58   :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 59   :     // percolate _Hole to _Bottom, then push _Val
; 60   :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 61   : 
; 62   :     using _Diff      = _Iter_diff_t<_RanIt>;
; 63   :     const _Diff _Top = _Hole;
; 64   :     _Diff _Idx       = _Hole;
; 65   : 
; 66   :     // Check whether _Idx can have a child before calculating that child's index, since
; 67   :     // calculating the child's index can trigger integer overflows
; 68   :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Bottom$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 55 fc	 mov	 DWORD PTR __Top$1$[ebp], edx
  00011	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00014	8b ca		 mov	 ecx, edx
  00016	8b f8		 mov	 edi, eax
  00018	d1 ff		 sar	 edi, 1
  0001a	89 7d f8	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], edi

; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0001d	3b d7		 cmp	 edx, edi
  0001f	7d 73		 jge	 SHORT $LN3@Pop_heap_h
$LL2@Pop_heap_h:

; 70   :         _Idx = 2 * _Idx + 2;

  00021	8d 1c 09	 lea	 ebx, DWORD PTR [ecx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00024	f3 0f 10 4c de
	10		 movss	 xmm1, DWORD PTR [esi+ebx*8+16]
  0002a	f3 0f 10 44 de
	08		 movss	 xmm0, DWORD PTR [esi+ebx*8+8]
  00030	0f 2f c1	 comiss	 xmm0, xmm1
  00033	76 05		 jbe	 SHORT $LN18@Pop_heap_h
  00035	80 c9 ff	 or	 cl, 255			; 000000ffH
  00038	eb 36		 jmp	 SHORT $LN9@Pop_heap_h
$LN18@Pop_heap_h:
  0003a	0f 2f c8	 comiss	 xmm1, xmm0
  0003d	76 04		 jbe	 SHORT $LN16@Pop_heap_h
  0003f	b1 01		 mov	 cl, 1
  00041	eb 0f		 jmp	 SHORT $LN15@Pop_heap_h
$LN16@Pop_heap_h:
  00043	0f 2e c8	 ucomiss xmm1, xmm0
  00046	9f		 lahf
  00047	f6 c4 44	 test	 ah, 68			; 00000044H
  0004a	7a 04		 jp	 SHORT $LN14@Pop_heap_h
  0004c	32 c9		 xor	 cl, cl
  0004e	eb 02		 jmp	 SHORT $LN15@Pop_heap_h
$LN14@Pop_heap_h:
  00050	b1 80		 mov	 cl, 128			; 00000080H
$LN15@Pop_heap_h:

; 51   :         return _Val._Value == 0;

  00052	84 c9		 test	 cl, cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00054	75 1a		 jne	 SHORT $LN9@Pop_heap_h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00056	8b 44 de 14	 mov	 eax, DWORD PTR [esi+ebx*8+20]
  0005a	3b 44 de 0c	 cmp	 eax, DWORD PTR [esi+ebx*8+12]
  0005e	74 0d		 je	 SHORT $LN28@Pop_heap_h
$LN27@Pop_heap_h:
  00060	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	0f 4d c8	 cmovge	 ecx, eax
$LN28@Pop_heap_h:
  0006d	8b 7d f8	 mov	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN9@Pop_heap_h:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00070	33 c0		 xor	 eax, eax
  00072	80 f9 ff	 cmp	 cl, -1
  00075	0f 95 c0	 setne	 al
  00078	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0007b	03 cb		 add	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0007d	8b 04 ce	 mov	 eax, DWORD PTR [esi+ecx*8]
  00080	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  00083	8b 44 ce 04	 mov	 eax, DWORD PTR [esi+ecx*8+4]
  00087	89 44 d6 04	 mov	 DWORD PTR [esi+edx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 75   :         _Hole             = _Idx;

  0008b	8b d1		 mov	 edx, ecx
  0008d	3b cf		 cmp	 ecx, edi
  0008f	7c 90		 jl	 SHORT $LL2@Pop_heap_h
  00091	8b 5d 08	 mov	 ebx, DWORD PTR __Bottom$[ebp]
$LN3@Pop_heap_h:

; 76   :     }
; 77   : 
; 78   :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00094	3b cf		 cmp	 ecx, edi
  00096	75 19		 jne	 SHORT $LN5@Pop_heap_h
  00098	f6 c3 01	 test	 bl, 1
  0009b	75 14		 jne	 SHORT $LN5@Pop_heap_h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0009d	8b 44 de f8	 mov	 eax, DWORD PTR [esi+ebx*8-8]
  000a1	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  000a4	8b 44 de fc	 mov	 eax, DWORD PTR [esi+ebx*8-4]
  000a8	89 44 d6 04	 mov	 DWORD PTR [esi+edx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 80   :         _Hole             = _Bottom - 1;

  000ac	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  000af	8b d0		 mov	 edx, eax
$LN5@Pop_heap_h:

; 27   :         _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  000b1	8b 7d fc	 mov	 edi, DWORD PTR __Top$1$[ebp]
  000b4	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  000b7	d1 f9		 sar	 ecx, 1
  000b9	3b fa		 cmp	 edi, edx
  000bb	7d 67		 jge	 SHORT $LN90@Pop_heap_h
  000bd	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
$LL44@Pop_heap_h:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000c0	f3 0f 10 0c ce	 movss	 xmm1, DWORD PTR [esi+ecx*8]
  000c5	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  000c9	0f 2f c1	 comiss	 xmm0, xmm1
  000cc	76 04		 jbe	 SHORT $LN57@Pop_heap_h
  000ce	0c ff		 or	 al, 255			; 000000ffH
  000d0	eb 38		 jmp	 SHORT $LN48@Pop_heap_h
$LN57@Pop_heap_h:
  000d2	0f 2f c8	 comiss	 xmm1, xmm0
  000d5	76 04		 jbe	 SHORT $LN55@Pop_heap_h
  000d7	b0 01		 mov	 al, 1
  000d9	eb 0f		 jmp	 SHORT $LN54@Pop_heap_h
$LN55@Pop_heap_h:
  000db	0f 2e c8	 ucomiss xmm1, xmm0
  000de	9f		 lahf
  000df	f6 c4 44	 test	 ah, 68			; 00000044H
  000e2	7a 04		 jp	 SHORT $LN53@Pop_heap_h
  000e4	32 c0		 xor	 al, al
  000e6	eb 02		 jmp	 SHORT $LN54@Pop_heap_h
$LN53@Pop_heap_h:
  000e8	b0 80		 mov	 al, 128			; 00000080H
$LN54@Pop_heap_h:

; 51   :         return _Val._Value == 0;

  000ea	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  000ec	75 1c		 jne	 SHORT $LN48@Pop_heap_h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000ee	8b 7c ce 04	 mov	 edi, DWORD PTR [esi+ecx*8+4]
  000f2	3b 7b 04	 cmp	 edi, DWORD PTR [ebx+4]
  000f5	74 0d		 je	 SHORT $LN67@Pop_heap_h
$LN66@Pop_heap_h:
  000f7	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000fc	bb 01 00 00 00	 mov	 ebx, 1
  00101	0f 4d c3	 cmovge	 eax, ebx
$LN67@Pop_heap_h:
  00104	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  00107	8b 7d fc	 mov	 edi, DWORD PTR __Top$1$[ebp]
$LN48@Pop_heap_h:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  0010a	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 27   :         _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  0010c	75 16		 jne	 SHORT $LN90@Pop_heap_h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0010e	f3 0f 11 0c d6	 movss	 DWORD PTR [esi+edx*8], xmm1

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  00113	8b 44 ce 04	 mov	 eax, DWORD PTR [esi+ecx*8+4]
  00117	89 44 d6 04	 mov	 DWORD PTR [esi+edx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 30   :         _Hole             = _Idx;

  0011b	8b d1		 mov	 edx, ecx
  0011d	49		 dec	 ecx
  0011e	d1 f9		 sar	 ecx, 1
  00120	3b fa		 cmp	 edi, edx
  00122	7c 9c		 jl	 SHORT $LL44@Pop_heap_h
$LN90@Pop_heap_h:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00124	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  00127	5f		 pop	 edi
  00128	8b 01		 mov	 eax, DWORD PTR [ecx]
  0012a	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax
  0012d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00130	89 44 d6 04	 mov	 DWORD PTR [esi+edx*8+4], eax
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 84   : }

  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Pop_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -12						; size = 8
__Pred$ = 8						; size = 1
??$_Pop_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z PROC ; std::_Pop_heap_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 98   : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 99   :     // pop *_First to *(_Last - 1) and reheap
; 100  :     if (2 <= _Last - _First) {

  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	2b c6		 sub	 eax, esi
  0000d	83 e0 f8	 and	 eax, -8			; fffffff8H
  00010	83 f8 10	 cmp	 eax, 16			; 00000010H
  00013	7c 32		 jl	 SHORT $LN2@Pop_heap_u

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  00015	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00018	83 ea 08	 sub	 edx, 8

; 93   :     _STD _Pop_heap_hole_by_index(

  0001b	ff 75 08	 push	 DWORD PTR __Pred$[ebp]

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  0001e	89 45 f4	 mov	 DWORD PTR __Val$1[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00021	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  00023	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00026	89 02		 mov	 DWORD PTR [edx], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  00028	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002b	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  0002e	8d 45 f4	 lea	 eax, DWORD PTR __Val$1[ebp]
  00031	2b d6		 sub	 edx, esi

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  00033	89 4d f8	 mov	 DWORD PTR __Val$1[ebp+4], ecx

; 93   :     _STD _Pop_heap_hole_by_index(

  00036	c1 fa 03	 sar	 edx, 3
  00039	8b ce		 mov	 ecx, esi
  0003b	50		 push	 eax
  0003c	52		 push	 edx
  0003d	33 d2		 xor	 edx, edx
  0003f	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@Pop_heap_u:

; 103  :         _STD _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 104  :     }
; 105  : }

  00047	5e		 pop	 esi
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??$_Pop_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ENDP ; std::_Pop_heap_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Prev_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z PROC ; std::_Prev_iter<std::pair<float,int> *>, COMDAT
; __First$ = ecx

; 1692 :     return --_First;

  00000	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]

; 1693 : }

  00003	c3		 ret	 0
??$_Prev_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z ENDP ; std::_Prev_iter<std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
__Mid$1$ = -8						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 1
??$_Guess_median_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z PROC ; std::_Guess_median_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 8281 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi
  00007	8b fa		 mov	 edi, edx
  00009	8b d1		 mov	 edx, ecx

; 8282 :     // sort median element to middle
; 8283 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 8284 :     const _Diff _Count = _Last - _First;

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000e	8b c1		 mov	 eax, ecx
  00010	2b c2		 sub	 eax, edx
  00012	89 7d f8	 mov	 DWORD PTR __Mid$1$[ebp], edi
  00015	c1 f8 03	 sar	 eax, 3
  00018	89 55 fc	 mov	 DWORD PTR __First$1$[ebp], edx

; 8285 :     if (40 < _Count) { // Tukey's ninther

  0001b	83 f8 28	 cmp	 eax, 40			; 00000028H
  0001e	7e 64		 jle	 SHORT $LN2@Guess_medi

; 8286 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 8287 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 8288 :         _STD _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00020	8b 7d 0c	 mov	 edi, DWORD PTR __Pred$[ebp]
  00023	40		 inc	 eax
  00024	53		 push	 ebx
  00025	c1 f8 03	 sar	 eax, 3
  00028	8b d8		 mov	 ebx, eax
  0002a	56		 push	 esi
  0002b	c1 e3 04	 shl	 ebx, 4
  0002e	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]
  00035	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]
  00038	57		 push	 edi
  00039	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  0003c	8b d1		 mov	 edx, ecx
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __First$1$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 8289 :         _STD _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00047	8b 55 f8	 mov	 edx, DWORD PTR __Mid$1$[ebp]
  0004a	8b ca		 mov	 ecx, edx
  0004c	57		 push	 edi
  0004d	2b ce		 sub	 ecx, esi
  0004f	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 8290 :         _STD _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  00058	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  0005b	8b d0		 mov	 edx, eax
  0005d	57		 push	 edi
  0005e	50		 push	 eax
  0005f	2b c3		 sub	 eax, ebx
  00061	2b d6		 sub	 edx, esi
  00063	8b c8		 mov	 ecx, eax
  00065	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 8291 :         _STD _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __First$1$[ebp]
  0006d	57		 push	 edi
  0006e	52		 push	 edx
  0006f	8b 55 f8	 mov	 edx, DWORD PTR __Mid$1$[ebp]
  00072	8d 0c 0e	 lea	 ecx, DWORD PTR [esi+ecx]
  00075	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
  0007a	83 c4 20	 add	 esp, 32			; 00000020H
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	5f		 pop	 edi

; 8294 :     }
; 8295 : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN2@Guess_medi:

; 8292 :     } else {
; 8293 :         _STD _Med3_unchecked(_First, _Mid, _Last, _Pred);

  00084	ff 75 0c	 push	 DWORD PTR __Pred$[ebp]
  00087	8b d7		 mov	 edx, edi
  00089	51		 push	 ecx
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR __First$1$[ebp]
  0008d	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
  00092	83 c4 08	 add	 esp, 8
  00095	5f		 pop	 edi

; 8294 :     }
; 8295 : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??$_Guess_median_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ENDP ; std::_Guess_median_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Next_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z
_TEXT	SEGMENT
??$_Next_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z PROC ; std::_Next_iter<std::pair<float,int> *>, COMDAT
; __First$ = ecx

; 1678 :     return ++_First;

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 1679 : }

  00003	c3		 ret	 0
??$_Next_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z ENDP ; std::_Next_iter<std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$swap@MH$0A@@std@@YAXAAU?$pair@MH@0@0@Z
_TEXT	SEGMENT
??$swap@MH$0A@@std@@YAXAAU?$pair@MH@0@0@Z PROC		; std::swap<float,int,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 140  :     _Left    = _STD move(_Right);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]

; 489  : _CONSTEXPR20 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right) noexcept(noexcept(_Left.swap(_Right))) {

  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx

; 139  :     _Ty _Tmp = _STD move(_Left);

  00005	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]

; 140  :     _Left    = _STD move(_Right);

  00009	89 06		 mov	 DWORD PTR [esi], eax
  0000b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 141  :     _Right   = _STD move(_Tmp);

  0000e	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00012	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 140  :     _Left    = _STD move(_Right);

  00015	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 141  :     _Right   = _STD move(_Tmp);

  00018	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001b	5e		 pop	 esi

; 490  :     _Left.swap(_Right);
; 491  : }

  0001c	c3		 ret	 0
??$swap@MH$0A@@std@@YAXAAU?$pair@MH@0@0@Z ENDP		; std::swap<float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$?0AAPAU?$pair@MH@std@@AAPAU01@$0A@@?$pair@PAU?$pair@MH@std@@PAU12@@std@@QAE@AAPAU?$pair@MH@1@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU?$pair@MH@std@@AAPAU01@$0A@@?$pair@PAU?$pair@MH@std@@PAU12@@std@@QAE@AAPAU?$pair@MH@1@0@Z PROC ; std::pair<std::pair<float,int> *,std::pair<float,int> *>::pair<std::pair<float,int> *,std::pair<float,int> *><std::pair<float,int> * &,std::pair<float,int> * &,0>, COMDAT
; _this$ = ecx

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 275  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAU?$pair@MH@std@@AAPAU01@$0A@@?$pair@PAU?$pair@MH@std@@PAU12@@std@@QAE@AAPAU?$pair@MH@1@0@Z ENDP ; std::pair<std::pair<float,int> *,std::pair<float,int> *>::pair<std::pair<float,int> *,std::pair<float,int> *><std::pair<float,int> * &,std::pair<float,int> * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$construct_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@QAU10@$$QAU10@@Z
_TEXT	SEGMENT
??$construct_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@QAU10@$$QAU10@@Z PROC ; std::construct_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00005	89 01		 mov	 DWORD PTR [ecx], eax
  00007	8b c1		 mov	 eax, ecx
  00009	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 464  : }

  0000c	c3		 ret	 0
??$construct_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@QAU10@$$QAU10@@Z ENDP ; std::construct_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>, COMDAT
; __Val$ = ecx

; 1525 :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 1526 : }

  00002	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@AAPAU10@@Z
_TEXT	SEGMENT
??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@AAPAU10@@Z PROC ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	8b c1		 mov	 eax, ecx

; 464  : }

  00006	c3		 ret	 0
??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@AAPAU10@@Z ENDP ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$destroy_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXQAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z
_TEXT	SEGMENT
??$destroy_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXQAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z PROC ; std::destroy_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; __Location$dead$ = ecx

; 331  : #if _HAS_CXX20
; 332  :     if constexpr (is_array_v<_Ty>) {
; 333  :         _STD _Destroy_range(_STD begin(*_Location), _STD end(*_Location));
; 334  :     } else
; 335  : #endif // _HAS_CXX20
; 336  :     {
; 337  :         _Location->~_Ty();
; 338  :     }
; 339  : }

  00000	c2 00 00	 ret	 0
??$destroy_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXQAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z ENDP ; std::destroy_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Construct_in_place@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAXAAPAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAXAAPAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z PROC ; std::_Construct_in_place<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 470  : #if _HAS_CXX20
; 471  :     if (_STD is_constant_evaluated()) {
; 472  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 473  :     } else
; 474  : #endif // _HAS_CXX20
; 475  :     {
; 476  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 477  :     }
; 478  : }

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	c3		 ret	 0
??$_Construct_in_place@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAXAAPAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z ENDP ; std::_Construct_in_place<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@AAI@Z
_TEXT	SEGMENT
??$_Allocate_at_least_helper@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@AAI@Z PROC ; std::_Allocate_at_least_helper<std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; __Al$dead$ = ecx
; __Count$ = edx

; 2295 : #if _HAS_CXX23
; 2296 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2297 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2298 :         _Count                  = _Allocated;
; 2299 :         return _Ptr;
; 2300 :     } else
; 2301 : #endif // _HAS_CXX23
; 2302 :     {
; 2303 :         return _Al.allocate(_Count);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]

; 117  :         if (_Count > _Max_possible) {

  00002	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00007	0f 87 00 00 00
	00		 ja	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 118  :             _Throw_bad_array_new_length(); // multiply overflow
; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0000d	c1 e0 02	 shl	 eax, 2

; 227  :     if (_Bytes == 0) {

  00010	85 c0		 test	 eax, eax
  00012	75 01		 jne	 SHORT $LN10@Allocate_a

; 2304 :     }
; 2305 : }

  00014	c3		 ret	 0
$LN10@Allocate_a:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00015	50		 push	 eax
  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 09		 jb	 SHORT $LN12@Allocate_a

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0001d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>

; 2304 :     }
; 2305 : }

  00022	83 c4 04	 add	 esp, 4
  00025	c3		 ret	 0
$LN12@Allocate_a:

; 136  :         return ::operator new(_Bytes);

  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 2304 :     }
; 2305 : }

  0002b	83 c4 04	 add	 esp, 4
  0002e	c3		 ret	 0
??$_Allocate_at_least_helper@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@AAI@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$construct@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@ABQAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@ABQAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 728  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 734  :     }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@ABQAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_TABQAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_TABQAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::_Get_unwrapped<CPythonItem::SGroundItemInstance * * const &>, COMDAT
; __It$ = ecx

; 1380 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1381 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1382 :         return _It + 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1383 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1384 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1385 :     } else {
; 1386 :         return static_cast<_Iter&&>(_It);
; 1387 :     }
; 1388 : }

  00002	c3		 ret	 0
??$_Get_unwrapped@ABQAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_TABQAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::_Get_unwrapped<CPythonItem::SGroundItemInstance * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z PROC ; std::_Uninitialized_move<CPythonItem::SGroundItemInstance * *,std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1977 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1978 :     // move [_First, _Last) to raw _Dest, using _Al
; 1979 :     // note: only called internally from elsewhere in the STL
; 1980 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1981 :     _STD _Adl_verify_range(_First, _Last);
; 1982 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1983 :     using _Ptrval     = typename _Alloc::value_type*;
; 1984 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1985 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1986 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1987 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1988 : #if _HAS_CXX20
; 1989 :         if (!_STD is_constant_evaluated())
; 1990 : #endif // _HAS_CXX20
; 1991 :         {
; 1992 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  00009	8b da		 mov	 ebx, edx
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>
  00013	83 c4 04	 add	 esp, 4

; 1993 :             return _Dest + (_ULast - _UFirst);

  00016	2b de		 sub	 ebx, esi
  00018	c1 fb 02	 sar	 ebx, 2
  0001b	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx

; 1994 :         }
; 1995 :     }
; 1996 : 
; 1997 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1998 :     for (; _UFirst != _ULast; ++_UFirst) {
; 1999 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 2000 :     }
; 2001 : 
; 2002 :     return _Backout._Release();
; 2003 : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$_Uninitialized_move@PAPAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z ENDP ; std::_Uninitialized_move<CPythonItem::SGroundItemInstance * *,std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 470  : #if _HAS_CXX20
; 471  :     if (_STD is_constant_evaluated()) {
; 472  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 473  :     } else
; 474  : #endif // _HAS_CXX20
; 475  :     {
; 476  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 477  :     }
; 478  : }

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1166 :     _CONSTEXPR20 void _Allocate() { // disengage *this, then allocate a new memory block

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 136  :         return ::operator new(_Bytes);

  00003	6a 18		 push	 24			; 00000018H

; 1167 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00005	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 136  :         return ::operator new(_Bytes);

  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 1168 :         _Ptr = _Al.allocate(1);

  00014	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00017	5e		 pop	 esi

; 1169 :     }

  00018	c3		 ret	 0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 1160 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Al_$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ??1_Reallocation_guard@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Reallocation_guard@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Reallocation_guard::~_Reallocation_guard, COMDAT
; _this$ = ecx

; 621  :             if (_New_begin != nullptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 2a		 je	 SHORT $LN8@Reallocati
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000a	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00013	72 12		 jb	 SHORT $LN16@Reallocati

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00015	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00018	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00020	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00023	77 0d		 ja	 SHORT $LN15@Reallocati

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00025	8b c2		 mov	 eax, edx
$LN16@Reallocati:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00027	51		 push	 ecx
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002e	83 c4 08	 add	 esp, 8
$LN8@Reallocati:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 625  :         }

  00031	c3		 ret	 0
$LN15@Reallocati:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	e8 00 00 00 00	 call	 __invoke_watson
$LN20@Reallocati:
  00041	cc		 int	 3
??1_Reallocation_guard@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Reallocation_guard::~_Reallocation_guard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@CAXXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Xlength, COMDAT

; 2184 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@CAXXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Change_array@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXQAPAUSGroundItemInstance@CPythonItem@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXQAPAUSGroundItemInstance@CPythonItem@@II@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 2059 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2060 :         // orphan all iterators, discard old array, acquire new array
; 2061 :         auto& _Al         = _Getal();
; 2062 :         auto& _My_data    = _Mypair._Myval2;
; 2063 :         pointer& _Myfirst = _My_data._Myfirst;
; 2064 :         pointer& _Mylast  = _My_data._Mylast;
; 2065 :         pointer& _Myend   = _My_data._Myend;
; 2066 : 
; 2067 :         _My_data._Orphan_all();
; 2068 : 
; 2069 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 2070 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2071 :             _ASAN_VECTOR_REMOVE;
; 2072 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN16@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN16@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector

; 2075 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2076 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2077 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2079 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	6a 00		 push	 0
  00056	6a 00		 push	 0
  00058	6a 00		 push	 0
  0005a	6a 00		 push	 0
  0005c	6a 00		 push	 0
  0005e	e8 00 00 00 00	 call	 __invoke_watson
$LN23@Change_arr:
  00063	cc		 int	 3
?_Change_array@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXQAPAUSGroundItemInstance@CPythonItem@@II@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEII@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 2006 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	2b 11		 sub	 edx, DWORD PTR [ecx]

; 2007 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2008 :         const size_type _Oldcapacity = capacity();
; 2009 :         const auto _Max              = max_size();
; 2010 : 
; 2011 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00008	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH

; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000d	c1 fa 02	 sar	 edx, 2

; 2006 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

  00010	56		 push	 esi

; 2007 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2008 :         const size_type _Oldcapacity = capacity();
; 2009 :         const auto _Max              = max_size();
; 2010 : 
; 2011 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00011	8b f2		 mov	 esi, edx
  00013	d1 ee		 shr	 esi, 1
  00015	2b ce		 sub	 ecx, esi
  00017	3b d1		 cmp	 edx, ecx
  00019	76 0a		 jbe	 SHORT $LN2@Calculate_

; 2012 :             return _Max; // geometric growth would overflow

  0001b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00020	5e		 pop	 esi

; 2018 :             return _Newsize; // geometric growth would be insufficient
; 2019 :         }
; 2020 : 
; 2021 :         return _Geometric; // geometric growth is sufficient
; 2022 :     }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN2@Calculate_:

; 2013 :         }
; 2014 : 
; 2015 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00025	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]

; 2016 : 
; 2017 :         if (_Geometric < _Newsize) {

  00028	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  0002b	5e		 pop	 esi
  0002c	0f 42 45 08	 cmovb	 eax, DWORD PTR __Newsize$[ebp]

; 2018 :             return _Newsize; // geometric growth would be insufficient
; 2019 :         }
; 2020 : 
; 2021 :         return _Geometric; // geometric growth is sufficient
; 2022 :     }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEII@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?max_size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1919 :         return (_STD min)(static_cast<size_type>(_STD _Max_limit<difference_type>()), _Alty_traits::max_size(_Getal()));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1920 :     }

  00005	c3		 ret	 0
?max_size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ PROC ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1543 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1544 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ ENDP ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >, COMDAT
; _this$ = ecx

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::max_size, COMDAT
; ___formal$dead$ = ecx

; 746  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 747  :     }

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocate, COMDAT
; _this$dead$ = ecx

; 136  :         return ::operator new(_Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 989  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 991  :     }

  0000a	c2 04 00	 ret	 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$dead$ = 12					; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::deallocate, COMDAT
; _this$dead$ = ecx

; 982  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  :         ::operator delete(_Ptr, _Bytes);

  00003	6a 18		 push	 24			; 00000018H
  00005	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 983  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 984  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);
; 986  :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >, COMDAT
; _this$ = ecx

; 974  :     constexpr allocator() noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1979 :         return _Mypair._Myval2._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1980 :     }

  00002	c3		 ret	 0
?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$?__MMHMH@std@@YA?AUpartial_ordering@0@ABU?$pair@MH@0@0@Z
_TEXT	SEGMENT
??$?__MMHMH@std@@YA?AUpartial_ordering@0@ABU?$pair@MH@0@0@Z PROC ; std::operator<=><float,int,float,int>, COMDAT
; __Left$ = ecx
; __Right$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00000	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00004	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00008	0f 2f c1	 comiss	 xmm0, xmm1
  0000b	76 03		 jbe	 SHORT $LN10@operator
  0000d	0c ff		 or	 al, 255			; 000000ffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 516  : }

  0000f	c3		 ret	 0
$LN10@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00010	0f 2f c8	 comiss	 xmm1, xmm0
  00013	76 04		 jbe	 SHORT $LN8@operator
  00015	b0 01		 mov	 al, 1
  00017	eb 0f		 jmp	 SHORT $LN7@operator
$LN8@operator:
  00019	0f 2e c8	 ucomiss xmm1, xmm0
  0001c	9f		 lahf
  0001d	f6 c4 44	 test	 ah, 68			; 00000044H
  00020	7a 04		 jp	 SHORT $LN6@operator
  00022	32 c0		 xor	 al, al
  00024	eb 02		 jmp	 SHORT $LN7@operator
$LN6@operator:
  00026	b0 80		 mov	 al, 128			; 00000080H
$LN7@operator:

; 51   :         return _Val._Value == 0;

  00028	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0002a	75 18		 jne	 SHORT $LN1@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00032	75 01		 jne	 SHORT $LN19@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 516  : }

  00034	c3		 ret	 0
$LN19@operator:
  00035	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00036	be 01 00 00 00	 mov	 esi, 1
  0003b	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00040	0f 4d c6	 cmovge	 eax, esi
  00043	5e		 pop	 esi
$LN1@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 516  : }

  00044	c3		 ret	 0
??$?__MMHMH@std@@YA?AUpartial_ordering@0@ABU?$pair@MH@0@0@Z ENDP ; std::operator<=><float,int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@U?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@U?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z PROC ; std::forward<std::pair<float,int> >, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@U?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z ENDP ; std::forward<std::pair<float,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Push_heap_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Push_heap_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z PROC ; std::_Push_heap_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 23   :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b da		 mov	 ebx, edx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 27   :         _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Top$[ebp]
  0000d	8d 73 ff	 lea	 esi, DWORD PTR [ebx-1]
  00010	d1 fe		 sar	 esi, 1
  00012	3b cb		 cmp	 ecx, ebx
  00014	7d 6e		 jge	 SHORT $LN45@Push_heap_
  00016	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Push_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00020	f3 0f 10 0c f7	 movss	 xmm1, DWORD PTR [edi+esi*8]
  00025	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00029	0f 2f c1	 comiss	 xmm0, xmm1
  0002c	76 04		 jbe	 SHORT $LN17@Push_heap_
  0002e	0c ff		 or	 al, 255			; 000000ffH
  00030	eb 38		 jmp	 SHORT $LN8@Push_heap_
$LN17@Push_heap_:
  00032	0f 2f c8	 comiss	 xmm1, xmm0
  00035	76 04		 jbe	 SHORT $LN15@Push_heap_
  00037	b0 01		 mov	 al, 1
  00039	eb 0f		 jmp	 SHORT $LN14@Push_heap_
$LN15@Push_heap_:
  0003b	0f 2e c8	 ucomiss xmm1, xmm0
  0003e	9f		 lahf
  0003f	f6 c4 44	 test	 ah, 68			; 00000044H
  00042	7a 04		 jp	 SHORT $LN13@Push_heap_
  00044	32 c0		 xor	 al, al
  00046	eb 02		 jmp	 SHORT $LN14@Push_heap_
$LN13@Push_heap_:
  00048	b0 80		 mov	 al, 128			; 00000080H
$LN14@Push_heap_:

; 51   :         return _Val._Value == 0;

  0004a	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0004c	75 1c		 jne	 SHORT $LN8@Push_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0004e	8b 4c f7 04	 mov	 ecx, DWORD PTR [edi+esi*8+4]
  00052	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00055	74 0d		 je	 SHORT $LN27@Push_heap_
$LN26@Push_heap_:
  00057	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0005c	b9 01 00 00 00	 mov	 ecx, 1
  00061	0f 4d c1	 cmovge	 eax, ecx
$LN27@Push_heap_:
  00064	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 515  :     return _Synth_three_way{}(_Left.second, _Right.second);

  00067	8b 4d 08	 mov	 ecx, DWORD PTR __Top$[ebp]
$LN8@Push_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  0006a	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 27   :         _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  0006c	75 16		 jne	 SHORT $LN45@Push_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0006e	f3 0f 11 0c df	 movss	 DWORD PTR [edi+ebx*8], xmm1

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  00073	8b 44 f7 04	 mov	 eax, DWORD PTR [edi+esi*8+4]
  00077	89 44 df 04	 mov	 DWORD PTR [edi+ebx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 30   :         _Hole             = _Idx;

  0007b	8b de		 mov	 ebx, esi
  0007d	4e		 dec	 esi
  0007e	d1 fe		 sar	 esi, 1
  00080	3b cb		 cmp	 ecx, ebx
  00082	7c 9c		 jl	 SHORT $LL4@Push_heap_
$LN45@Push_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00084	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  00087	8b 01		 mov	 eax, DWORD PTR [ecx]
  00089	89 04 df	 mov	 DWORD PTR [edi+ebx*8], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  0008c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0008f	89 44 df 04	 mov	 DWORD PTR [edi+ebx*8+4], eax
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 34   : }

  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
??$_Push_heap_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ENDP ; std::_Push_heap_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Pop_heap_hole_unchecked@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap_hole_unchecked@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00$$QAU10@U?$less@X@0@@Z PROC ; std::_Pop_heap_hole_unchecked<std::pair<float,int> *,std::pair<float,int>,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 87   : _CONSTEXPR20 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 87   : _CONSTEXPR20 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&& _Val, _Pr _Pred) {

  00005	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00006	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 366  :         second = _STD forward<_Ty2>(_Right.second);

  0000b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  00011	5e		 pop	 esi
  00012	2b d1		 sub	 edx, ecx
  00014	c1 fa 03	 sar	 edx, 3
  00017	89 55 08	 mov	 DWORD PTR __Dest$[ebp], edx
  0001a	33 d2		 xor	 edx, edx

; 94   :         _First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD forward<_Ty>(_Val), _Pred);
; 95   : }

  0001c	5d		 pop	 ebp

; 93   :     _STD _Pop_heap_hole_by_index(

  0001d	e9 00 00 00 00	 jmp	 ??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
??$_Pop_heap_hole_unchecked@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00$$QAU10@U?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_unchecked<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 1
??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z PROC ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 8265 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00003	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8265 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00007	53		 push	 ebx
  00008	8b 5d 08	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  0000f	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00013	0f 2f c1	 comiss	 xmm0, xmm1
  00016	76 04		 jbe	 SHORT $LN17@Med3_unche
  00018	0c ff		 or	 al, 255			; 000000ffH
  0001a	eb 31		 jmp	 SHORT $LN27@Med3_unche
$LN17@Med3_unche:
  0001c	0f 2f c8	 comiss	 xmm1, xmm0
  0001f	76 04		 jbe	 SHORT $LN15@Med3_unche
  00021	b0 01		 mov	 al, 1
  00023	eb 0f		 jmp	 SHORT $LN14@Med3_unche
$LN15@Med3_unche:
  00025	0f 2e c8	 ucomiss xmm1, xmm0
  00028	9f		 lahf
  00029	f6 c4 44	 test	 ah, 68			; 00000044H
  0002c	7a 04		 jp	 SHORT $LN13@Med3_unche
  0002e	32 c0		 xor	 al, al
  00030	eb 02		 jmp	 SHORT $LN14@Med3_unche
$LN13@Med3_unche:
  00032	b0 80		 mov	 al, 128			; 00000080H
$LN14@Med3_unche:

; 51   :         return _Val._Value == 0;

  00034	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00036	75 15		 jne	 SHORT $LN27@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00038	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0003b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0003e	74 0d		 je	 SHORT $LN27@Med3_unche
$LN26@Med3_unche:
  00040	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00045	b9 01 00 00 00	 mov	 ecx, 1
  0004a	0f 4d c1	 cmovge	 eax, ecx
$LN27@Med3_unche:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  0004d	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8267 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0004f	75 14		 jne	 SHORT $LN127@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 140  :     _Left    = _STD move(_Right);

  00051	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00055	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 141  :     _Right   = _STD move(_Tmp);

  00058	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1

; 139  :     _Ty _Tmp = _STD move(_Left);

  0005c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 140  :     _Left    = _STD move(_Right);

  0005f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 141  :     _Right   = _STD move(_Tmp);

  00062	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN127@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00065	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  00069	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0006d	0f 2f c1	 comiss	 xmm0, xmm1
  00070	76 04		 jbe	 SHORT $LN57@Med3_unche
  00072	0c ff		 or	 al, 255			; 000000ffH
  00074	eb 31		 jmp	 SHORT $LN67@Med3_unche
$LN57@Med3_unche:
  00076	0f 2f c8	 comiss	 xmm1, xmm0
  00079	76 04		 jbe	 SHORT $LN55@Med3_unche
  0007b	b0 01		 mov	 al, 1
  0007d	eb 0f		 jmp	 SHORT $LN54@Med3_unche
$LN55@Med3_unche:
  0007f	0f 2e c8	 ucomiss xmm1, xmm0
  00082	9f		 lahf
  00083	f6 c4 44	 test	 ah, 68			; 00000044H
  00086	7a 04		 jp	 SHORT $LN53@Med3_unche
  00088	32 c0		 xor	 al, al
  0008a	eb 02		 jmp	 SHORT $LN54@Med3_unche
$LN53@Med3_unche:
  0008c	b0 80		 mov	 al, 128			; 00000080H
$LN54@Med3_unche:

; 51   :         return _Val._Value == 0;

  0008e	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00090	75 15		 jne	 SHORT $LN67@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  00092	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00095	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00098	74 0d		 je	 SHORT $LN67@Med3_unche
$LN66@Med3_unche:
  0009a	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	0f 4d c1	 cmovge	 eax, ecx
$LN67@Med3_unche:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  000a7	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8271 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  000a9	75 6e		 jne	 SHORT $LN124@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 140  :     _Left    = _STD move(_Right);

  000ab	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  000af	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 141  :     _Right   = _STD move(_Tmp);

  000b2	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1

; 139  :     _Ty _Tmp = _STD move(_Left);

  000b6	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 140  :     _Left    = _STD move(_Right);

  000b9	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 141  :     _Right   = _STD move(_Tmp);

  000bc	89 7a 04	 mov	 DWORD PTR [edx+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000bf	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  000c3	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000c7	0f 2f c1	 comiss	 xmm0, xmm1
  000ca	76 04		 jbe	 SHORT $LN97@Med3_unche
  000cc	0c ff		 or	 al, 255			; 000000ffH
  000ce	eb 2e		 jmp	 SHORT $LN107@Med3_unche
$LN97@Med3_unche:
  000d0	0f 2f c8	 comiss	 xmm1, xmm0
  000d3	76 04		 jbe	 SHORT $LN95@Med3_unche
  000d5	b0 01		 mov	 al, 1
  000d7	eb 0f		 jmp	 SHORT $LN94@Med3_unche
$LN95@Med3_unche:
  000d9	0f 2e c8	 ucomiss xmm1, xmm0
  000dc	9f		 lahf
  000dd	f6 c4 44	 test	 ah, 68			; 00000044H
  000e0	7a 04		 jp	 SHORT $LN93@Med3_unche
  000e2	32 c0		 xor	 al, al
  000e4	eb 02		 jmp	 SHORT $LN94@Med3_unche
$LN93@Med3_unche:
  000e6	b0 80		 mov	 al, 128			; 00000080H
$LN94@Med3_unche:

; 51   :         return _Val._Value == 0;

  000e8	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 512  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  000ea	75 12		 jne	 SHORT $LN107@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare

; 353  :             return _Left <=> _Right;

  000ec	3b 7e 04	 cmp	 edi, DWORD PTR [esi+4]
  000ef	74 0d		 je	 SHORT $LN107@Med3_unche
$LN106@Med3_unche:
  000f1	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000f6	b9 01 00 00 00	 mov	 ecx, 1
  000fb	0f 4d c1	 cmovge	 eax, ecx
$LN107@Med3_unche:

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  000fe	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8274 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00100	75 17		 jne	 SHORT $LN124@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility

; 140  :     _Left    = _STD move(_Right);

  00102	8b 06		 mov	 eax, DWORD PTR [esi]
  00104	0f 28 c1	 movaps	 xmm0, xmm1
  00107	89 02		 mov	 DWORD PTR [edx], eax
  00109	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 141  :     _Right   = _STD move(_Tmp);

  0010c	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00110	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 140  :     _Left    = _STD move(_Right);

  00113	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 141  :     _Right   = _STD move(_Tmp);

  00116	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN124@Med3_unche:
  00119	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm

; 8278 : }

  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ENDP ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@AAPAU?$pair@MH@std@@@std@@YAAAPAU?$pair@MH@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$pair@MH@std@@@std@@YAAAPAU?$pair@MH@0@AAPAU10@@Z PROC ; std::forward<std::pair<float,int> * &>, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@AAPAU?$pair@MH@std@@@std@@YAAAPAU?$pair@MH@0@AAPAU10@@Z ENDP ; std::forward<std::pair<float,int> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$addressof@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z
_TEXT	SEGMENT
??$addressof@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z PROC ; std::addressof<CPythonItem::SGroundItemInstance *>, COMDAT
; __Val$ = ecx

; 1525 :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 1526 : }

  00002	c3		 ret	 0
??$addressof@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ENDP ; std::addressof<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$construct_at@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@ABQAU12@@Z
_TEXT	SEGMENT
??$construct_at@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@ABQAU12@@Z PROC ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	8b c1		 mov	 eax, ecx

; 464  : }

  00006	c3		 ret	 0
??$construct_at@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@ABQAU12@@Z ENDP ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$move@AAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z PROC ; std::move<CPythonItem::SGroundItemInstance * &>, COMDAT
; __Arg$ = ecx

; 1513 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1514 : }

  00002	c3		 ret	 0
??$move@AAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ENDP ; std::move<CPythonItem::SGroundItemInstance * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4762 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4763 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4764 :     const auto _First_ptr    = _STD _To_address(_First);
; 4765 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4766 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);
; 4767 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4768 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4769 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);

  00003	2b d1		 sub	 edx, ecx

; 4770 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00005	51		 push	 ecx
  00006	52		 push	 edx
  00007	8b 55 08	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QBDQAPAU12@II@Z ; std::_Copy_memmove_tail<CPythonItem::SGroundItemInstance * *>
  0000f	83 c4 08	 add	 esp, 8

; 4771 : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_To_address@PAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_PABQAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_PABQAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::_To_address<CPythonItem::SGroundItemInstance * *>, COMDAT
; __Val$ = ecx

; 4616 :     _STL_INTERNAL_STATIC_ASSERT(contiguous_iterator<_Iter>);
; 4617 :     return _STD to_address(_Val);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 4618 : }

  00002	c3		 ret	 0
??$_To_address@PAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_PABQAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::_To_address<CPythonItem::SGroundItemInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Emplace_back@PAUSGroundItemInstance@CPythonItem@@@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEX$$QAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUSGroundItemInstance@CPythonItem@@@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEX$$QAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back<CPythonItem::SGroundItemInstance *>, COMDAT
; _this$ = ecx

; 1843 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1844 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 02		 mov	 DWORD PTR [edx], eax

; 1845 :         ++_Last;

  0000d	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 1846 :     }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??$_Emplace_back@PAUSGroundItemInstance@CPythonItem@@@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEX$$QAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@ABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
??$forward@ABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@ABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@ABQAU10@@Z
_TEXT	SEGMENT
??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@ABQAU10@@Z PROC ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	8b c1		 mov	 eax, ecx

; 464  : }

  00006	c3		 ret	 0
??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@ABQAU10@@Z ENDP ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Release, COMDAT
; _this$ = ecx

; 1849 :         _First = _Last;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	89 01		 mov	 DWORD PTR [ecx], eax

; 1850 :         return _Last;
; 1851 :     }

  00005	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::~_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 1839 :         _STD _Destroy_range(_First, _Last, _Al);
; 1840 :     }

  00000	c2 00 00	 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::~_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@PAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@PAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 1833 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Al_$[ebp]
  0000e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00011	8b c1		 mov	 eax, ecx
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@PAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ?swap@?$pair@MH@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?swap@?$pair@MH@std@@QAEXAAU12@@Z PROC			; std::pair<float,int>::swap, COMDAT
; _this$ = ecx

; 456  :         noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  :     _Left    = _STD move(_Right);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]

; 456  :         noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value) {

  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 140  :     _Left    = _STD move(_Right);

  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0000f	89 06		 mov	 DWORD PTR [esi], eax
  00011	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 141  :     _Right   = _STD move(_Tmp);

  00014	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00018	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 140  :     _Left    = _STD move(_Right);

  0001b	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 141  :     _Right   = _STD move(_Tmp);

  0001e	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00021	5e		 pop	 esi

; 457  :         using _STD swap;
; 458  :         swap(first, _Right.first); // intentional ADL
; 459  :         swap(second, _Right.second); // intentional ADL
; 460  :     }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?swap@?$pair@MH@std@@QAEXAAU12@@Z ENDP			; std::pair<float,int>::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAIABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAIABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 746  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 747  :     }

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAIABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal, COMDAT
; _this$ = ecx

; 2231 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 2232 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector
;	COMDAT ?capacity@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::capacity, COMDAT
; _this$ = ecx

; 1923 :         auto& _My_data = _Mypair._Myval2;
; 1924 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1925 :     }

  00008	c3		 ret	 0
?capacity@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?allocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@I@Z PROC ; std::allocator<CPythonItem::SGroundItemInstance *>::allocate, COMDAT
; _this$dead$ = ecx

; 988  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  :         if (_Count > _Max_possible) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000b	77 2b		 ja	 SHORT $LN19@allocate

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0000d	c1 e0 02	 shl	 eax, 2

; 227  :     if (_Bytes == 0) {

  00010	85 c0		 test	 eax, eax
  00012	75 04		 jne	 SHORT $LN8@allocate

; 989  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 991  :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN8@allocate:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	50		 push	 eax
  00019	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001e	72 0c		 jb	 SHORT $LN10@allocate

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00020	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>

; 989  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 991  :     }

  00025	83 c4 04	 add	 esp, 4
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN10@allocate:

; 136  :         return ::operator new(_Bytes);

  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 989  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 991  :     }

  00031	83 c4 04	 add	 esp, 4
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN19@allocate:

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00038	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN16@allocate:
  0003d	cc		 int	 3
?allocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@I@Z ENDP ; std::allocator<CPythonItem::SGroundItemInstance *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1543 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1544 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$swap@M$0A@@std@@YAXAAM0@Z
_TEXT	SEGMENT
??$swap@M$0A@@std@@YAXAAM0@Z PROC			; std::swap<float,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 139  :     _Ty _Tmp = _STD move(_Left);

  00000	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 140  :     _Left    = _STD move(_Right);

  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 141  :     _Right   = _STD move(_Tmp);

  00008	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 142  : }

  0000c	c3		 ret	 0
??$swap@M$0A@@std@@YAXAAM0@Z ENDP			; std::swap<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$to_address@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@@Z
_TEXT	SEGMENT
??$to_address@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@@Z PROC ; std::to_address<CPythonItem::SGroundItemInstance *>, COMDAT
; __Val$ = ecx

; 541  :     static_assert(!is_function_v<_Ty>, "N4950 [pointer.conversion]/1: Mandates: T is not a function type.");
; 542  :     return _Val;

  00000	8b c1		 mov	 eax, ecx

; 543  : }

  00002	c3		 ret	 0
??$to_address@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@@Z ENDP ; std::to_address<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$move@AAPAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAPAUSGroundItemInstance@CPythonItem@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAPAUSGroundItemInstance@CPythonItem@@AAPAPAU12@@Z PROC ; std::move<CPythonItem::SGroundItemInstance * * &>, COMDAT
; __Arg$ = ecx

; 1513 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1514 : }

  00002	c3		 ret	 0
??$move@AAPAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAPAUSGroundItemInstance@CPythonItem@@AAPAPAU12@@Z ENDP ; std::move<CPythonItem::SGroundItemInstance * * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QBDQAPAU12@II@Z
_TEXT	SEGMENT
__Byte_count$ = 8					; size = 4
__Object_count$dead$ = 12				; size = 4
??$_Copy_memmove_tail@PAPAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QBDQAPAU12@II@Z PROC ; std::_Copy_memmove_tail<CPythonItem::SGroundItemInstance * *>, COMDAT
; __First_ch$ = ecx
; __Dest$ = edx

; 4747 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4748 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4749 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4750 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4751 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Byte_count$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b fa		 mov	 edi, edx
  0000b	51		 push	 ecx
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _memmove
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4752 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4753 :         (void) _Object_count;
; 4754 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4755 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00015	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi

; 4756 :     } else {
; 4757 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4758 :     }
; 4759 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Copy_memmove_tail@PAPAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QBDQAPAU12@II@Z ENDP ; std::_Copy_memmove_tail<CPythonItem::SGroundItemInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$forward@PAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z PROC ; std::forward<CPythonItem::SGroundItemInstance *>, COMDAT
; __Arg$ = ecx

; 1502 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1503 : }

  00002	c3		 ret	 0
??$forward@PAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ENDP ; std::forward<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$construct@PAUSGroundItemInstance@CPythonItem@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUSGroundItemInstance@CPythonItem@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@$$QAPAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 728  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 734  :     }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@PAUSGroundItemInstance@CPythonItem@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@$$QAPAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QBEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QBEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1543 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1544 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QBEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits
;	COMDAT ??$move@AAM@std@@YA$$QAMAAM@Z
_TEXT	SEGMENT
??$move@AAM@std@@YA$$QAMAAM@Z PROC			; std::move<float &>, COMDAT
; __Arg$ = ecx

; 1513 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1514 : }

  00002	c3		 ret	 0
??$move@AAM@std@@YA$$QAMAAM@Z ENDP			; std::move<float &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility
;	COMDAT ??$construct_at@PAUSGroundItemInstance@CPythonItem@@PAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@$$QAPAU12@@Z
_TEXT	SEGMENT
??$construct_at@PAUSGroundItemInstance@CPythonItem@@PAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@$$QAPAU12@@Z PROC ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 463  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	8b c1		 mov	 eax, ecx

; 464  : }

  00006	c3		 ret	 0
??$construct_at@PAUSGroundItemInstance@CPythonItem@@PAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@$$QAPAU12@@Z ENDP ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility
;	COMDAT ??$swap@H$0A@@std@@YAXAAH0@Z
_TEXT	SEGMENT
??$swap@H$0A@@std@@YAXAAH0@Z PROC			; std::swap<int,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 139  :     _Ty _Tmp = _STD move(_Left);
; 140  :     _Left    = _STD move(_Right);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	56		 push	 esi
  00003	8b 31		 mov	 esi, DWORD PTR [ecx]
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 141  :     _Right   = _STD move(_Tmp);

  00007	89 32		 mov	 DWORD PTR [edx], esi
  00009	5e		 pop	 esi

; 142  : }

  0000a	c3		 ret	 0
??$swap@H$0A@@std@@YAXAAH0@Z ENDP			; std::swap<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
;	COMDAT ??Bstrong_ordering@std@@QBE?AUpartial_ordering@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??Bstrong_ordering@std@@QBE?AUpartial_ordering@1@XZ PROC ; std::strong_ordering::operator std::partial_ordering, COMDAT
; _this$ = ecx

; 178  :     constexpr operator partial_ordering() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 179  :         return {static_cast<_Compare_t>(_Value)};

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8a 09		 mov	 cl, BYTE PTR [ecx]
  00008	88 08		 mov	 BYTE PTR [eax], cl

; 180  :     }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??Bstrong_ordering@std@@QBE?AUpartial_ordering@1@XZ ENDP ; std::strong_ordering::operator std::partial_ordering
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
;	COMDAT ??8std@@YA_NUpartial_ordering@0@U_Literal_zero@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
___formal$ = 12						; size = 1
??8std@@YA_NUpartial_ordering@0@U_Literal_zero@0@@Z PROC ; std::operator==, COMDAT

; 50   :     _NODISCARD friend constexpr bool operator==(const partial_ordering _Val, _Literal_zero) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   :         return _Val._Value == 0;

  00003	80 7d 08 00	 cmp	 BYTE PTR __Val$[ebp], 0
  00007	0f 94 c0	 sete	 al

; 52   :     }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??8std@@YA_NUpartial_ordering@0@U_Literal_zero@0@@Z ENDP ; std::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\compare
;	COMDAT ??Mstd@@YA_NUpartial_ordering@0@U_Literal_zero@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
___formal$ = 12						; size = 1
??Mstd@@YA_NUpartial_ordering@0@U_Literal_zero@0@@Z PROC ; std::operator<, COMDAT

; 56   :     _NODISCARD friend constexpr bool operator<(const partial_ordering _Val, _Literal_zero) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00003	80 7d 08 ff	 cmp	 BYTE PTR __Val$[ebp], -1
  00007	0f 94 c0	 sete	 al

; 58   :     }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??Mstd@@YA_NUpartial_ordering@0@U_Literal_zero@0@@Z ENDP ; std::operator<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
_cosf	PROC						; COMDAT
; __X$ = xmm0s

; 683  :             return (float)cos(_X);

  00000	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00004	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00009	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0

; 684  :         }

  0000d	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv68 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 788  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 789  :             return (float)sin(_X);

  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0001a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv68[esp+8], xmm0
  00020	d9 44 24 04	 fld	 DWORD PTR tv68[esp+8]

; 790  :         }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
;	COMDAT ?D3DXQuaternionConjugate@@YAPAUD3DXQUATERNION@@PAU1@PBU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
_pQ$ = 12						; size = 4
?D3DXQuaternionConjugate@@YAPAUD3DXQUATERNION@@PAU1@PBU1@@Z PROC ; D3DXQuaternionConjugate, COMDAT

; 1610 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1611 : #ifdef D3DX_DEBUG
; 1612 :     if(!pOut || !pQ)
; 1613 :         return NULL;
; 1614 : #endif
; 1615 : 
; 1616 :     pOut->x = -pQ->x;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pQ$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00009	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00011	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00015	0f 57 c1	 xorps	 xmm0, xmm1
  00018	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1617 :     pOut->y = -pQ->y;

  0001c	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00021	0f 57 c1	 xorps	 xmm0, xmm1
  00024	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1618 :     pOut->z = -pQ->z;

  00029	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0002e	0f 57 c1	 xorps	 xmm0, xmm1
  00031	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1619 :     pOut->w =  pQ->w;

  00036	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00039	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1620 :     return pOut;
; 1621 : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?D3DXQuaternionConjugate@@YAPAUD3DXQUATERNION@@PAU1@PBU1@@Z ENDP ; D3DXQuaternionConjugate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.h
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 332  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  :     x = fx;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00006	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0000e	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00012	0f 57 c1	 xorps	 xmm0, xmm1

; 180  :     x = fx;

  00015	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00019	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001e	0f 57 c1	 xorps	 xmm0, xmm1

; 181  :     y = fy;

  00021	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00026	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0002b	0f 57 c1	 xorps	 xmm0, xmm1

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 250  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\_m2work\Server Client TMP4\ClientVS22\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fw$ = 20						; size = 4
??0D3DXQUATERNION@@QAE@MMMM@Z PROC			; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 667  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 668  :     y = fy;
; 669  :     z = fz;
; 670  :     w = fw;
; 671  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fw$[ebp]
  00027	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??0D3DXQUATERNION@@QAE@MMMM@Z ENDP			; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
END
